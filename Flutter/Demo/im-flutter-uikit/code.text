文件：/im-flutter-uikit/lib/custom_animation.dart
import 'package:flutter/material.dart';
import 'package:flutter_easyloading/flutter_easyloading.dart';

class CustomAnimation extends EasyLoadingAnimation {
  CustomAnimation();

  @override
  Widget buildWidget(
    Widget child,
    AnimationController controller,
    AlignmentGeometry alignment,
  ) {
    return Opacity(
      opacity: controller.value,
      child: RotationTransition(
        turns: controller,
        child: child,
      ),
    );
  }
}
文件：/im-flutter-uikit/lib/firebase_options.dart
// File generated by FlutterFire CLI.
// ignore_for_file: lines_longer_than_80_chars, avoid_classes_with_only_static_members
import 'package:firebase_core/firebase_core.dart' show FirebaseOptions;
import 'package:flutter/foundation.dart'
    show defaultTargetPlatform, kIsWeb, TargetPlatform;

/// Default [FirebaseOptions] for use with your Firebase apps.
///
/// Example:
/// ```dart
/// import 'firebase_options.dart';
/// // ...
/// await Firebase.initializeApp(
///   options: DefaultFirebaseOptions.currentPlatform,
/// );
/// ```
class DefaultFirebaseOptions {
  static FirebaseOptions get currentPlatform {
    if (kIsWeb) {
      return web;
    }
    switch (defaultTargetPlatform) {
      case TargetPlatform.android:
        return android;
      case TargetPlatform.iOS:
        return ios;
      case TargetPlatform.macOS:
        return macos;
      case TargetPlatform.windows:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for windows - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      case TargetPlatform.linux:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for linux - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      default:
        throw UnsupportedError(
          'DefaultFirebaseOptions are not supported for this platform.',
        );
    }
  }

  static const FirebaseOptions web = FirebaseOptions(
    apiKey: 'AIzaSyCuSazGXGy3rO9_Icfme0VOWUyaSYoktHs',
    appId: '1:648596655528:web:385d76da5e44cc007fe19d',
    messagingSenderId: '648596655528',
    projectId: 'tencentcloud-im',
    authDomain: 'tencentcloud-im.firebaseapp.com',
    storageBucket: 'tencentcloud-im.appspot.com',
  );

  static const FirebaseOptions android = FirebaseOptions(
    apiKey: 'AIzaSyAchl9gN87F1MaCBL1jUr1gCLfhsX_YL7Y',
    appId: '1:648596655528:android:982a4a39035201997fe19d',
    messagingSenderId: '648596655528',
    projectId: 'tencentcloud-im',
    storageBucket: 'tencentcloud-im.appspot.com',
  );

  static const FirebaseOptions ios = FirebaseOptions(
    apiKey: 'AIzaSyAWukKi5yAYSP-35pzshNUTJGbzEBAe71o',
    appId: '1:648596655528:ios:5ce1cb99ee9f1a477fe19d',
    messagingSenderId: '648596655528',
    projectId: 'tencentcloud-im',
    storageBucket: 'tencentcloud-im.appspot.com',
    iosClientId: '648596655528-kafivq0ki0vj8pdq7n75399neq10ov53.apps.googleusercontent.com',
    iosBundleId: 'com.tencent.im.flutter.uikit',
  );

  static const FirebaseOptions macos = FirebaseOptions(
    apiKey: 'AIzaSyAWukKi5yAYSP-35pzshNUTJGbzEBAe71o',
    appId: '1:648596655528:ios:a97698ee481cb1ff7fe19d',
    messagingSenderId: '648596655528',
    projectId: 'tencentcloud-im',
    storageBucket: 'tencentcloud-im.appspot.com',
    iosClientId: '648596655528-6mjipjaa7gegcsfr88fhsdvjcdp5gb86.apps.googleusercontent.com',
    iosBundleId: 'com.tencent.flutter.tuikit',
  );
}
文件：/im-flutter-uikit/lib/generated_plugin_registrant.dart
//
// Generated file. Do not edit.
//

// ignore_for_file: directives_ordering
// ignore_for_file: lines_longer_than_80_chars

import 'package:camera_web/camera_web.dart';
import 'package:connectivity_plus_web/connectivity_plus_web.dart';
import 'package:device_info_plus_web/device_info_plus_web.dart';
import 'package:file_picker/_internal/file_picker_web.dart';
import 'package:firebase_core_web/firebase_core_web.dart';
import 'package:firebase_messaging_web/firebase_messaging_web.dart';
import 'package:fluttertoast/fluttertoast_web.dart';
import 'package:image_picker_for_web/image_picker_for_web.dart';
import 'package:package_info_plus_web/package_info_plus_web.dart';
import 'package:shared_preferences_web/shared_preferences_web.dart';
import 'package:tencent_im_sdk_plugin_web/tencent_im_sdk_plugin_web.dart';
import 'package:tencent_trtc_cloud/web/trtc_cloud_web.dart';
import 'package:uni_links_web/uni_links_web.dart';
import 'package:url_launcher_web/url_launcher_web.dart';
import 'package:video_player_web/video_player_web.dart';
import 'package:wakelock_web/wakelock_web.dart';

import 'package:flutter_web_plugins/flutter_web_plugins.dart';

// ignore: public_member_api_docs
void registerPlugins(Registrar registrar) {
  CameraPlugin.registerWith(registrar);
  ConnectivityPlusPlugin.registerWith(registrar);
  DeviceInfoPlusPlugin.registerWith(registrar);
  FilePickerWeb.registerWith(registrar);
  FirebaseCoreWeb.registerWith(registrar);
  FirebaseMessagingWeb.registerWith(registrar);
  FluttertoastWebPlugin.registerWith(registrar);
  ImagePickerPlugin.registerWith(registrar);
  PackageInfoPlugin.registerWith(registrar);
  SharedPreferencesPlugin.registerWith(registrar);
  TencentImSDKPluginWeb.registerWith(registrar);
  TencentTRTCCloudWeb.registerWith(registrar);
  UniLinksPlugin.registerWith(registrar);
  UrlLauncherPlugin.registerWith(registrar);
  VideoPlayerPlugin.registerWith(registrar);
  WakelockWeb.registerWith(registrar);
  registrar.registerMessageHandler();
}
文件：/im-flutter-uikit/lib/main.dart
// ignore_for_file: unused_import

import 'dart:io' show Platform;
import 'package:firebase_core/firebase_core.dart';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:flutter_easyloading/flutter_easyloading.dart';
import 'package:flutter_localizations/flutter_localizations.dart';
import 'package:tim_ui_kit/ui/utils/color.dart';
import 'package:tim_ui_kit_calling_plugin/tim_ui_kit_calling_plugin.dart';
import 'package:timuikit/custom_animation.dart';
import 'package:timuikit/i18n/strings.g.dart';
import 'package:timuikit/src/config.dart';
import 'package:timuikit/src/pages/app.dart';
import 'package:timuikit/src/provider/custom_sticker_package.dart';
import 'package:timuikit/src/provider/discuss.dart';
import 'package:timuikit/src/provider/login_user_Info.dart';
import 'package:timuikit/src/provider/theme.dart';

import 'package:provider/provider.dart';

import 'firebase_options.dart';
import 'i18n/i18n_utils.dart';

void main() async {
  // 设置状态栏样式
  SystemUiOverlayStyle style = SystemUiOverlayStyle(
    statusBarColor: hexToColor('ededed'),
  );
  SystemChrome.setSystemUIOverlayStyle(style);
  // 全局loading
  configLoading();
  // AutoSizeUtil.setStandard(375, isAutoTextSize: true);
  // fast i18n use device locale
  WidgetsFlutterBinding.ensureInitialized();
  final String? deviceLocale = WidgetsBinding.instance?.window.locale.toLanguageTag();
  LocaleSettings.setLocale(I18nUtils.findDeviceLocale(deviceLocale));

  // 这里打开后可以用Google FCM推送
  // WidgetsFlutterBinding.ensureInitialized();
  // await Firebase.initializeApp(
  //   options: DefaultFirebaseOptions.currentPlatform,
  // );

  // 这里打开后可以用百度地图
  // if (Platform.isIOS) {
  //   BMFMapSDK.setApiKeyAndCoordType(
  //       IMDemoConfig.baiduMapIOSAppKey, BMF_COORD_TYPE.BD09LL);
  // } else if (Platform.isAndroid) {
  //   BMFMapSDK.setCoordType(BMF_COORD_TYPE.BD09LL);
  // }
  // BMFMapSDK.setAgreePrivacy(true);

  SystemChrome.setPreferredOrientations([DeviceOrientation.portraitUp])
      .then((_) {
    runApp(
      // runAutoApp(
      TranslationProvider(
        child: MultiProvider(
          providers: [
            ChangeNotifierProvider(create: (_) => DiscussData()),
            ChangeNotifierProvider(create: (_) => LoginUserInfo()),
            ChangeNotifierProvider(create: (_) => DefaultThemeData()),
            ChangeNotifierProvider(create: (_) => CustomStickerPackageData()),
          ],
          child: const TUIKitDemoApp(),
        ),
      ),
    );
  });
}

class TUIKitDemoApp extends StatelessWidget {
  const TUIKitDemoApp({Key? key}) : super(key: key);
  @override
  Widget build(BuildContext context) {
    final theme = Provider.of<DefaultThemeData>(context).theme;
    return MaterialApp(
      navigatorKey: TUICalling.navigatorKey,
      locale: TranslationProvider.of(context).flutterLocale, // use provider
      supportedLocales: LocaleSettings.supportedLocales,
      localizationsDelegates: GlobalMaterialLocalizations.delegates,
      // localeListResolutionCallback: (deviceLocale, supportedLocales){
      //   print('deviceLocale: $deviceLocale');
      // },
      theme: ThemeData(
        platform: TargetPlatform.iOS,
        pageTransitionsTheme: const PageTransitionsTheme(builders: {
          TargetPlatform.iOS: CupertinoPageTransitionsBuilder(),
          TargetPlatform.android: CupertinoPageTransitionsBuilder(),
        }),
        elevatedButtonTheme: ElevatedButtonThemeData(
            style: ElevatedButton.styleFrom(
          primary: theme.primaryColor,
        )),
      ),
      home: const MyApp(),
      builder: EasyLoading.init(),
    );
  }
}

void configLoading() {
  EasyLoading.instance
    ..displayDuration = const Duration(milliseconds: 2000)
    ..indicatorType = EasyLoadingIndicatorType.fadingCircle
    ..loadingStyle = EasyLoadingStyle.dark
    ..indicatorSize = 45.0
    ..radius = 10.0
    ..progressColor = Colors.yellow
    ..backgroundColor = Colors.green
    ..indicatorColor = Colors.yellow
    ..textColor = Colors.yellow
    ..maskColor = Colors.blue.withOpacity(0.5)
    ..userInteractions = true
    ..dismissOnTap = false
    ..customAnimation = CustomAnimation();
}
文件：/im-flutter-uikit/lib/i18n/i18n_utils.dart
// ignore_for_file: non_constant_identifier_names, avoid_print

import 'dart:convert';

import 'package:timuikit/i18n/strings.g.dart';

final I18nUtils ttBuild = I18nUtils();
String imt(String value) => ttBuild._imt(value);
Function imt_para(String template, String value) =>
    ttBuild._imt_parameter(template, value);

class I18nUtils {
  I18nUtils._internal() {
    _init();
  }
  factory I18nUtils() => _instance;
  static late final I18nUtils _instance = I18nUtils._internal();

  Map<String, dynamic> zhMap = {};
  Map zhMapRevert = {};
  RegExp expForParameterOut = RegExp(r"{{[^]+}}");
  RegExp expForParameter = RegExp(r"(?<=\{{)[^}]*(?=\}})");

  void _init() {
    zhMap = jsonDecode(zhJson);
    zhMapRevert = revertMap(zhMap);
  }

  String _imt(String value) {
    String currentKey = zhMapRevert[value] ?? getKeyFromMap(zhMap, value) ?? "";
    String translatedValue = t[currentKey] ?? value;
    return translatedValue;
  }

  Function _imt_parameter(String template, String value) {
    // 调用模板：imt_para("已选：{{addType}}",'已选：$addType')(addType: addType)
    final originTemplate = template.replaceAllMapped(
        expForParameterOut, (Match m) => replaceParameterForTemplate(m));
    final originKey = zhMapRevert[originTemplate] ??
        getKeyFromMap(zhMap, originTemplate) ??
        "";
    print("template $originTemplate $value $originKey");
    final Function translatedValueFunction = t[originKey] ??
        ({
          Object? option1,
          Object? option2,
          Object? option3,
          Object? option4,
          Object? option5,
          Object? option6,
          Object? option7,
          Object? option8,
          Object? option9,
          Object? option10,
          Object? option11,
          Object? option12,
          Object? option13,
          Object? option14,
          Object? option15,
          Object? option16,
          Object? option17,
          Object? option18,
          Object? option19,
          Object? option20,
        }) {
          return value;
        };
    return translatedValueFunction;
  }

  String replaceParameterForTemplate(Match value) {
    final String? parameter = expForParameter.stringMatch(value[0] ?? "");
    return "\$$parameter";
  }

  static String getKeyFromMap(Map map, String key) {
    String currentKey = "";
    for (String tempKey in map.keys) {
      if (map[tempKey] == key) {
        currentKey = tempKey;
        break;
      }
    }
    return currentKey;
  }

  static Map revertMap(Map map) {
    final Map<String, String> newMap = {};
    for (String tempKey in map.keys) {
      newMap[map[tempKey]] = tempKey;
    }
    return newMap;
  }

  static int getHashValue(String text) {
    "use strict";

    var hash = 5381, index = text.length;

    while (index > 0) {
      hash = (hash * 33) ^ text.codeUnitAt(--index);
    }

    return hash;
  }

  static AppLocale findDeviceLocale(String? deviceLocale) {
    if (deviceLocale != null) {
      final typedLocale = _selectLocale(deviceLocale);
      if (typedLocale != null) {
        return typedLocale;
      }
    }
    return AppLocale.en;
  }

  static final _localeRegex = RegExp(r'^([a-z]{2,8})?([_-]([A-Za-z]{4}))?([_-]?([A-Z]{2}|[0-9]{3}))?$');
  static AppLocale? _selectLocale(String localeRaw) {
    final match = _localeRegex.firstMatch(localeRaw);
    AppLocale? selected;
    if (match != null) {
      final language = match.group(1);
      final country = match.group(5);
      final script = match.group(3);
      // match exactly
      selected = AppLocale.values
          .cast<AppLocale?>()
          .firstWhere((supported) => supported?.languageTag == localeRaw.replaceAll('_', '-'), orElse: () => null);

      if (selected == null && script != null) {
        // match script
        selected = AppLocale.values
            .cast<AppLocale?>()
            .firstWhere((supported) => supported?.languageTag.contains(script) == true, orElse: () => null);
      }

      if (selected == null && language != null) {
        // match language
        selected = AppLocale.values
            .cast<AppLocale?>()
            .firstWhere((supported) => supported?.languageTag.startsWith(language) == true, orElse: () => null);
      }

      if (selected == null && country != null) {
        // match country
        selected = AppLocale.values
            .cast<AppLocale?>()
            .firstWhere((supported) => supported?.languageTag.contains(country) == true, orElse: () => null);
      }
    }
    return selected;
  }

  // 不用手动改这里了，也不用手动node scan。这些国际化的文件也不用再提交到dev。
  final zhJson = 
    '''{"k_14cahuz":"关于腾讯云 · IM","k_0llnalm":"SDK版本号","k_13dyfii":"应用版本号","k_12h52zh":"隐私政策","k_0fxhhwb":"用户协议","k_12u8g8l":"免责声明","k_18z2e6q":"IM即时通信（“本产品”）是由腾讯云提供的一款测试产品，腾讯云享有本产品的著作权和所有权。本产品仅用于功能体验，不得用于任何商业用途。严禁在使用中有任何色情、辱骂、暴恐、涉政等违法内容传播。","k_003nevv":"取消","k_003rzap":"确定","k_0zu7dd7":"信息收集清单","k_0mcqhgh":"信息共享清单","k_131g7q4":"注销账户","k_18nuh87":"联系我们","k_16758qw":"添加好友","k_0elt0kw":"添加群聊","k_03f15qk":"黑名单","k_0s3p3ji":"暂无黑名单","k_12eqaty":"确认注销账户","k_0ziqsr6":"账户注销成功！","k_002qtgt":"注销","k_1t0akzp":"注销后，您将无法使用当前账号，相关数据也将删除且无法找回。当前账号ID: \$option1","k_15d22qk":"注销账号","k_0uc5cnb":"我们还在内测中，暂不支持创建频道。","k_0s5ey0o":"实时音视频 TRTC","k_03gpl3d":"大家好","k_0352fjr":"无网络连接，进入频道失败","k_036phup":"腾讯云IM","k_167916k":"微信好友","k_03euwr1":"朋友圈","k_0d7n018":"结束话题","k_0d826hk":"置顶话题","k_15wcgna":"结束成功","k_15wo7xu":"置顶成功","k_0s5zoi3":"发生错误 \$option1","k_0cxccci":"邀请你视频通话","k_06lhh4b":"邀请你语音通话","k_1699p6d":"腾讯大厦","k_1ngd60h":"深圳市深南大道10000号","k_1na29vg":"位置消息维护中","k_003ltgm":"位置","k_0h22snw":"语音通话","k_0h20hg5":"视频通话","k_002s934":"话题","k_1ywo9ut":"即时通信 IM (Instant Messaging)基于 QQ 底层 IM 能力开发，仅需植入 SDK 即可轻松集成聊天、会话、群组、资料管理和直播弹幕能力，也支持通过信令消息与白板等其他产品打通，全面覆盖您的业务场景，支持各大平台小程序接入使用，全面满足通信需要","k_0ios26v":"未检测到微信安装","k_18g3zdo":"云通信·IM","k_1m8vyp0":"新的联系人","k_0elz70e":"我的群聊","k_18tb4mo":"无联系人","k_0dla4vp":"反馈及建议可以加入QQ群","k_1odrjd1":"在线时间: 周一到周五，早上10点 - 晚上8点","k_1bh903m":"QQ群号复制成功","k_16264lp":"复制群号","k_17fmlyf":"清除聊天","k_0dhesoz":"取消置顶","k_002sk7x":"置顶","k_002rflt":"删除","k_003kv3v":"搜索","k_0gmpgcg":"暂无会话","k_1m8zuj4":"选择联系人","k_002tu9r":"性能","k_0i8egqa":"获取到的消息:\$option8","k_0pokyns":"获取讨论区列表失败 \$option8","k_1tmcw5c":"请完善话题标题","k_1cnmslk":"必须选择一个标签","k_1y03m8a":"创建话题失败 \$option8","k_0z3ytji":"创建话题成功","k_1a8vem3":"创建者异常","k_0eskkr1":"选择讨论区","k_0d7plb5":"创建话题","k_144t0ho":"---- 相关讨论 ----","k_0pnz619":"填写话题标题","k_136v279":"+标签（至少添加一个）","k_04hjhvp":"讨论区参数异常","k_002r79h":"全部","k_03ejkb6":"已加入","k_172tngw":"话题（未连接）","k_0rnmfc4":"该讨论区下暂无话题","k_1pq0ybn":"暂未加入任何话题","k_0bh95w0":"无网络连接，进入话题失败","k_1xmms9t":"进群申请列表","k_002twmj":"群聊","k_0em28sp":"暂无群聊","k_09kalj0":"清空聊天记录","k_18qjstb":"转让群主","k_14j5iul":"删除并退出","k_125ru1w":"解散该群","k_0jtutmw":"退出后不会接收到此群聊消息","k_0jtzmqa":"解散后不会接收到此群聊消息","k_18ger86":"腾讯云 · IM","k_1vd70l1":"服务亿级 QQ 用户的即时通讯技术","k_04dqh36":"暂无新联系人","k_197r4f7":"即时通信服务连接成功","k_1s5xnir":"即时通信 SDK初始化失败","k_1v6uh9c":"登录失败 \$option8","k_15bxnkw":"网络连接丢失","k_0glj9us":"发起会话","k_1631kyh":"创建工作群","k_1644yii":"创建社交群","k_1fxfx04":"创建会议群","k_1cnkqc9":"创建直播群","k_002r09z":"频道","k_003nvk2":"消息","k_1jwxwgt":"连接中...","k_03gm52d":"通讯录","k_003k7dc":"我的","k_14yh35u":"登录·即时通信","k_0st7i3e":"体验群组聊天，音视频对话等IM功能","k_0cr1atw":"中国大陆","k_0mnxjg7":"欢迎使用腾讯云即时通信 IM，为保护您的个人信息安全，我们更新了《隐私政策》，主要完善了收集用户信息的具体内容和目的、增加了第三方SDK使用等方面的内容。","k_1545beg":"请您点击","k_0opnzp6":"《用户协议》","k_1jg6d5x":"《隐私政策摘要》","k_0selni4":"《隐私政策》","k_10s6v2i":"《信息收集清单》","k_00041m1":"和","k_0pasxq8":"《信息共享清单》","k_11x8pvm":"并仔细阅读，如您同意以上内容，请点击“同意并继续”，开始使用我们的产品与服务！","k_17nw8gq":"同意并继续","k_1nynslj":"不同意并退出","k_0jsvmjm":"请输入手机号","k_1lg8qh2":"手机号格式错误","k_03jia4z":"无网络连接","k_007jqt2":"验证码发送成功","k_1a55aib":"验证码异常","k_0t5a9hl":"登录失败\$option1","k_16r3sej":"国家/地区","k_15hlgzr":"选择你的国家区号","k_1bnmt3h":"请使用英文搜索","k_03fei8z":"手机号","k_03aj66h":"验证码","k_1m9jtmw":"请输入验证码","k_0y1wbxk":"获取验证码","k_003r6vf":"登录","k_161ecly":"当前无网络","k_11uz2i8":"重试网络","k_0epvs61":"更换皮肤","k_0k7qoht":"同意任何用户加好友","k_0gyhkp5":"需要验证","k_121ruco":"拒绝任何人加好友","k_003kfai":"未知","k_1kvyskd":"无网络连接，无法修改","k_1j91bvz":"TUIKIT 为你选择一个头像?","k_1wmkneq":"加我为好友时需要验证","k_16kts8h":"退出登录","k_09khmso":"相关聊天记录","k_118prbn":"全局搜索","k_03f2zbs":"分享到","k_129scag":"好友删除成功","k_094phq4":"好友添加失败","k_13spdki":"发送消息","k_1666isy":"清除好友","k_0r8fi93":"好友添加成功","k_02qw14e":"好友申请已发出","k_0n3md5x":"当前用户在黑名单","k_14c600t":"修改备注","k_1f811a4":"支持数字、英文、下划线","k_11z7ml4":"详细资料","k_0003y9x":"无","k_1679vrd":"加为好友","k_1t2zg6h":"图片验证码校验失败","k_03ibg5h":"星期一","k_03i7hu1":"星期二","k_03iaiks":"星期三","k_03el9pa":"星期四","k_03i7ok1":"星期五","k_03efxyg":"星期六","k_03ibfd2":"星期七","k_0cfkcaz":"消息推送","k_1rmkb2w":"推送新聊天消息","k_1lg375c":"新消息提醒","k_0k3uv02":"服务器错误：\$option8","k_1g9o3kz":"请求错误：\$option8","k_003nfx9":"深沉","k_003rvjp":"轻快","k_003rtht":"明媚","k_003qxiw":"梦幻","k_1vhzltr":"腾讯云即时通信IM"}''';
}
文件：/im-flutter-uikit/lib/i18n/strings.g.dart

/*
 * Generated file. Do not edit.
 *
 * Locales: 3
 * Strings: 612 (204.0 per locale)
 *
 * Built on 2022-06-14 at 11:41 UTC
 */

import 'package:flutter/widgets.dart';

const AppLocale _baseLocale = AppLocale.en;
AppLocale _currLocale = _baseLocale;

/// Supported locales, see extension methods below.
///
/// Usage:
/// - LocaleSettings.setLocale(AppLocale.en) // set locale
/// - Locale locale = AppLocale.en.flutterLocale // get flutter locale from enum
/// - if (LocaleSettings.currentLocale == AppLocale.en) // locale check
enum AppLocale {
	en, // 'en' (base locale, fallback)
	zhHans, // 'zh-Hans'
	zhHant, // 'zh-Hant'
}

/// Method A: Simple
///
/// No rebuild after locale change.
/// Translation happens during initialization of the widget (call of t).
///
/// Usage:
/// String a = t.someKey.anotherKey;
/// String b = t['someKey.anotherKey']; // Only for edge cases!
_StringsEn _t = _currLocale.translations;
_StringsEn get t => _t;

/// Method B: Advanced
///
/// All widgets using this method will trigger a rebuild when locale changes.
/// Use this if you have e.g. a settings page where the user can select the locale during runtime.
///
/// Step 1:
/// wrap your App with
/// TranslationProvider(
/// 	child: MyApp()
/// );
///
/// Step 2:
/// final t = Translations.of(context); // Get t variable.
/// String a = t.someKey.anotherKey; // Use t variable.
/// String b = t['someKey.anotherKey']; // Only for edge cases!
class Translations {
	Translations._(); // no constructor

	static _StringsEn of(BuildContext context) {
		final inheritedWidget = context.dependOnInheritedWidgetOfExactType<_InheritedLocaleData>();
		if (inheritedWidget == null) {
			throw 'Please wrap your app with "TranslationProvider".';
		}
		return inheritedWidget.translations;
	}
}

class LocaleSettings {
	LocaleSettings._(); // no constructor

	/// Uses locale of the device, fallbacks to base locale.
	/// Returns the locale which has been set.
	static AppLocale useDeviceLocale() {
		final locale = AppLocaleUtils.findDeviceLocale();
		return setLocale(locale);
	}

	/// Sets locale
	/// Returns the locale which has been set.
	static AppLocale setLocale(AppLocale locale) {
		_currLocale = locale;
		_t = _currLocale.translations;

		if (WidgetsBinding.instance != null) {
			// force rebuild if TranslationProvider is used
			_translationProviderKey.currentState?.setLocale(_currLocale);
		}

		return _currLocale;
	}

	/// Sets locale using string tag (e.g. en_US, de-DE, fr)
	/// Fallbacks to base locale.
	/// Returns the locale which has been set.
	static AppLocale setLocaleRaw(String rawLocale) {
		final locale = AppLocaleUtils.parse(rawLocale);
		return setLocale(locale);
	}

	/// Gets current locale.
	static AppLocale get currentLocale {
		return _currLocale;
	}

	/// Gets base locale.
	static AppLocale get baseLocale {
		return _baseLocale;
	}

	/// Gets supported locales in string format.
	static List<String> get supportedLocalesRaw {
		return AppLocale.values
			.map((locale) => locale.languageTag)
			.toList();
	}

	/// Gets supported locales (as Locale objects) with base locale sorted first.
	static List<Locale> get supportedLocales {
		return AppLocale.values
			.map((locale) => locale.flutterLocale)
			.toList();
	}
}

/// Provides utility functions without any side effects.
class AppLocaleUtils {
	AppLocaleUtils._(); // no constructor

	/// Returns the locale of the device as the enum type.
	/// Fallbacks to base locale.
	static AppLocale findDeviceLocale() {
		final String? deviceLocale = WidgetsBinding.instance?.window.locale.toLanguageTag();
		if (deviceLocale != null) {
			final typedLocale = _selectLocale(deviceLocale);
			if (typedLocale != null) {
				return typedLocale;
			}
		}
		return _baseLocale;
	}

	/// Returns the enum type of the raw locale.
	/// Fallbacks to base locale.
	static AppLocale parse(String rawLocale) {
		return _selectLocale(rawLocale) ?? _baseLocale;
	}
}

// context enums

// interfaces generated as mixins

// translation instances

late _StringsEn _translationsEn = _StringsEn.build();
late _StringsZhHans _translationsZhHans = _StringsZhHans.build();
late _StringsZhHant _translationsZhHant = _StringsZhHant.build();

// extensions for AppLocale

extension AppLocaleExtensions on AppLocale {

	/// Gets the translation instance managed by this library.
	/// [TranslationProvider] is using this instance.
	/// The plural resolvers are set via [LocaleSettings].
	_StringsEn get translations {
		switch (this) {
			case AppLocale.en: return _translationsEn;
			case AppLocale.zhHans: return _translationsZhHans;
			case AppLocale.zhHant: return _translationsZhHant;
		}
	}

	/// Gets a new translation instance.
	/// [LocaleSettings] has no effect here.
	/// Suitable for dependency injection and unit tests.
	///
	/// Usage:
	/// final t = AppLocale.en.build(); // build
	/// String a = t.my.path; // access
	_StringsEn build() {
		switch (this) {
			case AppLocale.en: return _StringsEn.build();
			case AppLocale.zhHans: return _StringsZhHans.build();
			case AppLocale.zhHant: return _StringsZhHant.build();
		}
	}

	String get languageTag {
		switch (this) {
			case AppLocale.en: return 'en';
			case AppLocale.zhHans: return 'zh-Hans';
			case AppLocale.zhHant: return 'zh-Hant';
		}
	}

	Locale get flutterLocale {
		switch (this) {
			case AppLocale.en: return const Locale.fromSubtags(languageCode: 'en');
			case AppLocale.zhHans: return const Locale.fromSubtags(languageCode: 'zh', scriptCode: 'Hans', );
			case AppLocale.zhHant: return const Locale.fromSubtags(languageCode: 'zh', scriptCode: 'Hant', );
		}
	}
}

extension StringAppLocaleExtensions on String {
	AppLocale? toAppLocale() {
		switch (this) {
			case 'en': return AppLocale.en;
			case 'zh-Hans': return AppLocale.zhHans;
			case 'zh-Hant': return AppLocale.zhHant;
			default: return null;
		}
	}
}

// wrappers

GlobalKey<_TranslationProviderState> _translationProviderKey = GlobalKey<_TranslationProviderState>();

class TranslationProvider extends StatefulWidget {
	TranslationProvider({required this.child}) : super(key: _translationProviderKey);

	final Widget child;

	@override
	_TranslationProviderState createState() => _TranslationProviderState();

	static _InheritedLocaleData of(BuildContext context) {
		final inheritedWidget = context.dependOnInheritedWidgetOfExactType<_InheritedLocaleData>();
		if (inheritedWidget == null) {
			throw 'Please wrap your app with "TranslationProvider".';
		}
		return inheritedWidget;
	}
}

class _TranslationProviderState extends State<TranslationProvider> {
	AppLocale locale = _currLocale;

	void setLocale(AppLocale newLocale) {
		setState(() {
			locale = newLocale;
		});
	}

	@override
	Widget build(BuildContext context) {
		return _InheritedLocaleData(
			locale: locale,
			child: widget.child,
		);
	}
}

class _InheritedLocaleData extends InheritedWidget {
	final AppLocale locale;
	Locale get flutterLocale => locale.flutterLocale; // shortcut
	final _StringsEn translations; // store translations to avoid switch call

	_InheritedLocaleData({required this.locale, required Widget child})
		: translations = locale.translations, super(child: child);

	@override
	bool updateShouldNotify(_InheritedLocaleData oldWidget) {
		return oldWidget.locale != locale;
	}
}

// pluralization feature not used

// helpers

final _localeRegex = RegExp(r'^([a-z]{2,8})?([_-]([A-Za-z]{4}))?([_-]?([A-Z]{2}|[0-9]{3}))?$');
AppLocale? _selectLocale(String localeRaw) {
	final match = _localeRegex.firstMatch(localeRaw);
	AppLocale? selected;
	if (match != null) {
		final language = match.group(1);
		final country = match.group(5);

		// match exactly
		selected = AppLocale.values
			.cast<AppLocale?>()
			.firstWhere((supported) => supported?.languageTag == localeRaw.replaceAll('_', '-'), orElse: () => null);

		if (selected == null && language != null) {
			// match language
			selected = AppLocale.values
				.cast<AppLocale?>()
				.firstWhere((supported) => supported?.languageTag.startsWith(language) == true, orElse: () => null);
		}

		if (selected == null && country != null) {
			// match country
			selected = AppLocale.values
				.cast<AppLocale?>()
				.firstWhere((supported) => supported?.languageTag.contains(country) == true, orElse: () => null);
		}
	}
	return selected;
}

// translations

// Path: <root>
class _StringsEn {

	/// You can call this constructor and build your own translation instance of this locale.
	/// Constructing via the enum [AppLocale.build] is preferred.
	_StringsEn.build();

	/// Access flat map
	dynamic operator[](String key) => _flatMap[key];

	// Internal flat map initialized lazily
	late final Map<String, dynamic> _flatMap = _buildFlatMap();

	// ignore: unused_field
	late final _StringsEn _root = this;

	// Translations
	String get k_03f15qk => 'Blocklist';
	String get k_0uc5cnb => 'Beta test in progress. Channel creation is not supported now.';
	String get k_003nevv => 'Cancel';
	String get k_003rzap => 'OK';
	String get k_0s5ey0o => 'TRTC';
	String get k_03gpl3d => 'Hello';
	String get k_0352fjr => 'Failed to enter the channel due to network disconnection';
	String get k_0d7n018 => 'End topic';
	String get k_0d826hk => 'Pin topic to top';
	String get k_15wcgna => 'Ended successfully';
	String get k_15wo7xu => 'Pinned to top successfully';
	String get k_002s934 => 'Topic';
	String get k_18g3zdo => 'Tencent Cloud · IM';
	String get k_1m8vyp0 => 'New contacts';
	String get k_0elz70e => 'Group chats';
	String get k_18tb4mo => 'No contact';
	String get k_18nuh87 => 'Contact us';
	String get k_1uf134v => 'To provide feedback or suggestions, join our QQ group at 788910197.';
	String get k_0xlhhrn => 'Online time: 10 AM to 8 PM, Mon through Fri';
	String get k_17fmlyf => 'Clear chat';
	String get k_0dhesoz => 'Unpin from top';
	String get k_002sk7x => 'Pin to top';
	String get k_0gmpgcg => 'No conversation';
	String get k_002tu9r => 'Performance';
	String get k_1tmcw5c => 'Complete your topic title';
	String get k_1cnmslk => 'A tag must be selected';
	String get k_0z3ytji => 'Topic created successfully';
	String get k_1a8vem3 => 'Creator exception';
	String get k_0eskkr1 => 'Select a discussion forum';
	String get k_0d7plb5 => 'Create topic';
	String get k_144t0ho => '---- Related discussions ----';
	String get k_0pnz619 => 'Enter the topic title';
	String get k_136v279 => '+ Tag (add at least one tag)';
	String get k_04hjhvp => 'Discussion forum parameter exception';
	String get k_002r79h => 'All';
	String get k_03ejkb6 => 'Joined';
	String get k_172tngw => 'Topic (disconnected)';
	String get k_0rnmfc4 => 'No topic in the discussion forum';
	String get k_1pq0ybn => 'You haven\'t joined any topic yet';
	String get k_0bh95w0 => 'Failed to join the topic due to network disconnection';
	String get k_002twmj => 'Group chat';
	String get k_09kalj0 => 'Clear chat history';
	String get k_18qjstb => 'Transfer group owner';
	String get k_14j5iul => 'Delete and exit';
	String get k_0jtutmw => 'You will not be able to receive messages from this group chat after you exit';
	String get k_08k00l9 => 'Loading…';
	String get k_197r4f7 => 'IM service connected successfully';
	String get k_1s5xnir => 'Failed to initialize the IM SDK';
	String get k_15bxnkw => 'Network connection lost';
	String get k_002r09z => 'Channels';
	String get k_003nvk2 => 'Chats';
	String get k_1jwxwgt => 'Connecting…';
	String get k_03gm52d => 'Contacts';
	String get k_003k7dc => 'Me';
	String get k_14yh35u => 'Log in to IM';
	String get k_0st7i3e => 'Try IM features such as group chat and voice/video call';
	String get k_0cr1atw => 'Chinese mainland';
	String get k_0jsvmjm => 'Enter your mobile number';
	String get k_1lg8qh2 => 'Incorrect mobile number format';
	String get k_03jia4z => 'No network connection';
	String get k_007jqt2 => 'Verification code sent successfully';
	String get k_1t2zg6h => 'Image verification failed';
	String get k_1a55aib => 'Verification code exception';
	String get k_16r3sej => 'Country/Region';
	String get k_15hlgzr => 'Select your country code';
	String get k_1bnmt3h => 'Please search in English';
	String get k_003kv3v => 'Search';
	String get k_03fei8z => 'Mobile number';
	String get k_03aj66h => 'Verification code';
	String get k_1m9jtmw => 'Enter the verification code';
	String get k_0y1wbxk => 'Send';
	String get k_0orhtx0 => ' Privacy Agreement ';
	String get k_00041m1 => 'and';
	String get k_0opnzp6 => ' User Agreement ';
	String get k_161ecly => 'Network unavailable';
	String get k_11uz2i8 => 'Reconnect network';
	String get k_1vhzltr => 'Tencent Cloud IM';
	String get k_0j433ys => 'Tencent Cloud TRTC';
	String get k_12u8g8l => 'Disclaimer';
	String get k_1p0j8i3 => 'Instant Messaging (IM) is a test product provided by Tencent Cloud. It is for trying out features, but not for commercial use. To follow regulatory requirements of the authority, voice and video-based interactions performed via IM will be recorded and archived throughout the whole process. It is strictly prohibited to disseminate via IM any pornographic, abusive, violent, political and other noncompliant content.';
	String get k_0k7qoht => 'Accept all friend requests';
	String get k_0gyhkp5 => 'Require approval for friend requests';
	String get k_121ruco => 'Reject all friend requests';
	String get k_003kfai => 'Unknown';
	String get k_1kvyskd => 'Modification failed due to network disconnection';
	String get k_1wmkneq => 'Require approval';
	String get k_1eitsd0 => 'About Tencent Cloud IM';
	String get k_1919d6m => 'Privacy Policy';
	String get k_16kts8h => 'Log out';
	String get k_129scag => 'Friend deleted successfully';
	String get k_094phq4 => 'Failed to add the friend';
	String get k_13spdki => 'Send message';
	String get k_0h22snw => 'Voice call';
	String get k_0h20hg5 => 'Video call';
	String get k_1666isy => 'Delete friend';
	String get k_0r8fi93 => 'Friend added successfully';
	String get k_02qw14e => 'Friend request sent';
	String get k_0n3md5x => 'The current user is on the blocklist';
	String get k_14c600t => 'Modify remarks';
	String get k_1f811a4 => 'Allows only digits, letters and underscores';
	String get k_11z7ml4 => 'Profile';
	String get k_0003y9x => 'None';
	String get k_1679vrd => 'Add as friend';
	String get k_03ibg5h => 'Mon';
	String get k_03i7hu1 => 'Tue';
	String get k_03iaiks => 'Wed';
	String get k_03el9pa => 'Thu';
	String get k_03i7ok1 => 'Fri';
	String get k_03efxyg => 'Sat';
	String get k_03ibfd2 => 'Sun';
	String get k_003ltgm => 'Location';
	String get k_04dqh36 => 'No new contact';
	String get k_0mnxjg7 => 'Welcome to Tencent Cloud Instant Messaging (IM). To protect the security of your personal information, we have updated the Privacy Policy, mainly improving the specific content and purpose for user information collection and adding the use of third-party SDKs.';
	String get k_1545beg => 'Please tap ';
	String get k_11x8pvm => 'and read them carefully. If you agree to the content, tap "Accept and continue" to start using our product and service.';
	String get k_17nw8gq => 'Accept and continue';
	String get k_1nynslj => 'Reject and quit';
	String get k_1j91bvz => 'Let TUIKit pick a profile photo for you?';
	String get k_0wqhgor => 'Personal information collection list';
	String get k_12rfxml => 'Third-party information sharing list';
	String get k_131g7q4 => 'Deregister account';
	String get k_03fel2u => 'Version';
	String get k_1ajt0b1 => 'Failed to get the current location';
	String get k_0lhm9xq => 'Search initiated successfully';
	String get k_0fdeled => 'Failed to initiate the search';
	String get k_1yh0a50 => 'mapDidLoad - The map has been loaded';
	String get k_16758qw => 'Add friend';
	String get k_0elt0kw => 'Add group chat';
	String get k_0s3p3ji => 'No blocklist';
	String k_02slfpm({required Object errorMessage}) => 'Error: $errorMessage';
	String get k_1m8zuj4 => 'Select contact';
	String k_0vwtop2({required Object getMsg}) => 'Message obtained: $getMsg';
	String k_0upijvs({required Object message}) => 'Failed to get the discussion forum list: $message';
	String k_0v5hlay({required Object message}) => 'Failed to create the topic: $message';
	String get k_0em28sp => 'No group chat';
	String k_0owk5ss({required Object failedReason}) => 'Login failed: $failedReason';
	String get k_0glj9us => 'Initiate conversation';
	String get k_1631kyh => 'Create work group';
	String get k_1644yii => 'Create public group';
	String get k_1fxfx04 => 'Create meeting group';
	String get k_1cnkqc9 => 'Create voice-video group';
	String k_1mw45lz({required Object errorReason}) => 'Login failed: $errorReason';
	String get k_0epvs61 => 'Change skin';
	String get k_002ri2g => 'Log in';
	String k_1o7lf2y({required Object errorMessage}) => 'Server error: $errorMessage';
	String k_118l7sq({required Object requestErrorMessage}) => 'Request error: $requestErrorMessage';
	String get k_003nfx9 => 'Deep';
	String get k_003rvjp => 'Light';
	String get k_003rtht => 'Bright';
	String get k_003qxiw => 'Fantasy';
	String k_0s5zoi3({required Object option1}) => 'Error: $option1';
	String k_0i8egqa({required Object option8}) => 'Message obtained: $option8';
	String k_0pokyns({required Object option8}) => 'Failed to get the discussion forum list: $option8';
	String k_1y03m8a({required Object option8}) => 'Failed to create the topic: $option8';
	String k_1v6uh9c({required Object option8}) => 'Login failed: $option8';
	String k_0t5a9hl({required Object option1}) => 'Login failed: $option1';
	String k_0k3uv02({required Object option8}) => 'Server error: $option8';
	String k_1g9o3kz({required Object option8}) => 'Request error: $option8';
	String get k_10s6v2i => ' Information Collection Statement ';
	String get k_0pasxq8 => ' Information Sharing Statement ';
	String get k_14cahuz => 'About Tencent Cloud · IM';
	String get k_0llnalm => 'SDK Version';
	String get k_13dyfii => 'APP Version';
	String get k_12h52zh => 'Privacy Policy';
	String get k_0fxhhwb => 'User Agreement';
	String get k_18z2e6q => 'APP Tencent Cloud · IM(\'this product\') is a test product provided by Tencent Cloud and Tencent Cloud enjoys the copyright and ownership of this product. This product is only used for functional experience and must not be used for any commercial purposes.In order to comply with the regulatory requirements of relevant departments the voice and video interactions of this product are archived throughout the entire voice and video interactions. Any pornography,abusive,violent and politically related content is strictly prohibited during use.';
	String get k_0zu7dd7 => 'Personal Information Collected';
	String get k_0mcqhgh => 'Information Shared with Third Parties';
	String get k_12eqaty => 'Confirm to deregister account';
	String get k_0ziqsr6 => 'Account deregistered successfully';
	String get k_002qtgt => 'Deregister Account';
	String k_0rvdu91({required Object option1}) => 'After deregister this account, you will be unable to use it, and the related data will be permanently deleted. Current account: $option1';
	String get k_15d22qk => 'Deregister Account';
	String get k_036uv3f => 'Tencent Cloud · IM';
	String get k_167916k => 'WeChat contacts';
	String get k_03euwr1 => 'Moments';
	String get k_0cxccci => 'invites you to a video call';
	String get k_06lhh4b => 'invites you to a voice call';
	String get k_1ywo9ut => 'Tencent Cloud · IM is developed based on QQ messaging module. Chat, conversation, group, data management and LVB on-screen comments can be easily implemented by Chat SDK. Also, connecting with other products such as whiteboards through signaling messages is supported. We can fully covering your business scenarios. Our Chat SDK can support major platforms and Mini Program, to meet communication needs.';
	String get k_0ios26v => 'WeChat is not detected';
	String get k_002rflt => 'Delete';
	String get k_125ru1w => 'Disband Group';
	String get k_0jtzmqa => 'You will not receiving messages from this group after disbanding';
	String get k_1jg6d5x => ' Summary of Privacy Policy ';
	String get k_0selni4 => ' Privacy Policy ';
	String get k_003r6vf => 'Log in';
	String get k_09khmso => 'Related messages';
	String get k_118prbn => 'Search globally';
	String get k_03f2zbs => 'Share to ';
	String get k_0cfkcaz => 'Chat Message';
	String get k_1rmkb2w => 'New Chat Message';
	String get k_1lg375c => 'New Chat Message Remind';
	String k_1t0akzp({required Object option1}) => 'After deregister this account, you will be unable to use it, and the related data will be permanently deleted. Current account: $option1';
	String get k_1699p6d => 'Tencent Building';
	String get k_1ngd60h => 'No. 10000 Shennan avenue, Shenzhen';
	String get k_1na29vg => 'Location messages is not supported in DEMO temporarily';
	String get k_1xmms9t => 'Request to Join Group';
	String get k_0dla4vp => 'To provide feedback or suggestions,\n please join our QQ group at';
	String get k_1odrjd1 => 'Online time: 10 AM to 8 PM, Mon through Fri';
	String get k_1bh903m => 'Copied successfully';
	String get k_16264lp => 'Copy group number';
	String get k_18ger86 => 'Tencent Cloud IM';
	String get k_1vd70l1 => 'Chat SDK serving hundreds of millions of QQ users';
	String get k_036phup => 'Tencent Cloud IM';
}

// Path: <root>
class _StringsZhHans implements _StringsEn {

	/// You can call this constructor and build your own translation instance of this locale.
	/// Constructing via the enum [AppLocale.build] is preferred.
	_StringsZhHans.build();

	/// Access flat map
	@override dynamic operator[](String key) => _flatMap[key];

	// Internal flat map initialized lazily
	@override
  late final Map<String, dynamic> _flatMap = _buildFlatMap();

	// ignore: unused_field
	@override late final _StringsZhHans _root = this;

	// Translations
	@override String get k_16758qw => '添加好友';
	@override String get k_0elt0kw => '添加群聊';
	@override String get k_03f15qk => '黑名单';
	@override String get k_0s3p3ji => '暂无黑名单';
	@override String get k_0uc5cnb => '我们还在内测中，暂不支持创建频道。';
	@override String get k_003rzap => '确定';
	@override String get k_003nevv => '取消';
	@override String get k_0s5ey0o => '实时音视频 TRTC';
	@override String get k_03gpl3d => '大家好';
	@override String get k_0352fjr => '无网络连接，进入频道失败';
	@override String get k_0d7n018 => '结束话题';
	@override String get k_0d826hk => '置顶话题';
	@override String get k_15wcgna => '结束成功';
	@override String get k_15wo7xu => '置顶成功';
	@override String k_02slfpm({required Object errorMessage}) => '发生错误 $errorMessage';
	@override String get k_003ltgm => '位置';
	@override String get k_0h22snw => '语音通话';
	@override String get k_0h20hg5 => '视频通话';
	@override String get k_002s934 => '话题';
	@override String get k_18g3zdo => '云通信·IM';
	@override String get k_1m8vyp0 => '新的联系人';
	@override String get k_0elz70e => '我的群聊';
	@override String get k_18tb4mo => '无联系人';
	@override String get k_18nuh87 => '联系我们';
	@override String get k_1uf134v => '反馈及建议可以加入QQ群：788910197';
	@override String get k_0xlhhrn => '在线时间，周一到周五，早上10点 - 晚上8点';
	@override String get k_17fmlyf => '清除聊天';
	@override String get k_0dhesoz => '取消置顶';
	@override String get k_002sk7x => '置顶';
	@override String get k_003kv3v => '搜索';
	@override String get k_0gmpgcg => '暂无会话';
	@override String get k_1m8zuj4 => '选择联系人';
	@override String get k_002tu9r => '性能';
	@override String k_0vwtop2({required Object getMsg}) => '获取到的消息:$getMsg';
	@override String k_0upijvs({required Object message}) => '获取讨论区列表失败 $message';
	@override String get k_1tmcw5c => '请完善话题标题';
	@override String get k_1cnmslk => '必须选择一个标签';
	@override String k_0v5hlay({required Object message}) => '创建话题失败 $message';
	@override String get k_0z3ytji => '创建话题成功';
	@override String get k_1a8vem3 => '创建者异常';
	@override String get k_0eskkr1 => '选择讨论区';
	@override String get k_0d7plb5 => '创建话题';
	@override String get k_144t0ho => '---- 相关讨论 ----';
	@override String get k_0pnz619 => '填写话题标题';
	@override String get k_136v279 => '+标签（至少添加一个）';
	@override String get k_04hjhvp => '讨论区参数异常';
	@override String get k_002r79h => '全部';
	@override String get k_03ejkb6 => '已加入';
	@override String get k_172tngw => '话题（未连接）';
	@override String get k_0rnmfc4 => '该讨论区下暂无话题';
	@override String get k_1pq0ybn => '暂未加入任何话题';
	@override String get k_0bh95w0 => '无网络连接，进入话题失败';
	@override String get k_002twmj => '群聊';
	@override String get k_0em28sp => '暂无群聊';
	@override String get k_09kalj0 => '清空聊天记录';
	@override String get k_18qjstb => '转让群主';
	@override String get k_14j5iul => '删除并退出';
	@override String get k_0jtutmw => '退出后不会接收到此群聊消息';
	@override String get k_04dqh36 => '暂无新联系人';
	@override String get k_08k00l9 => '正在加载...';
	@override String get k_197r4f7 => '即时通信服务连接成功';
	@override String get k_1s5xnir => '即时通信 SDK初始化失败';
	@override String k_0owk5ss({required Object failedReason}) => '登录失败 $failedReason';
	@override String get k_15bxnkw => '网络连接丢失';
	@override String get k_0glj9us => '发起会话';
	@override String get k_1631kyh => '创建工作群';
	@override String get k_1644yii => '创建社交群';
	@override String get k_1fxfx04 => '创建会议群';
	@override String get k_1cnkqc9 => '创建直播群';
	@override String get k_002r09z => '频道';
	@override String get k_003nvk2 => '消息';
	@override String get k_1jwxwgt => '连接中...';
	@override String get k_03gm52d => '通讯录';
	@override String get k_003k7dc => '我的';
	@override String get k_14yh35u => '登录·即时通信';
	@override String get k_0st7i3e => '体验群组聊天，音视频对话等IM功能';
	@override String get k_0cr1atw => '中国大陆';
	@override String get k_0mnxjg7 => '欢迎使用腾讯云即时通信 IM，为保护您的个人信息安全，我们更新了《隐私政策》，主要完善了收集用户信息的具体内容和目的、增加了第三方SDK使用等方面的内容。';
	@override String get k_1545beg => '请您点击';
	@override String get k_0opnzp6 => '《用户协议》';
	@override String get k_00041m1 => '和';
	@override String get k_0orhtx0 => '《隐私协议》';
	@override String get k_11x8pvm => '并仔细阅读，如您同意以上内容，请点击“同意并继续”，开始使用我们的产品与服务！';
	@override String get k_17nw8gq => '同意并继续';
	@override String get k_1nynslj => '不同意并退出';
	@override String get k_0jsvmjm => '请输入手机号';
	@override String get k_1lg8qh2 => '手机号格式错误';
	@override String get k_03jia4z => '无网络连接';
	@override String get k_007jqt2 => '验证码发送成功';
	@override String get k_1a55aib => '验证码异常';
	@override String k_1mw45lz({required Object errorReason}) => '登录失败$errorReason';
	@override String get k_16r3sej => '国家/地区';
	@override String get k_15hlgzr => '选择你的国家区号';
	@override String get k_1bnmt3h => '请使用英文搜索';
	@override String get k_03fei8z => '手机号';
	@override String get k_03aj66h => '验证码';
	@override String get k_1m9jtmw => '请输入验证码';
	@override String get k_0y1wbxk => '获取验证码';
	@override String get k_002ri2g => '登陆';
	@override String get k_161ecly => '当前无网络';
	@override String get k_11uz2i8 => '重试网络';
	@override String get k_1vhzltr => '腾讯云即时通信IM';
	@override String get k_0j433ys => '腾讯云TRTC';
	@override String get k_0epvs61 => '更换皮肤';
	@override String get k_12u8g8l => '免责声明';
	@override String get k_1p0j8i3 => 'IM即时通信（“本产品”）是由腾讯云提供的一款测试产品，腾讯云享有本产品的著作权和所有权。本产品仅用于功能体验，不得用于任何商业用途。为配合相关部门监管要求，本产品音视频互动全程均有录音录像存档，严禁在使用中有任何色情、辱骂、暴恐、涉政等违法内容传播。';
	@override String get k_0k7qoht => '同意任何用户加好友';
	@override String get k_0gyhkp5 => '需要验证';
	@override String get k_121ruco => '拒绝任何人加好友';
	@override String get k_003kfai => '未知';
	@override String get k_1kvyskd => '无网络连接，无法修改';
	@override String get k_1j91bvz => 'TUIKIT 为你选择一个头像?';
	@override String get k_1wmkneq => '加我为好友时需要验证';
	@override String get k_1eitsd0 => '关于腾讯云·通信';
	@override String get k_1919d6m => '隐私条例';
	@override String get k_0wqhgor => '个人信息收集清单';
	@override String get k_12rfxml => '第三方信息共享清单';
	@override String get k_131g7q4 => '注销账户';
	@override String get k_03fel2u => '版本号';
	@override String get k_16kts8h => '退出登录';
	@override String get k_129scag => '好友删除成功';
	@override String get k_094phq4 => '好友添加失败';
	@override String get k_13spdki => '发送消息';
	@override String get k_1666isy => '清除好友';
	@override String get k_0r8fi93 => '好友添加成功';
	@override String get k_02qw14e => '好友申请已发出';
	@override String get k_0n3md5x => '当前用户在黑名单';
	@override String get k_14c600t => '修改备注';
	@override String get k_1f811a4 => '支持数字、英文、下划线';
	@override String get k_11z7ml4 => '详细资料';
	@override String get k_0003y9x => '无';
	@override String get k_1679vrd => '加为好友';
	@override String get k_1ajt0b1 => '获取当前位置失败';
	@override String get k_0lhm9xq => '发起检索成功';
	@override String get k_0fdeled => '发起检索失败';
	@override String get k_1yh0a50 => 'mapDidLoad-地图加载完成';
	@override String get k_1t2zg6h => '图片验证码校验失败';
	@override String get k_03ibg5h => '星期一';
	@override String get k_03i7hu1 => '星期二';
	@override String get k_03iaiks => '星期三';
	@override String get k_03el9pa => '星期四';
	@override String get k_03i7ok1 => '星期五';
	@override String get k_03efxyg => '星期六';
	@override String get k_03ibfd2 => '星期七';
	@override String k_1o7lf2y({required Object errorMessage}) => '服务器错误：$errorMessage';
	@override String k_118l7sq({required Object requestErrorMessage}) => '请求错误：$requestErrorMessage';
	@override String get k_003nfx9 => '深沉';
	@override String get k_003rvjp => '轻快';
	@override String get k_003rtht => '明媚';
	@override String get k_003qxiw => '梦幻';
	@override String k_0s5zoi3({required Object option1}) => '发生错误 $option1';
	@override String k_0i8egqa({required Object option8}) => '获取到的消息:$option8';
	@override String k_0pokyns({required Object option8}) => '获取讨论区列表失败 $option8';
	@override String k_1y03m8a({required Object option8}) => '创建话题失败 $option8';
	@override String k_1v6uh9c({required Object option8}) => '登录失败 $option8';
	@override String k_0t5a9hl({required Object option1}) => '登录失败$option1';
	@override String k_0k3uv02({required Object option8}) => '服务器错误：$option8';
	@override String k_1g9o3kz({required Object option8}) => '请求错误：$option8';
	@override String get k_14cahuz => '关于腾讯云 · IM';
	@override String get k_0llnalm => 'SDK版本号';
	@override String get k_13dyfii => '应用版本号';
	@override String get k_12h52zh => '隐私政策';
	@override String get k_0fxhhwb => '用户协议';
	@override String get k_18z2e6q => 'IM即时通信（“本产品”）是由腾讯云提供的一款测试产品，腾讯云享有本产品的著作权和所有权。本产品仅用于功能体验，不得用于任何商业用途。严禁在使用中有任何色情、辱骂、暴恐、涉政等违法内容传播。';
	@override String get k_0zu7dd7 => '信息收集清单';
	@override String get k_0mcqhgh => '信息共享清单';
	@override String get k_12eqaty => '确认注销账户';
	@override String get k_0ziqsr6 => '账户注销成功！';
	@override String get k_002qtgt => '注销';
	@override String k_0rvdu91({required Object option1}) => '注销后，您将无法使用当前账号，相关数据也将删除且无法找回。当前账号ID: $option1';
	@override String get k_15d22qk => '注销账号';
	@override String get k_036uv3f => '腾讯云IM';
	@override String get k_167916k => '微信好友';
	@override String get k_03euwr1 => '朋友圈';
	@override String get k_0cxccci => '邀请你视频通话';
	@override String get k_06lhh4b => '邀请你语音通话';
	@override String get k_1ywo9ut => '即时通信 IM (Instant Messaging)基于 QQ 底层 IM 能力开发，仅需植入 SDK 即可轻松集成聊天、会话、群组、资料管理和直播弹幕能力，也支持通过信令消息与白板等其他产品打通，全面覆盖您的业务场景，支持各大平台小程序接入使用，全面满足通信需要';
	@override String get k_0ios26v => '未检测到微信安装';
	@override String get k_002rflt => '删除';
	@override String get k_125ru1w => '解散该群';
	@override String get k_0jtzmqa => '解散后不会接收到此群聊消息';
	@override String get k_1jg6d5x => '《隐私政策摘要》';
	@override String get k_0selni4 => '《隐私政策》';
	@override String get k_10s6v2i => '《信息收集清单》';
	@override String get k_0pasxq8 => '《信息共享清单》';
	@override String get k_003r6vf => '登录';
	@override String get k_09khmso => '相关聊天记录';
	@override String get k_118prbn => '全局搜索';
	@override String get k_03f2zbs => '分享到';
	@override String get k_0cfkcaz => '消息推送';
	@override String get k_1rmkb2w => '推送新聊天消息';
	@override String get k_1lg375c => '新消息提醒';
	@override String k_1t0akzp({required Object option1}) => '注销后，您将无法使用当前账号，相关数据也将删除且无法找回。当前账号ID: $option1';
	@override String get k_1699p6d => '腾讯大厦';
	@override String get k_1ngd60h => '深圳市深南大道10000号';
	@override String get k_1na29vg => '位置消息维护中';
	@override String get k_1xmms9t => '进群申请列表';
	@override String get k_0dla4vp => '反馈及建议可以加入QQ群';
	@override String get k_1odrjd1 => '在线时间: 周一到周五，早上10点 - 晚上8点';
	@override String get k_1bh903m => 'QQ群号复制成功';
	@override String get k_16264lp => '复制群号';
	@override String get k_18ger86 => '腾讯云 · IM';
	@override String get k_1vd70l1 => '服务亿级 QQ 用户的即时通讯技术';
	@override String get k_036phup => '腾讯云IM';
}

// Path: <root>
class _StringsZhHant implements _StringsEn {

	/// You can call this constructor and build your own translation instance of this locale.
	/// Constructing via the enum [AppLocale.build] is preferred.
	_StringsZhHant.build();

	/// Access flat map
	@override dynamic operator[](String key) => _flatMap[key];

	// Internal flat map initialized lazily
	@override
  late final Map<String, dynamic> _flatMap = _buildFlatMap();

	// ignore: unused_field
	@override late final _StringsZhHant _root = this;

	// Translations
	@override String get k_16758qw => '添加好友';
	@override String get k_0elt0kw => '添加群組';
	@override String get k_03f15qk => '黑名單';
	@override String get k_0s3p3ji => '暫無黑名單';
	@override String get k_0uc5cnb => '我們還在內測中，暫不支持創建頻道。';
	@override String get k_003rzap => '確定';
	@override String get k_003nevv => '取消';
	@override String get k_0s5ey0o => '實時音視訊 TRTC';
	@override String get k_03gpl3d => '大家好';
	@override String get k_0352fjr => '無網絡連接，進入頻道失敗';
	@override String get k_0d7n018 => '結束話題';
	@override String get k_0d826hk => '置頂話題';
	@override String get k_15wcgna => '結束成功';
	@override String get k_15wo7xu => '置頂成功';
	@override String k_02slfpm({required Object errorMessage}) => '發生錯誤 $errorMessage';
	@override String get k_003ltgm => '位置';
	@override String get k_0h22snw => '語音通話';
	@override String get k_0h20hg5 => '視訊通話';
	@override String get k_002s934 => '話題';
	@override String get k_18g3zdo => '雲通信·IM';
	@override String get k_1m8vyp0 => '新的聯絡人';
	@override String get k_0elz70e => '我的群組';
	@override String get k_18tb4mo => '無聯絡人';
	@override String get k_18nuh87 => '聯絡我們';
	@override String get k_1uf134v => '反饋及建議可以加入QQ群：788910197';
	@override String get k_0xlhhrn => '在線時間，周一到周五，早上10點 - 晚上8點';
	@override String get k_17fmlyf => '清除聊天';
	@override String get k_0dhesoz => '取消置頂';
	@override String get k_002sk7x => '置頂';
	@override String get k_003kv3v => '搜尋';
	@override String get k_0gmpgcg => '暫無會話';
	@override String get k_1m8zuj4 => '選擇聯絡人';
	@override String get k_002tu9r => '性能';
	@override String k_0vwtop2({required Object getMsg}) => '獲取到的訊息:$getMsg';
	@override String k_0upijvs({required Object message}) => '獲取討論區列表失敗 $message';
	@override String get k_1tmcw5c => '請完善話題標題';
	@override String get k_1cnmslk => '必須選擇一個標簽';
	@override String k_0v5hlay({required Object message}) => '創建話題失敗 $message';
	@override String get k_0z3ytji => '創建話題成功';
	@override String get k_1a8vem3 => '創建者異常';
	@override String get k_0eskkr1 => '選擇討論區';
	@override String get k_0d7plb5 => '創建話題';
	@override String get k_144t0ho => '---- 相關討論 ----';
	@override String get k_0pnz619 => '填寫話題標題';
	@override String get k_136v279 => '+標簽（至少添加一個）';
	@override String get k_04hjhvp => '討論區參數異常';
	@override String get k_002r79h => '全部';
	@override String get k_03ejkb6 => '已加入';
	@override String get k_172tngw => '話題（未連接）';
	@override String get k_0rnmfc4 => '該討論區下暫無話題';
	@override String get k_1pq0ybn => '暫未加入任何話題';
	@override String get k_0bh95w0 => '無網絡連接，進入話題失敗';
	@override String get k_002twmj => '群組';
	@override String get k_0em28sp => '暫無群組';
	@override String get k_09kalj0 => '清空聊天記錄';
	@override String get k_18qjstb => '轉讓群主';
	@override String get k_14j5iul => '刪除並退出';
	@override String get k_0jtutmw => '退出後不會接收到此群組訊息';
	@override String get k_04dqh36 => '暫無新聯絡人';
	@override String get k_08k00l9 => '正在載入...';
	@override String get k_197r4f7 => '即時通信服務連接成功';
	@override String get k_1s5xnir => '即時通信 SDK初始化失敗';
	@override String k_0owk5ss({required Object failedReason}) => '登入失敗 $failedReason';
	@override String get k_15bxnkw => '網絡連接丟失';
	@override String get k_0glj9us => '發起會話';
	@override String get k_1631kyh => '創建工作群';
	@override String get k_1644yii => '創建社交群';
	@override String get k_1fxfx04 => '創建會議群';
	@override String get k_1cnkqc9 => '創建直播群';
	@override String get k_002r09z => '頻道';
	@override String get k_003nvk2 => '訊息';
	@override String get k_1jwxwgt => '連接中...';
	@override String get k_03gm52d => '通訊錄';
	@override String get k_003k7dc => '我的';
	@override String get k_14yh35u => '登入·即時通信';
	@override String get k_0st7i3e => '體驗群組聊天，音視訊對話等IM功能';
	@override String get k_0cr1atw => '中國大陸';
	@override String get k_0mnxjg7 => '歡迎使用騰訊雲即時通信 IM，為保護您的個人信息安全，我們更新了《私隱政策》，主要完善了收集用戶信息的具體內容和目的、增加了第三方SDK使用等方面的內容。';
	@override String get k_1545beg => '請您點擊';
	@override String get k_0opnzp6 => '《用戶協議》';
	@override String get k_00041m1 => '和';
	@override String get k_0orhtx0 => '《私隱協議》';
	@override String get k_11x8pvm => '並仔細閱讀，如您同意以上內容，請點擊「同意並繼續」，開始使用我們的產品與服務！';
	@override String get k_17nw8gq => '同意並繼續';
	@override String get k_1nynslj => '不同意並退出';
	@override String get k_0jsvmjm => '請輸入手機號碼';
	@override String get k_1lg8qh2 => '手機號碼格式錯誤';
	@override String get k_03jia4z => '無網絡連接';
	@override String get k_007jqt2 => '驗證碼發送成功';
	@override String get k_1a55aib => '驗證碼異常';
	@override String k_1mw45lz({required Object errorReason}) => '登入失敗$errorReason';
	@override String get k_16r3sej => '國家/地區';
	@override String get k_15hlgzr => '選擇你的國家區號';
	@override String get k_1bnmt3h => '請使用英文搜尋';
	@override String get k_03fei8z => '手機號碼';
	@override String get k_03aj66h => '驗證碼';
	@override String get k_1m9jtmw => '請輸入驗證碼';
	@override String get k_0y1wbxk => '獲取驗證碼';
	@override String get k_002ri2g => '登陸';
	@override String get k_161ecly => '當前無網絡';
	@override String get k_11uz2i8 => '重試網絡';
	@override String get k_1vhzltr => '騰訊雲即時通信IM';
	@override String get k_0j433ys => '騰訊雲TRTC';
	@override String get k_0epvs61 => '更換皮膚';
	@override String get k_12u8g8l => '免責聲明';
	@override String get k_1p0j8i3 => 'IM即時通信（「本產品」）是由騰訊雲提供的一款測試產品，騰訊雲享有本產品的著作權和所有權。本產品僅用於功能體驗，不得用於任何商業用途。為配合相關部門監管要求，本產品音視訊互動全程均有錄音錄像存檔，嚴禁在使用中有任何色情、辱罵、暴恐、涉政等違法內容傳播。';
	@override String get k_0k7qoht => '同意任何用戶加好友';
	@override String get k_0gyhkp5 => '需要驗證';
	@override String get k_121ruco => '拒絕任何人加好友';
	@override String get k_003kfai => '未知';
	@override String get k_1kvyskd => '無網絡連接，無法修改';
	@override String get k_1j91bvz => 'TUIKIT 為你選擇一個頭像?';
	@override String get k_1wmkneq => '加我為好友時需要驗證';
	@override String get k_1eitsd0 => '關於騰訊雲·通信';
	@override String get k_1919d6m => '私隱條例';
	@override String get k_0wqhgor => '個人資料收集清單';
	@override String get k_12rfxml => '第三方資料共用清單';
	@override String get k_131g7q4 => '註銷賬戶';
	@override String get k_03fel2u => '版本號';
	@override String get k_16kts8h => '登出';
	@override String get k_129scag => '好友刪除成功';
	@override String get k_094phq4 => '好友添加失敗';
	@override String get k_13spdki => '發送訊息';
	@override String get k_1666isy => '清除好友';
	@override String get k_0r8fi93 => '好友添加成功';
	@override String get k_02qw14e => '好友申請已發出';
	@override String get k_0n3md5x => '當前用戶在黑名單';
	@override String get k_14c600t => '修改備註';
	@override String get k_1f811a4 => '支持數字、英文、下劃線';
	@override String get k_11z7ml4 => '詳細資料';
	@override String get k_0003y9x => '無';
	@override String get k_1679vrd => '加為好友';
	@override String get k_1ajt0b1 => '獲取當前位置失敗';
	@override String get k_0lhm9xq => '發起檢索成功';
	@override String get k_0fdeled => '發起檢索失敗';
	@override String get k_1yh0a50 => 'mapDidLoad-地圖載入完成';
	@override String get k_1t2zg6h => '圖片驗證碼校驗失敗';
	@override String get k_03ibg5h => '星期一';
	@override String get k_03i7hu1 => '星期二';
	@override String get k_03iaiks => '星期三';
	@override String get k_03el9pa => '星期四';
	@override String get k_03i7ok1 => '星期五';
	@override String get k_03efxyg => '星期六';
	@override String get k_03ibfd2 => '星期七';
	@override String k_1o7lf2y({required Object errorMessage}) => '服務器錯誤：$errorMessage';
	@override String k_118l7sq({required Object requestErrorMessage}) => '請求錯誤：$requestErrorMessage';
	@override String get k_003nfx9 => '深沈';
	@override String get k_003rvjp => '輕快';
	@override String get k_003rtht => '明媚';
	@override String get k_003qxiw => '夢幻';
	@override String k_0s5zoi3({required Object option1}) => '發生錯誤 $option1';
	@override String k_0i8egqa({required Object option8}) => '獲取到的訊息:$option8';
	@override String k_0pokyns({required Object option8}) => '獲取討論區列表失敗 $option8';
	@override String k_1y03m8a({required Object option8}) => '創建話題失敗 $option8';
	@override String k_1v6uh9c({required Object option8}) => '登入失敗 $option8';
	@override String k_0t5a9hl({required Object option1}) => '登入失敗$option1';
	@override String k_0k3uv02({required Object option8}) => '服務器錯誤：$option8';
	@override String k_1g9o3kz({required Object option8}) => '請求錯誤：$option8';
	@override String get k_14cahuz => '關於騰訊雲 · IM';
	@override String get k_0llnalm => 'SDK版本號';
	@override String get k_13dyfii => '應用版本號';
	@override String get k_12h52zh => '私隱政策';
	@override String get k_0fxhhwb => '用戶協議';
	@override String get k_18z2e6q => 'IM即時通信（「本產品」）是由騰訊雲提供的一款測試產品，騰訊雲享有本產品的著作權和所有權。本產品僅用於功能體驗，不得用於任何商業用途。嚴禁在使用中有任何色情、辱罵、暴恐、涉政等違法內容傳播。';
	@override String get k_0zu7dd7 => '個人資料收集清單';
	@override String get k_0mcqhgh => '第三方資料共用清單';
	@override String get k_12eqaty => '確認註銷賬戶';
	@override String get k_0ziqsr6 => '賬戶註銷成功！';
	@override String get k_002qtgt => '註銷';
	@override String k_0rvdu91({required Object option1}) => '註銷後，您將無法使用當前賬號，相關數據也將刪除且無法找回。當前賬號ID: $option1';
	@override String get k_15d22qk => '註銷賬號';
	@override String get k_036uv3f => '雲通信IM';
	@override String get k_167916k => '微信好友';
	@override String get k_03euwr1 => '朋友圈';
	@override String get k_0cxccci => '邀請你視訊通話';
	@override String get k_06lhh4b => '邀請你語音通話';
	@override String get k_1ywo9ut => '即時通信 IM (Instant Messaging)基於 QQ 底層 IM 能力開發，僅需植入 SDK 即可輕松集成聊天、會話、群組、資料管理和直播彈幕能力，也支持通過信令訊息與白板等其他產品打通，全面覆蓋您的業務場景，支持各大平臺小程序接入使用，全面滿足通信需要';
	@override String get k_0ios26v => '未檢測到微信安裝';
	@override String get k_002rflt => '刪除';
	@override String get k_125ru1w => '解散該群';
	@override String get k_0jtzmqa => '解散後不會接收到此群組訊息';
	@override String get k_1jg6d5x => '《私隱政策摘要》';
	@override String get k_0selni4 => '《私隱政策》';
	@override String get k_10s6v2i => '《個人資料收集清單》';
	@override String get k_0pasxq8 => '《第三方資料共用清單》';
	@override String get k_003r6vf => '登入';
	@override String get k_09khmso => '相關聊天記錄';
	@override String get k_118prbn => '全局搜尋';
	@override String get k_03f2zbs => '分享到';
	@override String get k_0cfkcaz => '訊息推送';
	@override String get k_1rmkb2w => '推送新聊天訊息';
	@override String get k_1lg375c => '新訊息提醒';
	@override String k_1t0akzp({required Object option1}) => '註銷後，您將無法使用當前賬號，相關數據也將刪除且無法找回。當前賬號ID: $option1';
	@override String get k_1699p6d => '騰訊大廈';
	@override String get k_1ngd60h => '深圳市深南大道10000號';
	@override String get k_1na29vg => '位置訊息維護中';
	@override String get k_1xmms9t => '進群申請列表';
	@override String get k_0dla4vp => '反饋及建議可以加入QQ群組';
	@override String get k_1odrjd1 => '在線時間: 周一到周五，早上10點 - 晚上8點';
	@override String get k_1bh903m => '群組復製成功';
	@override String get k_16264lp => '復製群組號';
	@override String get k_18ger86 => '騰訊雲 · IM';
	@override String get k_1vd70l1 => '服務億級 QQ 用戶的即時通訊技術';
	@override String get k_036phup => '騰訊雲IM';
}

/// Flat map(s) containing all translations.
/// Only for edge cases! For simple maps, use the map function of this library.

extension on _StringsEn {
	Map<String, dynamic> _buildFlatMap() {
		return {
			'k_03f15qk': 'Blocklist',
			'k_0uc5cnb': 'Beta test in progress. Channel creation is not supported now.',
			'k_003nevv': 'Cancel',
			'k_003rzap': 'OK',
			'k_0s5ey0o': 'TRTC',
			'k_03gpl3d': 'Hello',
			'k_0352fjr': 'Failed to enter the channel due to network disconnection',
			'k_0d7n018': 'End topic',
			'k_0d826hk': 'Pin topic to top',
			'k_15wcgna': 'Ended successfully',
			'k_15wo7xu': 'Pinned to top successfully',
			'k_002s934': 'Topic',
			'k_18g3zdo': 'Tencent Cloud · IM',
			'k_1m8vyp0': 'New contacts',
			'k_0elz70e': 'Group chats',
			'k_18tb4mo': 'No contact',
			'k_18nuh87': 'Contact us',
			'k_1uf134v': 'To provide feedback or suggestions, join our QQ group at 788910197.',
			'k_0xlhhrn': 'Online time: 10 AM to 8 PM, Mon through Fri',
			'k_17fmlyf': 'Clear chat',
			'k_0dhesoz': 'Unpin from top',
			'k_002sk7x': 'Pin to top',
			'k_0gmpgcg': 'No conversation',
			'k_002tu9r': 'Performance',
			'k_1tmcw5c': 'Complete your topic title',
			'k_1cnmslk': 'A tag must be selected',
			'k_0z3ytji': 'Topic created successfully',
			'k_1a8vem3': 'Creator exception',
			'k_0eskkr1': 'Select a discussion forum',
			'k_0d7plb5': 'Create topic',
			'k_144t0ho': '---- Related discussions ----',
			'k_0pnz619': 'Enter the topic title',
			'k_136v279': '+ Tag (add at least one tag)',
			'k_04hjhvp': 'Discussion forum parameter exception',
			'k_002r79h': 'All',
			'k_03ejkb6': 'Joined',
			'k_172tngw': 'Topic (disconnected)',
			'k_0rnmfc4': 'No topic in the discussion forum',
			'k_1pq0ybn': 'You haven\'t joined any topic yet',
			'k_0bh95w0': 'Failed to join the topic due to network disconnection',
			'k_002twmj': 'Group chat',
			'k_09kalj0': 'Clear chat history',
			'k_18qjstb': 'Transfer group owner',
			'k_14j5iul': 'Delete and exit',
			'k_0jtutmw': 'You will not be able to receive messages from this group chat after you exit',
			'k_08k00l9': 'Loading…',
			'k_197r4f7': 'IM service connected successfully',
			'k_1s5xnir': 'Failed to initialize the IM SDK',
			'k_15bxnkw': 'Network connection lost',
			'k_002r09z': 'Channels',
			'k_003nvk2': 'Chats',
			'k_1jwxwgt': 'Connecting…',
			'k_03gm52d': 'Contacts',
			'k_003k7dc': 'Me',
			'k_14yh35u': 'Log in to IM',
			'k_0st7i3e': 'Try IM features such as group chat and voice/video call',
			'k_0cr1atw': 'Chinese mainland',
			'k_0jsvmjm': 'Enter your mobile number',
			'k_1lg8qh2': 'Incorrect mobile number format',
			'k_03jia4z': 'No network connection',
			'k_007jqt2': 'Verification code sent successfully',
			'k_1t2zg6h': 'Image verification failed',
			'k_1a55aib': 'Verification code exception',
			'k_16r3sej': 'Country/Region',
			'k_15hlgzr': 'Select your country code',
			'k_1bnmt3h': 'Please search in English',
			'k_003kv3v': 'Search',
			'k_03fei8z': 'Mobile number',
			'k_03aj66h': 'Verification code',
			'k_1m9jtmw': 'Enter the verification code',
			'k_0y1wbxk': 'Send',
			'k_0orhtx0': ' Privacy Agreement ',
			'k_00041m1': 'and',
			'k_0opnzp6': ' User Agreement ',
			'k_161ecly': 'Network unavailable',
			'k_11uz2i8': 'Reconnect network',
			'k_1vhzltr': 'Tencent Cloud IM',
			'k_0j433ys': 'Tencent Cloud TRTC',
			'k_12u8g8l': 'Disclaimer',
			'k_1p0j8i3': 'Instant Messaging (IM) is a test product provided by Tencent Cloud. It is for trying out features, but not for commercial use. To follow regulatory requirements of the authority, voice and video-based interactions performed via IM will be recorded and archived throughout the whole process. It is strictly prohibited to disseminate via IM any pornographic, abusive, violent, political and other noncompliant content.',
			'k_0k7qoht': 'Accept all friend requests',
			'k_0gyhkp5': 'Require approval for friend requests',
			'k_121ruco': 'Reject all friend requests',
			'k_003kfai': 'Unknown',
			'k_1kvyskd': 'Modification failed due to network disconnection',
			'k_1wmkneq': 'Require approval',
			'k_1eitsd0': 'About Tencent Cloud IM',
			'k_1919d6m': 'Privacy Policy',
			'k_16kts8h': 'Log out',
			'k_129scag': 'Friend deleted successfully',
			'k_094phq4': 'Failed to add the friend',
			'k_13spdki': 'Send message',
			'k_0h22snw': 'Voice call',
			'k_0h20hg5': 'Video call',
			'k_1666isy': 'Delete friend',
			'k_0r8fi93': 'Friend added successfully',
			'k_02qw14e': 'Friend request sent',
			'k_0n3md5x': 'The current user is on the blocklist',
			'k_14c600t': 'Modify remarks',
			'k_1f811a4': 'Allows only digits, letters and underscores',
			'k_11z7ml4': 'Profile',
			'k_0003y9x': 'None',
			'k_1679vrd': 'Add as friend',
			'k_03ibg5h': 'Mon',
			'k_03i7hu1': 'Tue',
			'k_03iaiks': 'Wed',
			'k_03el9pa': 'Thu',
			'k_03i7ok1': 'Fri',
			'k_03efxyg': 'Sat',
			'k_03ibfd2': 'Sun',
			'k_003ltgm': 'Location',
			'k_04dqh36': 'No new contact',
			'k_0mnxjg7': 'Welcome to Tencent Cloud Instant Messaging (IM). To protect the security of your personal information, we have updated the Privacy Policy, mainly improving the specific content and purpose for user information collection and adding the use of third-party SDKs.',
			'k_1545beg': 'Please tap ',
			'k_11x8pvm': 'and read them carefully. If you agree to the content, tap "Accept and continue" to start using our product and service.',
			'k_17nw8gq': 'Accept and continue',
			'k_1nynslj': 'Reject and quit',
			'k_1j91bvz': 'Let TUIKit pick a profile photo for you?',
			'k_0wqhgor': 'Personal information collection list',
			'k_12rfxml': 'Third-party information sharing list',
			'k_131g7q4': 'Deregister account',
			'k_03fel2u': 'Version',
			'k_1ajt0b1': 'Failed to get the current location',
			'k_0lhm9xq': 'Search initiated successfully',
			'k_0fdeled': 'Failed to initiate the search',
			'k_1yh0a50': 'mapDidLoad - The map has been loaded',
			'k_16758qw': 'Add friend',
			'k_0elt0kw': 'Add group chat',
			'k_0s3p3ji': 'No blocklist',
			'k_02slfpm': ({required Object errorMessage}) => 'Error: $errorMessage',
			'k_1m8zuj4': 'Select contact',
			'k_0vwtop2': ({required Object getMsg}) => 'Message obtained: $getMsg',
			'k_0upijvs': ({required Object message}) => 'Failed to get the discussion forum list: $message',
			'k_0v5hlay': ({required Object message}) => 'Failed to create the topic: $message',
			'k_0em28sp': 'No group chat',
			'k_0owk5ss': ({required Object failedReason}) => 'Login failed: $failedReason',
			'k_0glj9us': 'Initiate conversation',
			'k_1631kyh': 'Create work group',
			'k_1644yii': 'Create public group',
			'k_1fxfx04': 'Create meeting group',
			'k_1cnkqc9': 'Create voice-video group',
			'k_1mw45lz': ({required Object errorReason}) => 'Login failed: $errorReason',
			'k_0epvs61': 'Change skin',
			'k_002ri2g': 'Log in',
			'k_1o7lf2y': ({required Object errorMessage}) => 'Server error: $errorMessage',
			'k_118l7sq': ({required Object requestErrorMessage}) => 'Request error: $requestErrorMessage',
			'k_003nfx9': 'Deep',
			'k_003rvjp': 'Light',
			'k_003rtht': 'Bright',
			'k_003qxiw': 'Fantasy',
			'k_0s5zoi3': ({required Object option1}) => 'Error: $option1',
			'k_0i8egqa': ({required Object option8}) => 'Message obtained: $option8',
			'k_0pokyns': ({required Object option8}) => 'Failed to get the discussion forum list: $option8',
			'k_1y03m8a': ({required Object option8}) => 'Failed to create the topic: $option8',
			'k_1v6uh9c': ({required Object option8}) => 'Login failed: $option8',
			'k_0t5a9hl': ({required Object option1}) => 'Login failed: $option1',
			'k_0k3uv02': ({required Object option8}) => 'Server error: $option8',
			'k_1g9o3kz': ({required Object option8}) => 'Request error: $option8',
			'k_10s6v2i': ' Information Collection Statement ',
			'k_0pasxq8': ' Information Sharing Statement ',
			'k_14cahuz': 'About Tencent Cloud · IM',
			'k_0llnalm': 'SDK Version',
			'k_13dyfii': 'APP Version',
			'k_12h52zh': 'Privacy Policy',
			'k_0fxhhwb': 'User Agreement',
			'k_18z2e6q': 'APP Tencent Cloud · IM(\'this product\') is a test product provided by Tencent Cloud and Tencent Cloud enjoys the copyright and ownership of this product. This product is only used for functional experience and must not be used for any commercial purposes.In order to comply with the regulatory requirements of relevant departments the voice and video interactions of this product are archived throughout the entire voice and video interactions. Any pornography,abusive,violent and politically related content is strictly prohibited during use.',
			'k_0zu7dd7': 'Personal Information Collected',
			'k_0mcqhgh': 'Information Shared with Third Parties',
			'k_12eqaty': 'Confirm to deregister account',
			'k_0ziqsr6': 'Account deregistered successfully',
			'k_002qtgt': 'Deregister Account',
			'k_0rvdu91': ({required Object option1}) => 'After deregister this account, you will be unable to use it, and the related data will be permanently deleted. Current account: $option1',
			'k_15d22qk': 'Deregister Account',
			'k_036uv3f': 'Tencent Cloud · IM',
			'k_167916k': 'WeChat contacts',
			'k_03euwr1': 'Moments',
			'k_0cxccci': 'invites you to a video call',
			'k_06lhh4b': 'invites you to a voice call',
			'k_1ywo9ut': 'Tencent Cloud · IM is developed based on QQ messaging module. Chat, conversation, group, data management and LVB on-screen comments can be easily implemented by Chat SDK. Also, connecting with other products such as whiteboards through signaling messages is supported. We can fully covering your business scenarios. Our Chat SDK can support major platforms and Mini Program, to meet communication needs.',
			'k_0ios26v': 'WeChat is not detected',
			'k_002rflt': 'Delete',
			'k_125ru1w': 'Disband Group',
			'k_0jtzmqa': 'You will not receiving messages from this group after disbanding',
			'k_1jg6d5x': ' Summary of Privacy Policy ',
			'k_0selni4': ' Privacy Policy ',
			'k_003r6vf': 'Log in',
			'k_09khmso': 'Related messages',
			'k_118prbn': 'Search globally',
			'k_03f2zbs': 'Share to ',
			'k_0cfkcaz': 'Chat Message',
			'k_1rmkb2w': 'New Chat Message',
			'k_1lg375c': 'New Chat Message Remind',
			'k_1t0akzp': ({required Object option1}) => 'After deregister this account, you will be unable to use it, and the related data will be permanently deleted. Current account: $option1',
			'k_1699p6d': 'Tencent Building',
			'k_1ngd60h': 'No. 10000 Shennan avenue, Shenzhen',
			'k_1na29vg': 'Location messages is not supported in DEMO temporarily',
			'k_1xmms9t': 'Request to Join Group',
			'k_0dla4vp': 'To provide feedback or suggestions,\n please join our QQ group at',
			'k_1odrjd1': 'Online time: 10 AM to 8 PM, Mon through Fri',
			'k_1bh903m': 'Copied successfully',
			'k_16264lp': 'Copy group number',
			'k_18ger86': 'Tencent Cloud IM',
			'k_1vd70l1': 'Chat SDK serving hundreds of millions of QQ users',
			'k_036phup': 'Tencent Cloud IM',
		};
	}
}

extension on _StringsZhHans {
	Map<String, dynamic> _buildFlatMap() {
		return {
			'k_16758qw': '添加好友',
			'k_0elt0kw': '添加群聊',
			'k_03f15qk': '黑名单',
			'k_0s3p3ji': '暂无黑名单',
			'k_0uc5cnb': '我们还在内测中，暂不支持创建频道。',
			'k_003rzap': '确定',
			'k_003nevv': '取消',
			'k_0s5ey0o': '实时音视频 TRTC',
			'k_03gpl3d': '大家好',
			'k_0352fjr': '无网络连接，进入频道失败',
			'k_0d7n018': '结束话题',
			'k_0d826hk': '置顶话题',
			'k_15wcgna': '结束成功',
			'k_15wo7xu': '置顶成功',
			'k_02slfpm': ({required Object errorMessage}) => '发生错误 $errorMessage',
			'k_003ltgm': '位置',
			'k_0h22snw': '语音通话',
			'k_0h20hg5': '视频通话',
			'k_002s934': '话题',
			'k_18g3zdo': '云通信·IM',
			'k_1m8vyp0': '新的联系人',
			'k_0elz70e': '我的群聊',
			'k_18tb4mo': '无联系人',
			'k_18nuh87': '联系我们',
			'k_1uf134v': '反馈及建议可以加入QQ群：788910197',
			'k_0xlhhrn': '在线时间，周一到周五，早上10点 - 晚上8点',
			'k_17fmlyf': '清除聊天',
			'k_0dhesoz': '取消置顶',
			'k_002sk7x': '置顶',
			'k_003kv3v': '搜索',
			'k_0gmpgcg': '暂无会话',
			'k_1m8zuj4': '选择联系人',
			'k_002tu9r': '性能',
			'k_0vwtop2': ({required Object getMsg}) => '获取到的消息:$getMsg',
			'k_0upijvs': ({required Object message}) => '获取讨论区列表失败 $message',
			'k_1tmcw5c': '请完善话题标题',
			'k_1cnmslk': '必须选择一个标签',
			'k_0v5hlay': ({required Object message}) => '创建话题失败 $message',
			'k_0z3ytji': '创建话题成功',
			'k_1a8vem3': '创建者异常',
			'k_0eskkr1': '选择讨论区',
			'k_0d7plb5': '创建话题',
			'k_144t0ho': '---- 相关讨论 ----',
			'k_0pnz619': '填写话题标题',
			'k_136v279': '+标签（至少添加一个）',
			'k_04hjhvp': '讨论区参数异常',
			'k_002r79h': '全部',
			'k_03ejkb6': '已加入',
			'k_172tngw': '话题（未连接）',
			'k_0rnmfc4': '该讨论区下暂无话题',
			'k_1pq0ybn': '暂未加入任何话题',
			'k_0bh95w0': '无网络连接，进入话题失败',
			'k_002twmj': '群聊',
			'k_0em28sp': '暂无群聊',
			'k_09kalj0': '清空聊天记录',
			'k_18qjstb': '转让群主',
			'k_14j5iul': '删除并退出',
			'k_0jtutmw': '退出后不会接收到此群聊消息',
			'k_04dqh36': '暂无新联系人',
			'k_08k00l9': '正在加载...',
			'k_197r4f7': '即时通信服务连接成功',
			'k_1s5xnir': '即时通信 SDK初始化失败',
			'k_0owk5ss': ({required Object failedReason}) => '登录失败 $failedReason',
			'k_15bxnkw': '网络连接丢失',
			'k_0glj9us': '发起会话',
			'k_1631kyh': '创建工作群',
			'k_1644yii': '创建社交群',
			'k_1fxfx04': '创建会议群',
			'k_1cnkqc9': '创建直播群',
			'k_002r09z': '频道',
			'k_003nvk2': '消息',
			'k_1jwxwgt': '连接中...',
			'k_03gm52d': '通讯录',
			'k_003k7dc': '我的',
			'k_14yh35u': '登录·即时通信',
			'k_0st7i3e': '体验群组聊天，音视频对话等IM功能',
			'k_0cr1atw': '中国大陆',
			'k_0mnxjg7': '欢迎使用腾讯云即时通信 IM，为保护您的个人信息安全，我们更新了《隐私政策》，主要完善了收集用户信息的具体内容和目的、增加了第三方SDK使用等方面的内容。',
			'k_1545beg': '请您点击',
			'k_0opnzp6': '《用户协议》',
			'k_00041m1': '和',
			'k_0orhtx0': '《隐私协议》',
			'k_11x8pvm': '并仔细阅读，如您同意以上内容，请点击“同意并继续”，开始使用我们的产品与服务！',
			'k_17nw8gq': '同意并继续',
			'k_1nynslj': '不同意并退出',
			'k_0jsvmjm': '请输入手机号',
			'k_1lg8qh2': '手机号格式错误',
			'k_03jia4z': '无网络连接',
			'k_007jqt2': '验证码发送成功',
			'k_1a55aib': '验证码异常',
			'k_1mw45lz': ({required Object errorReason}) => '登录失败$errorReason',
			'k_16r3sej': '国家/地区',
			'k_15hlgzr': '选择你的国家区号',
			'k_1bnmt3h': '请使用英文搜索',
			'k_03fei8z': '手机号',
			'k_03aj66h': '验证码',
			'k_1m9jtmw': '请输入验证码',
			'k_0y1wbxk': '获取验证码',
			'k_002ri2g': '登陆',
			'k_161ecly': '当前无网络',
			'k_11uz2i8': '重试网络',
			'k_1vhzltr': '腾讯云即时通信IM',
			'k_0j433ys': '腾讯云TRTC',
			'k_0epvs61': '更换皮肤',
			'k_12u8g8l': '免责声明',
			'k_1p0j8i3': 'IM即时通信（“本产品”）是由腾讯云提供的一款测试产品，腾讯云享有本产品的著作权和所有权。本产品仅用于功能体验，不得用于任何商业用途。为配合相关部门监管要求，本产品音视频互动全程均有录音录像存档，严禁在使用中有任何色情、辱骂、暴恐、涉政等违法内容传播。',
			'k_0k7qoht': '同意任何用户加好友',
			'k_0gyhkp5': '需要验证',
			'k_121ruco': '拒绝任何人加好友',
			'k_003kfai': '未知',
			'k_1kvyskd': '无网络连接，无法修改',
			'k_1j91bvz': 'TUIKIT 为你选择一个头像?',
			'k_1wmkneq': '加我为好友时需要验证',
			'k_1eitsd0': '关于腾讯云·通信',
			'k_1919d6m': '隐私条例',
			'k_0wqhgor': '个人信息收集清单',
			'k_12rfxml': '第三方信息共享清单',
			'k_131g7q4': '注销账户',
			'k_03fel2u': '版本号',
			'k_16kts8h': '退出登录',
			'k_129scag': '好友删除成功',
			'k_094phq4': '好友添加失败',
			'k_13spdki': '发送消息',
			'k_1666isy': '清除好友',
			'k_0r8fi93': '好友添加成功',
			'k_02qw14e': '好友申请已发出',
			'k_0n3md5x': '当前用户在黑名单',
			'k_14c600t': '修改备注',
			'k_1f811a4': '支持数字、英文、下划线',
			'k_11z7ml4': '详细资料',
			'k_0003y9x': '无',
			'k_1679vrd': '加为好友',
			'k_1ajt0b1': '获取当前位置失败',
			'k_0lhm9xq': '发起检索成功',
			'k_0fdeled': '发起检索失败',
			'k_1yh0a50': 'mapDidLoad-地图加载完成',
			'k_1t2zg6h': '图片验证码校验失败',
			'k_03ibg5h': '星期一',
			'k_03i7hu1': '星期二',
			'k_03iaiks': '星期三',
			'k_03el9pa': '星期四',
			'k_03i7ok1': '星期五',
			'k_03efxyg': '星期六',
			'k_03ibfd2': '星期七',
			'k_1o7lf2y': ({required Object errorMessage}) => '服务器错误：$errorMessage',
			'k_118l7sq': ({required Object requestErrorMessage}) => '请求错误：$requestErrorMessage',
			'k_003nfx9': '深沉',
			'k_003rvjp': '轻快',
			'k_003rtht': '明媚',
			'k_003qxiw': '梦幻',
			'k_0s5zoi3': ({required Object option1}) => '发生错误 $option1',
			'k_0i8egqa': ({required Object option8}) => '获取到的消息:$option8',
			'k_0pokyns': ({required Object option8}) => '获取讨论区列表失败 $option8',
			'k_1y03m8a': ({required Object option8}) => '创建话题失败 $option8',
			'k_1v6uh9c': ({required Object option8}) => '登录失败 $option8',
			'k_0t5a9hl': ({required Object option1}) => '登录失败$option1',
			'k_0k3uv02': ({required Object option8}) => '服务器错误：$option8',
			'k_1g9o3kz': ({required Object option8}) => '请求错误：$option8',
			'k_14cahuz': '关于腾讯云 · IM',
			'k_0llnalm': 'SDK版本号',
			'k_13dyfii': '应用版本号',
			'k_12h52zh': '隐私政策',
			'k_0fxhhwb': '用户协议',
			'k_18z2e6q': 'IM即时通信（“本产品”）是由腾讯云提供的一款测试产品，腾讯云享有本产品的著作权和所有权。本产品仅用于功能体验，不得用于任何商业用途。严禁在使用中有任何色情、辱骂、暴恐、涉政等违法内容传播。',
			'k_0zu7dd7': '信息收集清单',
			'k_0mcqhgh': '信息共享清单',
			'k_12eqaty': '确认注销账户',
			'k_0ziqsr6': '账户注销成功！',
			'k_002qtgt': '注销',
			'k_0rvdu91': ({required Object option1}) => '注销后，您将无法使用当前账号，相关数据也将删除且无法找回。当前账号ID: $option1',
			'k_15d22qk': '注销账号',
			'k_036uv3f': '腾讯云IM',
			'k_167916k': '微信好友',
			'k_03euwr1': '朋友圈',
			'k_0cxccci': '邀请你视频通话',
			'k_06lhh4b': '邀请你语音通话',
			'k_1ywo9ut': '即时通信 IM (Instant Messaging)基于 QQ 底层 IM 能力开发，仅需植入 SDK 即可轻松集成聊天、会话、群组、资料管理和直播弹幕能力，也支持通过信令消息与白板等其他产品打通，全面覆盖您的业务场景，支持各大平台小程序接入使用，全面满足通信需要',
			'k_0ios26v': '未检测到微信安装',
			'k_002rflt': '删除',
			'k_125ru1w': '解散该群',
			'k_0jtzmqa': '解散后不会接收到此群聊消息',
			'k_1jg6d5x': '《隐私政策摘要》',
			'k_0selni4': '《隐私政策》',
			'k_10s6v2i': '《信息收集清单》',
			'k_0pasxq8': '《信息共享清单》',
			'k_003r6vf': '登录',
			'k_09khmso': '相关聊天记录',
			'k_118prbn': '全局搜索',
			'k_03f2zbs': '分享到',
			'k_0cfkcaz': '消息推送',
			'k_1rmkb2w': '推送新聊天消息',
			'k_1lg375c': '新消息提醒',
			'k_1t0akzp': ({required Object option1}) => '注销后，您将无法使用当前账号，相关数据也将删除且无法找回。当前账号ID: $option1',
			'k_1699p6d': '腾讯大厦',
			'k_1ngd60h': '深圳市深南大道10000号',
			'k_1na29vg': '位置消息维护中',
			'k_1xmms9t': '进群申请列表',
			'k_0dla4vp': '反馈及建议可以加入QQ群',
			'k_1odrjd1': '在线时间: 周一到周五，早上10点 - 晚上8点',
			'k_1bh903m': 'QQ群号复制成功',
			'k_16264lp': '复制群号',
			'k_18ger86': '腾讯云 · IM',
			'k_1vd70l1': '服务亿级 QQ 用户的即时通讯技术',
			'k_036phup': '腾讯云IM',
		};
	}
}

extension on _StringsZhHant {
	Map<String, dynamic> _buildFlatMap() {
		return {
			'k_16758qw': '添加好友',
			'k_0elt0kw': '添加群組',
			'k_03f15qk': '黑名單',
			'k_0s3p3ji': '暫無黑名單',
			'k_0uc5cnb': '我們還在內測中，暫不支持創建頻道。',
			'k_003rzap': '確定',
			'k_003nevv': '取消',
			'k_0s5ey0o': '實時音視訊 TRTC',
			'k_03gpl3d': '大家好',
			'k_0352fjr': '無網絡連接，進入頻道失敗',
			'k_0d7n018': '結束話題',
			'k_0d826hk': '置頂話題',
			'k_15wcgna': '結束成功',
			'k_15wo7xu': '置頂成功',
			'k_02slfpm': ({required Object errorMessage}) => '發生錯誤 $errorMessage',
			'k_003ltgm': '位置',
			'k_0h22snw': '語音通話',
			'k_0h20hg5': '視訊通話',
			'k_002s934': '話題',
			'k_18g3zdo': '雲通信·IM',
			'k_1m8vyp0': '新的聯絡人',
			'k_0elz70e': '我的群組',
			'k_18tb4mo': '無聯絡人',
			'k_18nuh87': '聯絡我們',
			'k_1uf134v': '反饋及建議可以加入QQ群：788910197',
			'k_0xlhhrn': '在線時間，周一到周五，早上10點 - 晚上8點',
			'k_17fmlyf': '清除聊天',
			'k_0dhesoz': '取消置頂',
			'k_002sk7x': '置頂',
			'k_003kv3v': '搜尋',
			'k_0gmpgcg': '暫無會話',
			'k_1m8zuj4': '選擇聯絡人',
			'k_002tu9r': '性能',
			'k_0vwtop2': ({required Object getMsg}) => '獲取到的訊息:$getMsg',
			'k_0upijvs': ({required Object message}) => '獲取討論區列表失敗 $message',
			'k_1tmcw5c': '請完善話題標題',
			'k_1cnmslk': '必須選擇一個標簽',
			'k_0v5hlay': ({required Object message}) => '創建話題失敗 $message',
			'k_0z3ytji': '創建話題成功',
			'k_1a8vem3': '創建者異常',
			'k_0eskkr1': '選擇討論區',
			'k_0d7plb5': '創建話題',
			'k_144t0ho': '---- 相關討論 ----',
			'k_0pnz619': '填寫話題標題',
			'k_136v279': '+標簽（至少添加一個）',
			'k_04hjhvp': '討論區參數異常',
			'k_002r79h': '全部',
			'k_03ejkb6': '已加入',
			'k_172tngw': '話題（未連接）',
			'k_0rnmfc4': '該討論區下暫無話題',
			'k_1pq0ybn': '暫未加入任何話題',
			'k_0bh95w0': '無網絡連接，進入話題失敗',
			'k_002twmj': '群組',
			'k_0em28sp': '暫無群組',
			'k_09kalj0': '清空聊天記錄',
			'k_18qjstb': '轉讓群主',
			'k_14j5iul': '刪除並退出',
			'k_0jtutmw': '退出後不會接收到此群組訊息',
			'k_04dqh36': '暫無新聯絡人',
			'k_08k00l9': '正在載入...',
			'k_197r4f7': '即時通信服務連接成功',
			'k_1s5xnir': '即時通信 SDK初始化失敗',
			'k_0owk5ss': ({required Object failedReason}) => '登入失敗 $failedReason',
			'k_15bxnkw': '網絡連接丟失',
			'k_0glj9us': '發起會話',
			'k_1631kyh': '創建工作群',
			'k_1644yii': '創建社交群',
			'k_1fxfx04': '創建會議群',
			'k_1cnkqc9': '創建直播群',
			'k_002r09z': '頻道',
			'k_003nvk2': '訊息',
			'k_1jwxwgt': '連接中...',
			'k_03gm52d': '通訊錄',
			'k_003k7dc': '我的',
			'k_14yh35u': '登入·即時通信',
			'k_0st7i3e': '體驗群組聊天，音視訊對話等IM功能',
			'k_0cr1atw': '中國大陸',
			'k_0mnxjg7': '歡迎使用騰訊雲即時通信 IM，為保護您的個人信息安全，我們更新了《私隱政策》，主要完善了收集用戶信息的具體內容和目的、增加了第三方SDK使用等方面的內容。',
			'k_1545beg': '請您點擊',
			'k_0opnzp6': '《用戶協議》',
			'k_00041m1': '和',
			'k_0orhtx0': '《私隱協議》',
			'k_11x8pvm': '並仔細閱讀，如您同意以上內容，請點擊「同意並繼續」，開始使用我們的產品與服務！',
			'k_17nw8gq': '同意並繼續',
			'k_1nynslj': '不同意並退出',
			'k_0jsvmjm': '請輸入手機號碼',
			'k_1lg8qh2': '手機號碼格式錯誤',
			'k_03jia4z': '無網絡連接',
			'k_007jqt2': '驗證碼發送成功',
			'k_1a55aib': '驗證碼異常',
			'k_1mw45lz': ({required Object errorReason}) => '登入失敗$errorReason',
			'k_16r3sej': '國家/地區',
			'k_15hlgzr': '選擇你的國家區號',
			'k_1bnmt3h': '請使用英文搜尋',
			'k_03fei8z': '手機號碼',
			'k_03aj66h': '驗證碼',
			'k_1m9jtmw': '請輸入驗證碼',
			'k_0y1wbxk': '獲取驗證碼',
			'k_002ri2g': '登陸',
			'k_161ecly': '當前無網絡',
			'k_11uz2i8': '重試網絡',
			'k_1vhzltr': '騰訊雲即時通信IM',
			'k_0j433ys': '騰訊雲TRTC',
			'k_0epvs61': '更換皮膚',
			'k_12u8g8l': '免責聲明',
			'k_1p0j8i3': 'IM即時通信（「本產品」）是由騰訊雲提供的一款測試產品，騰訊雲享有本產品的著作權和所有權。本產品僅用於功能體驗，不得用於任何商業用途。為配合相關部門監管要求，本產品音視訊互動全程均有錄音錄像存檔，嚴禁在使用中有任何色情、辱罵、暴恐、涉政等違法內容傳播。',
			'k_0k7qoht': '同意任何用戶加好友',
			'k_0gyhkp5': '需要驗證',
			'k_121ruco': '拒絕任何人加好友',
			'k_003kfai': '未知',
			'k_1kvyskd': '無網絡連接，無法修改',
			'k_1j91bvz': 'TUIKIT 為你選擇一個頭像?',
			'k_1wmkneq': '加我為好友時需要驗證',
			'k_1eitsd0': '關於騰訊雲·通信',
			'k_1919d6m': '私隱條例',
			'k_0wqhgor': '個人資料收集清單',
			'k_12rfxml': '第三方資料共用清單',
			'k_131g7q4': '註銷賬戶',
			'k_03fel2u': '版本號',
			'k_16kts8h': '登出',
			'k_129scag': '好友刪除成功',
			'k_094phq4': '好友添加失敗',
			'k_13spdki': '發送訊息',
			'k_1666isy': '清除好友',
			'k_0r8fi93': '好友添加成功',
			'k_02qw14e': '好友申請已發出',
			'k_0n3md5x': '當前用戶在黑名單',
			'k_14c600t': '修改備註',
			'k_1f811a4': '支持數字、英文、下劃線',
			'k_11z7ml4': '詳細資料',
			'k_0003y9x': '無',
			'k_1679vrd': '加為好友',
			'k_1ajt0b1': '獲取當前位置失敗',
			'k_0lhm9xq': '發起檢索成功',
			'k_0fdeled': '發起檢索失敗',
			'k_1yh0a50': 'mapDidLoad-地圖載入完成',
			'k_1t2zg6h': '圖片驗證碼校驗失敗',
			'k_03ibg5h': '星期一',
			'k_03i7hu1': '星期二',
			'k_03iaiks': '星期三',
			'k_03el9pa': '星期四',
			'k_03i7ok1': '星期五',
			'k_03efxyg': '星期六',
			'k_03ibfd2': '星期七',
			'k_1o7lf2y': ({required Object errorMessage}) => '服務器錯誤：$errorMessage',
			'k_118l7sq': ({required Object requestErrorMessage}) => '請求錯誤：$requestErrorMessage',
			'k_003nfx9': '深沈',
			'k_003rvjp': '輕快',
			'k_003rtht': '明媚',
			'k_003qxiw': '夢幻',
			'k_0s5zoi3': ({required Object option1}) => '發生錯誤 $option1',
			'k_0i8egqa': ({required Object option8}) => '獲取到的訊息:$option8',
			'k_0pokyns': ({required Object option8}) => '獲取討論區列表失敗 $option8',
			'k_1y03m8a': ({required Object option8}) => '創建話題失敗 $option8',
			'k_1v6uh9c': ({required Object option8}) => '登入失敗 $option8',
			'k_0t5a9hl': ({required Object option1}) => '登入失敗$option1',
			'k_0k3uv02': ({required Object option8}) => '服務器錯誤：$option8',
			'k_1g9o3kz': ({required Object option8}) => '請求錯誤：$option8',
			'k_14cahuz': '關於騰訊雲 · IM',
			'k_0llnalm': 'SDK版本號',
			'k_13dyfii': '應用版本號',
			'k_12h52zh': '私隱政策',
			'k_0fxhhwb': '用戶協議',
			'k_18z2e6q': 'IM即時通信（「本產品」）是由騰訊雲提供的一款測試產品，騰訊雲享有本產品的著作權和所有權。本產品僅用於功能體驗，不得用於任何商業用途。嚴禁在使用中有任何色情、辱罵、暴恐、涉政等違法內容傳播。',
			'k_0zu7dd7': '個人資料收集清單',
			'k_0mcqhgh': '第三方資料共用清單',
			'k_12eqaty': '確認註銷賬戶',
			'k_0ziqsr6': '賬戶註銷成功！',
			'k_002qtgt': '註銷',
			'k_0rvdu91': ({required Object option1}) => '註銷後，您將無法使用當前賬號，相關數據也將刪除且無法找回。當前賬號ID: $option1',
			'k_15d22qk': '註銷賬號',
			'k_036uv3f': '雲通信IM',
			'k_167916k': '微信好友',
			'k_03euwr1': '朋友圈',
			'k_0cxccci': '邀請你視訊通話',
			'k_06lhh4b': '邀請你語音通話',
			'k_1ywo9ut': '即時通信 IM (Instant Messaging)基於 QQ 底層 IM 能力開發，僅需植入 SDK 即可輕松集成聊天、會話、群組、資料管理和直播彈幕能力，也支持通過信令訊息與白板等其他產品打通，全面覆蓋您的業務場景，支持各大平臺小程序接入使用，全面滿足通信需要',
			'k_0ios26v': '未檢測到微信安裝',
			'k_002rflt': '刪除',
			'k_125ru1w': '解散該群',
			'k_0jtzmqa': '解散後不會接收到此群組訊息',
			'k_1jg6d5x': '《私隱政策摘要》',
			'k_0selni4': '《私隱政策》',
			'k_10s6v2i': '《個人資料收集清單》',
			'k_0pasxq8': '《第三方資料共用清單》',
			'k_003r6vf': '登入',
			'k_09khmso': '相關聊天記錄',
			'k_118prbn': '全局搜尋',
			'k_03f2zbs': '分享到',
			'k_0cfkcaz': '訊息推送',
			'k_1rmkb2w': '推送新聊天訊息',
			'k_1lg375c': '新訊息提醒',
			'k_1t0akzp': ({required Object option1}) => '註銷後，您將無法使用當前賬號，相關數據也將刪除且無法找回。當前賬號ID: $option1',
			'k_1699p6d': '騰訊大廈',
			'k_1ngd60h': '深圳市深南大道10000號',
			'k_1na29vg': '位置訊息維護中',
			'k_1xmms9t': '進群申請列表',
			'k_0dla4vp': '反饋及建議可以加入QQ群組',
			'k_1odrjd1': '在線時間: 周一到周五，早上10點 - 晚上8點',
			'k_1bh903m': '群組復製成功',
			'k_16264lp': '復製群組號',
			'k_18ger86': '騰訊雲 · IM',
			'k_1vd70l1': '服務億級 QQ 用戶的即時通訊技術',
			'k_036phup': '騰訊雲IM',
		};
	}
}
文件：/im-flutter-uikit/lib/src/about.dart


import 'package:flutter/material.dart';
import 'package:tim_ui_kit/tim_ui_kit.dart';
import 'package:tim_ui_kit/ui/utils/color.dart';
import 'package:timuikit/i18n/i18n_utils.dart';
import 'package:timuikit/src/cancel_account.dart';
import 'package:timuikit/src/provider/theme.dart';
import 'config.dart';
import 'package:provider/provider.dart';
import 'contactPage.dart';
import 'pages/privacy/privacy_webview.dart';

class About extends StatefulWidget{

  const About({Key? key}) : super(key: key);

  @override
  State<StatefulWidget> createState() => AboutState();


}

class AboutState extends State<About>{
  final V2TIMManager sdkInstance = TIMUIKitCore.getSDKInstance();
  String sdkVersion = "null";

  Widget aboutItem(String text, Function onClick, [String? rightText]){
    return Container(
      decoration: BoxDecoration(
        border: Border(
          bottom: BorderSide(
            color:
            Color(int.parse('ededed', radix: 16)).withAlpha(255),
            width: 1,
            style: BorderStyle.solid,
          ),
        ),
      ),
      child: InkWell(
        onTap: () {
          onClick();
        },
        child: TIMUIKitOperationItem(
          operationName: imt(text),
          isRightIcon: !(rightText != null && rightText.isNotEmpty),
          operationRightWidget: Text(rightText ?? ""),
        ),
      ),
    );
  }

  void getSDKVersion() async {
    final versionValue = await sdkInstance.getVersion();
    setState(() {
      sdkVersion = versionValue.data ?? "null";
    });
  }

  @override
  void initState() {
    getSDKVersion();
    super.initState();
  }
  @override
  Widget build(BuildContext context) {
    final theme = Provider.of<DefaultThemeData>(context).theme;
    return Scaffold(
      appBar: AppBar(
        iconTheme: const IconThemeData(
          color: Colors.white,
        ),
        shadowColor: theme.weakDividerColor,
        elevation: 1,
        title: Text(
            imt("关于腾讯云 · IM"),
          style: const TextStyle(fontSize: IMDemoConfig.appBarTitleFontSize),
        ),
        flexibleSpace: Container(
          decoration: BoxDecoration(
            gradient: LinearGradient(colors: [
              theme.lightPrimaryColor ?? CommonColor.lightPrimaryColor,
              theme.primaryColor ?? CommonColor.primaryColor
            ]),
          ),
        ),
      ),
      body: Column(
        children: [
          aboutItem( "SDK版本号", (){}, sdkVersion),
          aboutItem( "应用版本号", (){}, IMDemoConfig.appVersion),
          const SizedBox(
            height: 12,
          ),
          aboutItem( "隐私政策", (){
            Navigator.push(
                context,
                MaterialPageRoute(
                    builder: (context) => PrivacyDocument(
                        title: imt("隐私政策"),
                        url:
                        "https://privacy.qq.com/document/preview/1cfe904fb7004b8ab1193a55857f7272")));
          }),
          aboutItem( "用户协议", (){
            Navigator.push(
                context,
                MaterialPageRoute(
                    builder: (context) => PrivacyDocument(
                        title: imt("用户协议"),
                        url:
                        "https://web.sdk.qcloud.com/document/Tencent-IM-User-Agreement.html")));
          }),
          aboutItem( "免责声明", (){
            showDialog<void>(
              context: context,
              builder: (BuildContext context) {
                return AlertDialog(
                  title: Text(imt("免责声明")),
                  content: Text(imt(
                      "IM即时通信（“本产品”）是由腾讯云提供的一款测试产品，腾讯云享有本产品的著作权和所有权。本产品仅用于功能体验，不得用于任何商业用途。严禁在使用中有任何色情、辱骂、暴恐、涉政等违法内容传播。")),
                  actions: <Widget>[
                    TextButton(
                      child: Text(imt("取消")),
                      onPressed: () => Navigator.of(context).pop(), // 关闭对话框
                    ),
                    TextButton(
                      child: Text(imt("确定")),
                      onPressed: () {
                        //关闭对话框并返回true
                        Navigator.of(context).pop(true);
                      },
                    ),
                  ],
                );
              },
            );
          }),
          const SizedBox(
            height: 12,
          ),
          aboutItem( "信息收集清单", (){
            Navigator.push(
                context,
                MaterialPageRoute(
                    builder: (context) => PrivacyDocument(
                        title: imt("信息收集清单"),
                        url:
                        "https://privacy.qq.com/document/preview/45ba982a1ce6493597a00f8c86b52a1e")));
          }),
          aboutItem( "信息共享清单", (){
            Navigator.push(
                context,
                MaterialPageRoute(
                    builder: (context) => PrivacyDocument(
                        title: imt("信息共享清单"),
                        url:
                        "https://privacy.qq.com/document/preview/dea84ac4bb88454794928b77126e9246")));
          }),
          const SizedBox(
            height: 12,
          ),
          aboutItem( "注销账户", (){
            Navigator.push(
              context,
              MaterialPageRoute(
                builder: (context) =>  CancelAccount(),
              ),
            );
          }),
          aboutItem( "联系我们", (){
            Navigator.push(
              context,
              MaterialPageRoute(
                builder: (context) => const ContactPage(),
              ),
            );
          }),
        ],
      ),
    );
  }
}文件：/im-flutter-uikit/lib/src/add_friend.dart
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:tim_ui_kit/tim_ui_kit.dart';
import 'package:tim_ui_kit/ui/utils/color.dart';
import 'package:timuikit/i18n/i18n_utils.dart';
import 'package:timuikit/src/provider/theme.dart';

class AddFriend extends StatelessWidget {
  const AddFriend({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    final theme = Provider.of<DefaultThemeData>(context).theme;
    return Scaffold(
      appBar: AppBar(
          title: Text(
            imt("添加好友"),
            style: const TextStyle(color: Colors.white, fontSize: 17),
          ),
          shadowColor: theme.weakDividerColor,
          flexibleSpace: Container(
            decoration: BoxDecoration(
              gradient: LinearGradient(colors: [
                theme.lightPrimaryColor ?? CommonColor.lightPrimaryColor,
                theme.primaryColor ?? CommonColor.primaryColor
              ]),
            ),
          ),
          iconTheme: const IconThemeData(
            color: Colors.white,
          )),
      body: const TIMUIKitAddFriend(
      ),
    );
  }
}
文件：/im-flutter-uikit/lib/src/add_group.dart
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:tim_ui_kit/tim_ui_kit.dart';
import 'package:tim_ui_kit/ui/utils/color.dart';
import 'package:timuikit/i18n/i18n_utils.dart';
import 'package:timuikit/src/provider/theme.dart';

class AddGroup extends StatelessWidget {
  const AddGroup({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    final theme = Provider.of<DefaultThemeData>(context).theme;
    return Scaffold(
      appBar: AppBar(
          title: Text(
            imt("添加群聊"),
            style: const TextStyle(color: Colors.white, fontSize: 17),
          ),
          shadowColor: theme.weakDividerColor,
          flexibleSpace: Container(
            decoration: BoxDecoration(
              gradient: LinearGradient(colors: [
                theme.lightPrimaryColor ?? CommonColor.lightPrimaryColor,
                theme.primaryColor ?? CommonColor.primaryColor
              ]),
            ),
          ),
          iconTheme: const IconThemeData(
            color: Colors.white,
          )),
      body: const TIMUIKitAddGroup(),
    );
  }
}
文件：/im-flutter-uikit/lib/src/blackList.dart
// ignore_for_file: file_names

import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:tim_ui_kit/tim_ui_kit.dart';
import 'package:tim_ui_kit/ui/utils/color.dart';
import 'package:timuikit/i18n/i18n_utils.dart';
import 'package:timuikit/src/provider/theme.dart';

class BlackList extends StatelessWidget {
  const BlackList({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    final theme = Provider.of<DefaultThemeData>(context).theme;
    return Scaffold(
      appBar: AppBar(
          title: Text(
            imt("黑名单"),
            style: const TextStyle(color: Colors.white, fontSize: 17),
          ),
          shadowColor: Colors.white,
          flexibleSpace: Container(
            decoration: BoxDecoration(
              gradient: LinearGradient(colors: [
                theme.lightPrimaryColor ?? CommonColor.lightPrimaryColor,
                theme.primaryColor ?? CommonColor.primaryColor
              ]),
            ),
          ),
          iconTheme: const IconThemeData(
            color: Colors.white,
          )),
      body: TIMUIKitBlackList(
        emptyBuilder: (_) {
          return Center(
            child: Text(imt("暂无黑名单")),
          );
        },
        onTapItem: (_) {},
      ),
    );
  }
}
文件：/im-flutter-uikit/lib/src/cancel_account.dart
// ignore_for_file: use_key_in_widget_constructors, unused_import

import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:tim_ui_kit/business_logic/view_models/tui_self_info_view_model.dart';
import 'package:tim_ui_kit/data_services/services_locatar.dart';
import 'package:tim_ui_kit/tim_ui_kit.dart';
import 'package:tim_ui_kit/ui/utils/color.dart';
import 'package:timuikit/i18n/i18n_utils.dart';
import 'package:timuikit/src/pages/login.dart';
import 'package:timuikit/src/provider/theme.dart';
import 'package:provider/provider.dart';
import 'package:timuikit/src/routes.dart';
import 'package:timuikit/utils/request.dart';
import 'package:timuikit/utils/toast.dart';
import 'config.dart';

import 'package:dio/dio.dart';

class CancelAccount extends StatelessWidget {
  final TUISelfInfoViewModel _selfInfoViewModel =
      serviceLocator<TUISelfInfoViewModel>();
  final CoreServicesImpl _coreServices = TIMUIKitCore.getInstance();

  _handleLogout(BuildContext context) async {
    final res = await _coreServices.logout();
    if (res.code == 0) {
      try {
        Future<SharedPreferences> _prefs = SharedPreferences.getInstance();
        SharedPreferences prefs = await _prefs;
        prefs.remove('smsLoginUserId');
        prefs.remove('smsLoginToken');
        prefs.remove('smsLoginPhone');
        prefs.remove('channelListMain');
        prefs.remove('discussListMain');
      } catch (err) {
        Utils.log("someError");
        Utils.log(err);
      }
      Routes().directToLoginPage();
      // Navigator.of(context).pushAndRemoveUntil(
      //   MaterialPageRoute(builder: (BuildContext context) => const LoginPage()),
      //   ModalRoute.withName('/'),
      // );
    }
  }

  CupertinoActionSheet mapAppSheet(BuildContext context) {
    return CupertinoActionSheet(
      title: Text(imt("确认注销账户")),
      actions: [
        CupertinoActionSheetAction(
          onPressed: () async {
            Future<SharedPreferences> _prefs = SharedPreferences.getInstance();
            SharedPreferences prefs = await _prefs;
            String token = prefs.getString("smsLoginToken") ?? "";
            String userID = prefs.getString("smsLoginUserID") ?? "";
            String appID = prefs.getString("sdkAppId") ?? "";

            Response<Map<String, dynamic>> data = await appRequest(
                path:
                    "/base/v1/auth_users/user_delete?apaasUserId=$userID&userId=$userID&token=$token&apaasAppId=$appID",
                method: "get",
                data: <String, dynamic>{
                  "apaasUserId": userID,
                  "userId": userID,
                  "token": token,
                  "apaasAppId": appID
                });

            Map<String, dynamic> res = data.data!;
            int errorCode = res['errorCode'];
            String? codeStr = res['codeStr'];

            if (errorCode == 0) {
              Utils.toast((imt("账户注销成功！")));
              _handleLogout(context);
            } else {
              Utils.log(codeStr);
              Utils.toast(codeStr ?? "");
            }
          },
          child: Text(
            imt("注销"),
            style: TextStyle(
              fontSize: 17.0,
              color: hexToColor("FF584C"),
            ),
          ),
        )
      ],
    );
  }

  @override
  Widget build(BuildContext context) {
    final theme = Provider.of<DefaultThemeData>(context).theme;
    final option1 = _selfInfoViewModel.loginInfo?.userID;
    return Scaffold(
      appBar: AppBar(
        iconTheme: const IconThemeData(
          color: Colors.white,
        ),
        shadowColor: theme.weakDividerColor,
        elevation: 1,
        title: Text(
          imt("注销账户"),
          style: const TextStyle(fontSize: IMDemoConfig.appBarTitleFontSize),
        ),
        flexibleSpace: Container(
          decoration: BoxDecoration(
            gradient: LinearGradient(colors: [
              theme.lightPrimaryColor ?? CommonColor.lightPrimaryColor,
              theme.primaryColor ?? CommonColor.primaryColor
            ]),
          ),
        ),
      ),
      body: Container(
        decoration: BoxDecoration(
          color: hexToColor("E6E9EB"),
        ),
        child: Center(
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.center,
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              Stack(
                children: [
                  Padding(
                    padding: const EdgeInsets.all(6),
                    child: CircleAvatar(
                      radius: 42,
                      backgroundImage: NetworkImage(
                          _selfInfoViewModel.loginInfo?.faceUrl ?? ""),
                    ),
                  ),
                  Positioned(
                    right: 0,
                    bottom: 0,
                    child: Icon(
                      Icons.do_not_disturb_on,
                      color: hexToColor('FA5151'),
                      size: 34,
                    ),
                  ),
                ],
              ),
              Container(
                margin: const EdgeInsets.only(top: 12, bottom: 80),
                padding: const EdgeInsets.only(right: 40, left: 40),
                child: Text(
                  imt_para("注销后，您将无法使用当前账号，相关数据也将删除且无法找回。当前账号ID: {{option1}}",
                          "注销后，您将无法使用当前账号，相关数据也将删除且无法找回。当前账号ID: $option1")(
                      option1: option1),
                  textAlign: TextAlign.left,
                  style: TextStyle(
                    color: hexToColor("444444"),
                    fontSize: 14,
                  ),
                ),
              ),
              Padding(
                padding: const EdgeInsets.only(right: 40, left: 40),
                child: MaterialButton(
                  elevation: 0,
                  highlightElevation: 0,
                  minWidth: double.infinity,
                  color: Colors.white,
                  textColor: hexToColor("FA5151"),
                  height: 46,
                  child: Text(
                    imt("注销账号"),
                    style: const TextStyle(
                      fontSize: 18,
                    ),
                  ),
                  onPressed: () {
                    showCupertinoModalPopup(
                        context: context,
                        builder: (BuildContext context) =>
                            mapAppSheet(context)).then((value) => null);
                  },
                ),
              )
            ],
          ),
        ),
      ),
    );
  }
}
文件：/im-flutter-uikit/lib/src/channel.dart
import 'dart:convert';

import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:tim_ui_kit/tim_ui_kit.dart';
import 'package:tim_ui_kit/ui/utils/color.dart';
import 'package:tim_ui_kit/ui/widgets/avatar.dart';
import 'package:timuikit/src/provider/login_user_Info.dart';
import 'package:timuikit/src/provider/theme.dart';
import 'package:timuikit/utils/discuss.dart';
import 'package:expandable/expandable.dart';
import 'chat.dart';
import 'provider/discuss.dart';
import 'package:provider/provider.dart';
import 'package:timuikit/i18n/i18n_utils.dart';

class Channel extends StatelessWidget {
  const Channel({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    final theme = Provider.of<DefaultThemeData>(context).theme;
    return Column(
      children: [
        Container(
          height: MediaQuery.of(context).padding.top,
          color: theme.weakBackgroundColor,
        ),
        Expanded(
            child: Row(
          children: const [
            ChannelSection(),
            CurrentSelectChannel(),
          ],
        ))
      ],
    );
  }
}

class ChannelSection extends StatelessWidget {
  const ChannelSection({Key? key}) : super(key: key);
  @override
  Widget build(BuildContext context) {
    final theme = Provider.of<DefaultThemeData>(context).theme;
    return Container(
      width: 65,
      color: theme.weakBackgroundColor,
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.center,
        children: [
          Container(
            margin: const EdgeInsets.only(top: 22, bottom: 12),
            child: const ChannelAvatar(),
          ), // 头像
          Container(
            width: 36,
            height: 1,
            color: theme.weakTextColor,
          ), // 分割线
          const ChannelList(), // 频道列表
          Container(
            margin: const EdgeInsets.only(top: 10),
            child: const AddChannel(), //创建 ICON,
          )
        ],
      ),
    );
  }
}

class ChannelAvatar extends StatefulWidget {
  const ChannelAvatar({Key? key}) : super(key: key);

  @override
  _ChannelAvatarState createState() => _ChannelAvatarState();
}

class _ChannelAvatarState extends State<ChannelAvatar> {
  final V2TIMManager sdkInstance = TIMUIKitCore.getSDKInstance();

  getLoginUserInfo() async {
    final res = await sdkInstance.getLoginUser();
    if (res.code == 0) {
      final result = await sdkInstance.getUsersInfo(userIDList: [res.data!]);

      if (result.code == 0) {
        Provider.of<LoginUserInfo>(context, listen: false)
            .setLoginUserInfo(result.data![0]);
      }
    }
  }

  @override
  void initState() {
    getLoginUserInfo();
    super.initState();
  }

  @override
  Widget build(BuildContext context) {
    final userInfo = Provider.of<LoginUserInfo>(context).loginUserInfo;

    final faceUrl = userInfo.faceUrl ?? "";
    final nickName = userInfo.nickName ?? "";
    final showName = nickName != "" ? nickName : userInfo.userID ?? "";
    return PhysicalModel(
      color: Colors.transparent,
      borderRadius: BorderRadius.circular(10),
      clipBehavior: Clip.antiAlias,
      child: GestureDetector(
        onTap: null,
        child: SizedBox(
          height: 44,
          width: 44,
          child: Avatar(faceUrl: faceUrl, showName: showName),
        ),
      ),
    );
  }
}

class ChannelList extends StatefulWidget {
  const ChannelList({Key? key}) : super(key: key);

  @override
  State<StatefulWidget> createState() => ChannelListState();
}

class ChannelListState extends State<ChannelList> {
  ScrollController scrollController = ScrollController(
    initialScrollOffset: 0.0,
  );
  final V2TIMManager sdkInstance = TIMUIKitCore.getSDKInstance();
  @override
  void initState() {
    super.initState();
    getConversation();
  }
  getConversation() async {
    V2TimValueCallback<V2TimConversationResult> res =  await sdkInstance.getConversationManager().getConversationList(nextSeq: "0", count: 100);
    if(res.code == 0){
      onNewConversation(res.data?.conversationList ?? []);
      getChannelList();
    }
  }
  onNewConversation(List<V2TimConversation?>? conversationList) {
    if(conversationList!=null && conversationList.isNotEmpty){
      Provider.of<DiscussData>(context, listen: false)
        .addNewConversation(conversationList);
    }
    
  }
  getChannelList() async {
    Future<SharedPreferences> _prefs = SharedPreferences.getInstance();
    SharedPreferences prefs = await _prefs;
    final listFromLocal = prefs.getString("channelListMain") ?? "";
    if (listFromLocal.isNotEmpty) {
      List<Map<String, dynamic>> list =
          List<Map<String, dynamic>>.from(jsonDecode(listFromLocal));
      Provider.of<DiscussData>(context, listen: false).updateChannelList(list);
    }

    Map<String, dynamic> data = await DisscussApi.getChannelList();
    if (data['code'] == 0) {
      List<Map<String, dynamic>> list =
          List<Map<String, dynamic>>.from(data['data']['rows']);
      Provider.of<DiscussData>(context, listen: false).updateChannelList(list);
      prefs.setString('channelListMain', jsonEncode(list));
    }
  }

  @override
  Widget build(BuildContext context) {
    List<Map<String, dynamic>> channelList =
        Provider.of<DiscussData>(context).channelList;
    return Align(
      alignment: Alignment.topCenter,
      child: SingleChildScrollView(
        controller: scrollController,
        reverse: false,
        child: Column(
          children: channelList
              .map(
                (e) => ChannelItem(
                  data: e,
                  index: channelList.indexWhere((element) => element == e),
                ),
              )
              .toList(),
        ),
      ),
    );
  }
}

class ChannelItem extends StatelessWidget {
  final Map<String, dynamic> data;
  final int index;
  const ChannelItem({
    Key? key,
    required this.data,
    required this.index,
  }) : super(key: key);
  setSelectedIndex(context) {
    Provider.of<DiscussData>(context, listen: false)
        .updateCurrentSelectedChannel(index);
  }

  @override
  Widget build(BuildContext context) {
    int currentIndex = Provider.of<DiscussData>(context).currentSelectedChannel;
    final theme = Provider.of<DefaultThemeData>(context).theme;
    return GestureDetector(
      onTap: () {
        setSelectedIndex(context);
      },
      child: Container(
        margin: const EdgeInsets.only(top: 10),
        child: Row(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            PhysicalModel(
              color: Colors.transparent,
              borderRadius: BorderRadius.circular(22),
              clipBehavior: Clip.antiAlias,
              child: Container(
                height: 44,
                width: 44,
                decoration: BoxDecoration(
                  shape: BoxShape.circle,
                  color: Colors.white,
                  border: Border.all(
                    color: currentIndex == index
                        ? theme.primaryColor ?? CommonColor.primaryColor
                        : Colors.white,
                    width: 2,
                  ),
                  image: DecorationImage(
                    image: NetworkImage(
                      data['icon'],
                    ),
                    fit: BoxFit.cover,
                  ),
                ),
                child: null,
              ),
            ),
          ],
        ),
      ),
    );
  }
}

class AddChannel extends StatelessWidget {
  const AddChannel({Key? key}) : super(key: key);
  Future<bool?> showWarning(context) {
    return showDialog<bool>(
      context: context,
      builder: (context) {
        return CupertinoAlertDialog(
          title: Text(imt("我们还在内测中，暂不支持创建频道。")),
          actions: [
            CupertinoDialogAction(
              child: Text(imt("确定")),
              onPressed: () {
                Navigator.of(context).pop();
              },
            ),
            CupertinoDialogAction(
              child: Text(imt("取消")),
              isDestructiveAction: true,
              onPressed: () {
                Navigator.of(context).pop();
              },
            ),
          ],
        );
      },
    );
  }

  @override
  Widget build(BuildContext context) {
    return Row(
      mainAxisAlignment: MainAxisAlignment.center,
      children: [
        PhysicalModel(
          color: Colors.transparent,
          borderRadius: BorderRadius.circular(23),
          clipBehavior: Clip.antiAlias,
          child: GestureDetector(
            onTap: () {
              showWarning(context);
            },
            child: Container(
              height: 46,
              width: 46,
              color: Colors.white,
              child: const Icon(
                Icons.add,
                size: 30,
                color: Colors.black,
              ),
            ),
          ),
        ),
      ],
    );
  }
}

class CurrentSelectChannel extends StatelessWidget {
  const CurrentSelectChannel({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    final theme = Provider.of<DefaultThemeData>(context).theme;
    Map<String, dynamic> infos =
        Provider.of<DiscussData>(context).currentChannelInfo ?? Map.from({});
    return Expanded(
      child: Container(
        color: theme.weakBackgroundColor,
        child: Column(
          children: [
            ChannelBanner(info: infos),
            DisscussList(info: infos),
          ],
        ),
      ),
    );
  }
}

class ChannelBanner extends StatelessWidget {
  final Map<String, dynamic> info;

  const ChannelBanner({
    Key? key,
    required this.info,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    String name = info['name'] ?? "";
    // String icon = info['icon'] ?? "";
    return Row(
      children: [
        Expanded(
          child: Container(
            height: 145,
            padding: const EdgeInsets.only(left: 20, right: 20),
            decoration: BoxDecoration(
              borderRadius: const BorderRadius.only(
                topLeft: Radius.circular(10),
                topRight: Radius.circular(10),
              ),
              image: DecorationImage(
                image: name == imt("实时音视频 TRTC") // 暂时先这么写，后面配置到后台
                    ? const AssetImage("assets/trtc_banner.png")
                    : const AssetImage("assets/im_banner.png"),
                fit: BoxFit.cover,
              ),
            ),
            child: Column(
              children: [
                SizedBox(
                  height: 40,
                  child: Row(
                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                    children: [
                      Text(
                        name,
                        style: const TextStyle(
                          fontSize: 17,
                          color: Colors.black,
                          fontWeight: FontWeight.w600,
                        ),
                      ),
                    ],
                  ),
                ),
              ],
            ),
          ),
        )
      ],
    );
  }
}

class DisscussList extends StatelessWidget {
  final Map<String, dynamic> info;
  const DisscussList({
    Key? key,
    required this.info,
  }) : super(key: key);
  @override
  Widget build(BuildContext context) {
    String catString = info['category'] ?? "";
    List<String> catList = catString.split("|");
    String chanelId = info['uuid'] ?? "";
    return Expanded(
      child: Container(
        color: Colors.white,
        child: DisscussListScroller(catList, chanelId),
      ),
    );
  }
}

class DisscussListScroller extends StatefulWidget {
  final List<String> catList;

  final String channelId;

  const DisscussListScroller(this.catList, this.channelId, {Key? key})
      : super(key: key);

  @override
  State<StatefulWidget> createState() => _DisscussListScrollerState();
}

class _DisscussListScrollerState extends State<DisscussListScroller> {
  ScrollController scrollController = ScrollController(
    initialScrollOffset: 0.0,
  );
  final V2TIMManager sdkInstance = TIMUIKitCore.getSDKInstance();

  late V2TimConversationListener _conversationListener;

  @override
  initState()  {
    _conversationListener =
        V2TimConversationListener(onConversationChanged: (conversationList) {
      onConversationChanged(conversationList);
    }, onNewConversation: (conversationList) {
      onNewConversation(conversationList);
    });
    sdkInstance
        .getConversationManager()
        .addConversationListener(listener: _conversationListener);
    
    super.initState();
  }

  
  @override
  void dispose() {
    sdkInstance
        .getConversationManager()
        .removeConversationListener(listener: _conversationListener);
    super.dispose();
  }

  onConversationChanged(conversationList) {
    Provider.of<DiscussData>(context, listen: false)
        .conversationItemChange(conversationList);
  }

  onNewConversation(conversationList) {
    Provider.of<DiscussData>(context, listen: false)
        .addNewConversation(conversationList);
  }

  @override
  Widget build(BuildContext context) {
    List<V2TimConversation> conversationList =
        Provider.of<DiscussData>(context).conversationList;
    return Align(
      alignment: Alignment.topCenter,
      child: SingleChildScrollView(
        controller: scrollController,
        child: Column(
          children: widget.catList
              .map(
                (e) => DisscussListByCategory(
                    e, widget.channelId, conversationList),
              )
              .toList(),
        ),
      ),
    );
  }
}

class DisscussListByCategory extends StatefulWidget {
  final String category;
  final String channelId;
  final List<V2TimConversation?> conversationList;
  const DisscussListByCategory(
      this.category, this.channelId, this.conversationList,
      {Key? key})
      : super(key: key);

  @override
  State<StatefulWidget> createState() => _DisscussListByCategoryState();
}

class _DisscussListByCategoryState extends State<DisscussListByCategory> {
  ExpandableController controller = ExpandableController();

  getDiscussList() async {
    Future<SharedPreferences> _prefs = SharedPreferences.getInstance();
    SharedPreferences prefs = await _prefs;
    final listFromLocal = prefs.getString("discussListMain") ?? "";
    if (listFromLocal.isNotEmpty) {
      List<Map<String, dynamic>> list =
          List<Map<String, dynamic>>.from(jsonDecode(listFromLocal));
      Provider.of<DiscussData>(context, listen: false).updateDiscussList(list);
    }

    Map<String, dynamic> data =
        await DisscussApi.getDiscussList(offset: 0, limit: 100);
    if (data['code'] == 0) {
      List<Map<String, dynamic>> list =
          List<Map<String, dynamic>>.from(data['data']['rows']);
      Provider.of<DiscussData>(context, listen: false).updateDiscussList(list);
      prefs.setString('discussListMain', jsonEncode(list));
    }
  }

  @override
  void initState() {
    getDiscussList();
    controller.toggle();
    super.initState();
  }

  @override
  Widget build(BuildContext context) {
    final theme = Provider.of<DefaultThemeData>(context).theme;
    List<Map<String, dynamic>> disList = Provider.of<DiscussData>(context)
        .discussList
        .where(
          (ele) =>
              ele['category'] == widget.category &&
              ele['chanelId'] == widget.channelId,
        )
        .toList();
    if (widget.conversationList.isNotEmpty) {
      for (var discuss in disList) {
        var conversationIdx = widget.conversationList
            .indexWhere((ele) => ele?.groupID == discuss["imGroupId"]);
        if (conversationIdx > -1 &&
            (widget.conversationList[conversationIdx]?.unreadCount ?? 0) > 0) {
          discuss['unread'] =
              widget.conversationList[conversationIdx]?.unreadCount;
        } else {
          discuss['unread'] = null;
        }
      }
    }

    return ExpandablePanel(
      controller: controller,
      theme: ExpandableThemeData(
        headerAlignment: ExpandablePanelHeaderAlignment.center,
        tapBodyToCollapse: true,
        iconPlacement: ExpandablePanelIconPlacement.left,
        iconColor: theme.weakTextColor,
        iconPadding: const EdgeInsets.all(0),
        expandIcon: Icons.arrow_right_outlined,
        collapseIcon: Icons.arrow_drop_down_outlined,
        iconRotationAngle: 1.5,
      ),
      header: Padding(
        padding: const EdgeInsets.fromLTRB(0, 10, 0, 10),
        child: Text(
          widget.category,
          style: TextStyle(
            color: theme.darkTextColor,
            fontSize: 13,
          ),
        ),
      ),
      collapsed: Container(),
      expanded: Container(
        padding: const EdgeInsets.only(left: 6, right: 6),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: <Widget>[
            for (var _ in disList)
              DiscussList(
                  Map<String, dynamic>.from(_), widget.conversationList),
          ],
        ),
      ),
    );
  }
}

class DiscussList extends StatefulWidget {
  final Map<String, dynamic> data;
  final List<V2TimConversation?> conversationList;
  const DiscussList(this.data, this.conversationList, {Key? key})
      : super(key: key);

  @override
  State<StatefulWidget> createState() => _DiscussListState();
}

class _DiscussListState extends State<DiscussList> {
  List topicList = List.from([]);
  getlist() async {
    String disscussImGroupId = widget.data['imGroupId'];
    Map<String, dynamic> res = await DisscussApi.getTopicList(
      disscussImGroupId: disscussImGroupId,
      type: 1,
    );
    int code = res['code'];
    Map<String, dynamic> data = res['data'];
    if (code == 0) {
      setState(() {
        topicList = data['rows'];
      });
    }
  }

  @override
  void initState() {
    getlist();
    super.initState();
  }

  @override
  Widget build(BuildContext context) {
    List unreadTopicList = List.from([]);
    if (widget.conversationList.isNotEmpty) {
      for (var topic in topicList) {
        var conversationIdx = widget.conversationList
            .indexWhere((ele) => ele?.groupID == topic["imGroupId"]);
        if (conversationIdx > -1 &&
            (widget.conversationList[conversationIdx]?.unreadCount ?? 0) > 0) {
          topic['unread'] =
              widget.conversationList[conversationIdx]!.unreadCount!;
          unreadTopicList.add(topic);
        }
      }
      if (unreadTopicList.isNotEmpty) {
        unreadTopicList[unreadTopicList.length - 1]['isFinished'] = true;
      }
    }
    return Container(
      decoration: const BoxDecoration(
        borderRadius: BorderRadius.all(
          Radius.circular(6),
        ),
      ),
      padding: const EdgeInsets.all(4),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: <Widget>[
          DiscussListItem(widget.data),
          for (var _ in unreadTopicList)
            TopicListItem(Map<String, dynamic>.from(_)),
        ],
      ),
    );
  }
}

class DiscussListItem extends StatefulWidget {
  final Map<String, dynamic> data;
  const DiscussListItem(this.data, {Key? key}) : super(key: key);

  @override
  State<StatefulWidget> createState() => _DiscussListItemState();
}

class _DiscussListItemState extends State<DiscussListItem> {
  final V2TIMManager sdkInstance = TIMUIKitCore.getSDKInstance();
  bool isActive = false;

  Future<V2TimConversation> getConversion(String conversationID) async {
    final data = await sdkInstance.getConversationManager().getConversation(
          conversationID: conversationID,
        );
    return data.data!;
  }

  toDiscuss() async {
      String groupId = widget.data['imGroupId'];
      V2TimCallback res = await sdkInstance.joinGroup(
        groupID: groupId,
        message: imt("大家好"),
      );
      V2TimConversation conversation = await getConversion('group_$groupId');
      // 加群成功或者已经是群成员直接进入
      if (res.code == 0 || res.code == 10013) {
        Navigator.push(
          context,
          MaterialPageRoute(
              builder: (context) => Chat(selectedConversation: conversation)),
        );
      }
  }

  active() {
    setState(() {
      isActive = true;
    });
  }

  unActive() {
    setState(() {
      isActive = false;
    });
  }

  @override
  Widget build(BuildContext context) {
    final theme = Provider.of<DefaultThemeData>(context).theme;
    return GestureDetector(
      onTap: toDiscuss,
      onTapDown: (detail) {
        active();
      },
      onPanEnd: (detail) {
        unActive();
      },
      onTapUp: (detail) {
        unActive();
      },
      onLongPressDown: (detail) {
        active();
      },
      onLongPressUp: unActive,
      onLongPressEnd: (detail) {
        unActive();
      },
      onLongPressCancel: unActive,
      onTapCancel: unActive,
      child: Container(
        decoration: BoxDecoration(
          borderRadius: const BorderRadius.all(
            Radius.circular(6),
          ),
          color: isActive ? theme.weakDividerColor : Colors.white,
        ),
        padding: const EdgeInsets.all(4),
        height: 36,
        child: Row(
          children: [
            const Image(
              width: 18,
              height: 18,
              image: AssetImage('assets/topic_icon.png'),
            ),
            Expanded(
              child: Text(
                widget.data['name'],
                style: const TextStyle(
                  fontSize: 15,
                ),
              ),
            ),
            Expanded(child: Container()),
            if ((widget.data['unread'] ?? 0) > 0)
              UnreadMessage(unreadCount: widget.data['unread'])
          ],
        ),
      ),
    );
  }
}

class TopicListItem extends StatefulWidget {
  final Map<String, dynamic> data;
  const TopicListItem(this.data, {Key? key}) : super(key: key);

  @override
  State<StatefulWidget> createState() => _TopicListItemState();
}

class _TopicListItemState extends State<TopicListItem> {
  final V2TIMManager sdkInstance = TIMUIKitCore.getSDKInstance();
  bool isActive = false;

  Future<V2TimConversation> getConversion(String conversationID) async {
    final data = await sdkInstance.getConversationManager().getConversation(
          conversationID: conversationID,
        );
    return data.data!;
  }

  openTopic(context) async {
    String topicGroupId = widget.data['imGroupId'];
    V2TimCallback res = await sdkInstance.joinGroup(
      groupID: topicGroupId,
      message: imt("大家好"),
    );
    V2TimConversation conversation = await getConversion('group_$topicGroupId');
    // 加群成功或者已经是群成员直接进入
    if (res.code == 0 || res.code == 10013) {
      final loginUser = await sdkInstance.getLoginUser();
      String userId = loginUser.data!;
      await DisscussApi.joinTopic(
        userId: userId,
        imGroupId: topicGroupId,
      );
      Navigator.push(
        context,
        MaterialPageRoute(
            builder: (context) => Chat(selectedConversation: conversation)),
      );
    } else {}
  }

  active() {
    setState(() {
      isActive = true;
    });
  }

  unActive() {
    setState(() {
      isActive = false;
    });
  }

  @override
  Widget build(BuildContext context) {
    final theme = Provider.of<DefaultThemeData>(context).theme;
    return GestureDetector(
      onTap: () {
        openTopic(context);
      },
      onTapDown: (detail) {
        active();
      },
      onTapUp: (detail) {
        unActive();
      },
      onPanEnd: (detail) {
        unActive();
      },
      onLongPressDown: (detail) {
        active();
      },
      onLongPressUp: unActive,
      onLongPressEnd: (detail) {
        unActive();
      },
      onLongPressCancel: unActive,
      onTapCancel: unActive,
      child: Container(
          decoration: BoxDecoration(
            borderRadius: const BorderRadius.all(
              Radius.circular(6),
            ),
            color: isActive ? theme.weakDividerColor : Colors.white,
          ),
          padding: const EdgeInsets.fromLTRB(16, 0, 4, 0),
          height: 36,
          child: Row(
            children: [
              widget.data['isFinished'] == true
                  ? const VerticalDivider(
                      width: 2,
                      thickness: 2,
                      indent: 0,
                      endIndent: 17,
                      color: Colors.black12)
                  : const VerticalDivider(
                      width: 2,
                      thickness: 2,
                      indent: 0,
                      endIndent: 0,
                      color: Colors.black12),
              const SizedBox(
                width: 20,
                child: Divider(
                    thickness: 2,
                    indent: 0,
                    endIndent: 10,
                    color: Colors.black12),
              ),
              Expanded(
                child: Text(
                  widget.data['name'],
                  style: const TextStyle(
                    fontSize: 15,
                  ),
                ),
              ),
              Expanded(child: Container()),
              if ((widget.data['unread'] ?? 0) > 0)
                UnreadMessage(unreadCount: widget.data['unread'])
            ],
          )),
    );
  }
}
文件：/im-flutter-uikit/lib/src/chat.dart
// ignore_for_file: unused_field, unused_element, avoid_print

import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:flutter_svg/svg.dart';
import 'package:fluwx/fluwx.dart';
import 'package:tim_ui_kit/business_logic/life_cycle/chat_life_cycle.dart';
import 'package:tim_ui_kit/business_logic/view_models/tui_chat_view_model.dart';
import 'package:tim_ui_kit/tim_ui_kit.dart';
import 'package:tim_ui_kit/ui/controller/tim_uikit_chat_controller.dart';
import 'package:tim_ui_kit/ui/utils/permission.dart';
import 'package:tim_ui_kit/ui/views/TIMUIKitChat/TIMUIKitTextField/tim_uikit_call_invite_list.dart';
import 'package:tim_ui_kit/ui/widgets/toast.dart';
import 'package:tim_ui_kit_calling_plugin/enum/tim_uikit_trtc_calling_scence.dart';
import 'package:tim_ui_kit_calling_plugin/tim_ui_kit_calling_plugin.dart';
import 'package:tim_ui_kit_sticker_plugin/tim_ui_kit_sticker_plugin.dart';
import 'package:timuikit/src/config.dart';
import 'package:timuikit/src/discuss/create_topic.dart';
import 'package:timuikit/src/group_profile.dart';
import 'package:timuikit/src/provider/custom_sticker_package.dart';
import 'package:timuikit/src/provider/theme.dart';
import 'package:timuikit/src/share.dart';
import 'package:timuikit/src/user_profile.dart';
import 'package:timuikit/src/widgets/message_item/location_message_item.dart';
import 'package:timuikit/utils/discuss.dart';
import 'package:provider/provider.dart';
import 'package:timuikit/utils/platform.dart';
import 'package:timuikit/utils/push/push_constant.dart';
import 'discuss/topic.dart';
import 'package:timuikit/i18n/i18n_utils.dart';

import 'group_application_list.dart';

class Chat extends StatefulWidget {
  final V2TimConversation selectedConversation;
  final V2TimMessage? initFindingMsg;

  const Chat(
      {Key? key, required this.selectedConversation, this.initFindingMsg})
      : super(key: key);

  @override
  State<StatefulWidget> createState() => _ChatState();
}

class _ChatState extends State<Chat> {
  final TIMUIKitChatController _timuiKitChatController =
      TIMUIKitChatController();
  TUICalling? _calling;
  bool isDisscuss = false;
  bool isTopic = false;
  bool _installedWechat = false;
  String? backRemark;
  final V2TIMManager sdkInstance = TIMUIKitCore.getSDKInstance();
  GlobalKey<dynamic> tuiChatField = GlobalKey();

  String _getTitle() {
    return backRemark ?? widget.selectedConversation.showName ?? "";
  }

  String? _getDraftText() {
    return widget.selectedConversation.draftText;
  }

  String? _getConvID() {
    return widget.selectedConversation.type == 1
        ? widget.selectedConversation.userID
        : widget.selectedConversation.groupID;
  }

  ConvType _getConvType() {
    return widget.selectedConversation.type == 1
        ? ConvType.c2c
        : ConvType.group;
  }

  isValidateDisscuss(String _groupID) async {
    if (!_groupID.contains("im_discuss_")) {
      return;
    }
    Map<String, dynamic> data = await DisscussApi.isValidateDisscuss(
      imGroupId: _groupID,
    );
    setState(() {
      isDisscuss = data['data']['isDisscuss'];
      isTopic = data['data']['isTopic'];
    });
  }

  _initListener() async {
    // 这个注册监听的逻辑，我们在TIMUIKitChat内已处理，您如果没有单独需要，可不手动注册
    // await _timuiKitChatController.removeMessageListener();
    // await _timuiKitChatController.setMessageListener();
  }

  _onTapAvatar(String userID) {
    Navigator.push(
        context,
        MaterialPageRoute(
          builder: (context) => UserProfile(userID: userID),
        ));
  }

  // _onTapLocation() {
  //   tuiChatField.currentState.inputextField.currentState.hideAllPanel();
  //   Navigator.push(
  //       context,
  //       MaterialPageRoute(
  //         builder: (context) => LocationPicker(
  //           onChange: (LocationMessage location) async {
  //             final locationMessageInfo = await sdkInstance.v2TIMMessageManager
  //                 .createLocationMessage(
  //                     desc: location.desc,
  //                     longitude: location.longitude,
  //                     latitude: location.latitude);
  //             final messageInfo = locationMessageInfo.data!.messageInfo;
  //             _timuiKitChatController.sendMessage(
  //                 receiverID: _getConvID(),
  //                 groupID: _getConvID(),
  //                 convType: _getConvType(),
  //                 messageInfo: messageInfo);
  //           },
  //           mapBuilder: (onMapLoadDone, mapKey, onMapMoveEnd) => BaiduMap(
  //             onMapMoveEnd: onMapMoveEnd,
  //             onMapLoadDone: onMapLoadDone,
  //             key: mapKey,
  //           ),
  //           locationUtils: LocationUtils(BaiduMapService()),
  //         ),
  //       ));
  // }

  _openTopicPage(String groupID) {
    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) => Topic(groupID),
      ),
    );
  }

  List<Map<String, dynamic>> handleTopicActionList = [
    {"name": imt("结束话题"), "type": "0"},
    {"name": imt("置顶话题"), "type": "1000"}
  ];

  handleTopic(BuildContext context, String type, String groupID) async {
    Map<String, dynamic> res = await DisscussApi.updateTopicStatus(
      imGroupId: groupID,
      status: type,
    );
    if (res['code'] == 0) {
      Toast.showToast(
          ToastType.success, type == '0' ? imt("结束成功") : imt("置顶成功"), context);
      Navigator.pop(context);
    } else {
      String option1 = res['message'];
      Toast.showToast(
          ToastType.fail,
          imt_para("发生错误 {{option1}}", "发生错误 $option1")(errorMessage: option1),
          context);
    }
  }

  messagePopUpMenu(BuildContext context, String groupID) {
    return showCupertinoModalPopup<String>(
      context: context,
      builder: (BuildContext context) {
        return CupertinoActionSheet(
          title: null,
          actions: handleTopicActionList
              .map(
                (e) => CupertinoActionSheetAction(
                  onPressed: () {
                    handleTopic(context, e['type'], groupID);
                  },
                  child: Text(e['name']),
                  isDefaultAction: false,
                ),
              )
              .toList(),
        );
      },
    );
  }

  _goToVideoUI() async {
    final hasCameraPermission =
        await Permissions.checkPermission(context, Permission.camera.value);
    final hasMicphonePermission =
        await Permissions.checkPermission(context, Permission.microphone.value);
    if (!hasCameraPermission || !hasMicphonePermission) {
      return;
    }
    final isGroup = widget.selectedConversation.type == 2;
    tuiChatField.currentState.textFieldController.hideAllPanel();
    if (isGroup) {
      List<V2TimGroupMemberFullInfo>? selectedMember = await Navigator.push(
        context,
        MaterialPageRoute(
          builder: (context) => SelectCallInviter(
            groupID: widget.selectedConversation.groupID,
          ),
        ),
      );
      if (selectedMember != null) {
        final inviteMember = selectedMember.map((e) => e.userID).toList();
        _calling?.groupCall(inviteMember, CallingScenes.Video,
            widget.selectedConversation.groupID);
      }
    } else {
      final user = await sdkInstance.getLoginUser();
      final myId = user.data;
      OfflinePushInfo offlinePush = OfflinePushInfo(
        title: "",
        desc: imt("邀请你视频通话"),
        ext: "{\"conversationID\": \"c2c_$myId\"}",
        disablePush: false,
        androidOPPOChannelID: PushConfig.OPPOChannelID,
        ignoreIOSBadge: false,
      );

      _calling?.call(widget.selectedConversation.userID!, CallingScenes.Video,
          offlinePush);
    }
  }

  _goToVoiceUI() async {
    final hasMicphonePermission =
        await Permissions.checkPermission(context, Permission.microphone.value);
    if (!hasMicphonePermission) {
      return;
    }
    final isGroup = widget.selectedConversation.type == 2;
    tuiChatField.currentState.textFieldController.hideAllPanel();
    if (isGroup) {
      List<V2TimGroupMemberFullInfo>? selectedMember = await Navigator.push(
        context,
        MaterialPageRoute(
          builder: (context) => SelectCallInviter(
            groupID: widget.selectedConversation.groupID,
          ),
        ),
      );
      if (selectedMember != null) {
        final inviteMember = selectedMember.map((e) => e.userID).toList();
        _calling?.groupCall(inviteMember, CallingScenes.Audio,
            widget.selectedConversation.groupID);
      }
    } else {
      final user = await sdkInstance.getLoginUser();
      final myId = user.data;
      OfflinePushInfo offlinePush = OfflinePushInfo(
        title: "",
        desc: imt("邀请你语音通话"),
        ext: "{\"conversationID\": \"c2c_$myId\"}",
        disablePush: false,
        ignoreIOSBadge: false,
        androidOPPOChannelID: PushConfig.OPPOChannelID,
      );

      _calling?.call(widget.selectedConversation.userID!, CallingScenes.Audio,
          offlinePush);
    }
  }

  static WeChatShareWebPageModel _getShareModel(
      ShareType shareType, ShareInfo shareInfo) {
    var scene = WeChatScene.SESSION;
    switch (shareType) {
      case ShareType.SESSION:
        scene = WeChatScene.SESSION;
        break;
      case ShareType.TIMELINE:
        scene = WeChatScene.TIMELINE;
        break;
      case ShareType.COPY_LINK:
        break;
      case ShareType.DOWNLOAD:
        break;
    }

    if (shareInfo.img != null) {
      return WeChatShareWebPageModel(
        shareInfo.url,
        title: shareInfo.title,
        thumbnail: shareInfo.img,
        description: shareInfo.describe,
        scene: scene,
      );
    } else {
      return WeChatShareWebPageModel(
        shareInfo.url,
        title: shareInfo.title,
        description: shareInfo.describe,
        scene: scene,
      );
    }
  }

  _initFluwx() async {
    final res = await registerWxApi(
        appId: "wxf0f963bc2e99b586",
        doOnAndroid: true,
        doOnIOS: true,
        universalLink: "https://comm.qq.com/im_demo_download/");
    print("is sucess $res");
    var result = await isWeChatInstalled;
    _installedWechat = result;
  }

  _initTUICalling() async {
    final isAndroidEmulator = await PlatformUtils.isAndroidEmulator();
    if (!isAndroidEmulator) {
      _calling = TUICalling();
    }
  }

  @override
  void initState() {
    super.initState();
    _initFluwx();
    _initListener();
    _initTUICalling();
    if (widget.selectedConversation.type != ConversationType.V2TIM_C2C) {
      isValidateDisscuss(widget.selectedConversation.groupID!);
    }
  }

  @override
  void dispose() {
    super.dispose();
  }

  Widget renderCustomStickerPanel(
      {sendTextMessage, sendFaceMessage, deleteText, addText}) {
    final theme = Provider.of<DefaultThemeData>(context).theme;
    final customStickerPackageList =
        Provider.of<CustomStickerPackageData>(context).customStickerPackageList;
    return StickerPanel(
        sendTextMsg: sendTextMessage,
        sendFaceMsg: sendFaceMessage,
        deleteText: deleteText,
        addText: addText,
        customStickerPackageList: customStickerPackageList,
        backgroundColor: theme.weakBackgroundColor,
        lightPrimaryColor: theme.lightPrimaryColor);
  }

  @override
  Widget build(BuildContext context) {
    return TIMUIKitChat(
      lifeCycle: ChatLifeCycle(
      ),
      onDealWithGroupApplication: (String groupId) {
        Navigator.push(
          context,
          MaterialPageRoute(
            builder: (context) => GroupApplicationList(
              groupID: groupId,
            ),
          ),
        );
      },
        groupAtInfoList: widget.selectedConversation.groupAtInfoList,
        key: tuiChatField,
        customStickerPanel: renderCustomStickerPanel,
        config: const TIMUIKitChatConfig(
            // 仅供演示，非全部配置项，实际使用中，可只传和默认项不同的参数，无需传入所有开关
            isAllowClickAvatar: true,
            isAllowLongPressMessage: true,
            isShowReadingStatus: true,
            notificationTitle: "",
            notificationOPPOChannelID: PushConfig.OPPOChannelID,
            groupReadReceiptPermisionList: [
              GroupReceptAllowType.work,
              GroupReceptAllowType.meeting,
              GroupReceptAllowType.public
            ]),
        conversationID: _getConvID() ?? '',
        conversationType: widget.selectedConversation.type ?? ConversationType.V2TIM_C2C,
        onTapAvatar: _onTapAvatar,
        conversationShowName: _getTitle(),
        initFindingMsg: widget.initFindingMsg,
        draftText: _getDraftText(),
        messageItemBuilder: MessageItemBuilder(
            locationMessageItemBuilder: (message, isShowJump, clearJump) {
          return LocationMessageItem(
            message: message,
            isSelf: message.isSelf,
          );
        },
          // textMessageItemBuilder: (message, isShowJump, clearJump) {
          //   return TextElemWithLinkPreview(
          //     message: message,
          //     isFromSelf: message.isSelf ?? true,
          //     isShowJump: isShowJump,
          //     clearJump: clearJump,
          //   );
          // }
        ),
        morePanelConfig: MorePanelConfig(
          extraAction: [
            // 隐私协议中没有位置消息，暂时下掉
            // MorePanelItem(
            //     id: "location",
            //     title: imt("位置"),
            //     onTap: (c) {
            //       _onTapLocation();
            //     },
            //     icon: Container(
            //       height: 64,
            //       width: 64,
            //       margin: const EdgeInsets.only(bottom: 4),
            //       decoration: const BoxDecoration(
            //           color: Colors.white,
            //           borderRadius: BorderRadius.all(Radius.circular(5))),
            //       child: Icon(
            //         Icons.location_on,
            //         color: hexToColor("5c6168"),
            //         size: 32,
            //       ),
            //     )),
            MorePanelItem(
                id: "voiceCall",
                title: imt("语音通话"),
                onTap: (c) {
                  // _onFeatureTap("voiceCall", c);
                  _goToVoiceUI();
                },
                icon: Container(
                  height: 64,
                  width: 64,
                  margin: const EdgeInsets.only(bottom: 4),
                  decoration: const BoxDecoration(
                      color: Colors.white,
                      borderRadius: BorderRadius.all(Radius.circular(5))),
                  child: SvgPicture.asset(
                    "images/voice-call.svg",
                    package: 'tim_ui_kit',
                    height: 64,
                    width: 64,
                  ),
                )),
            MorePanelItem(
                id: "videoCall",
                title: imt("视频通话"),
                onTap: (c) {
                  // _onFeatureTap("videoCall", c);
                  _goToVideoUI();
                },
                icon: Container(
                  height: 64,
                  width: 64,
                  margin: const EdgeInsets.only(bottom: 4),
                  decoration: const BoxDecoration(
                      color: Colors.white,
                      borderRadius: BorderRadius.all(Radius.circular(5))),
                  child: SvgPicture.asset(
                    "images/video-call.svg",
                    package: 'tim_ui_kit',
                    height: 64,
                    width: 64,
                  ),
                ))
          ],
        ),
        extraTipsActionItemBuilder: (message, closeTooltip, [Key? key]) {
          if (isDisscuss) {
            return Container(
              key: key,
              decoration: const BoxDecoration(
                color: Colors.white,
              ),
              width: 50,
              child: InkWell(
                onTap: () {
                  closeTooltip();
                  String disscussId;
                  if (message.groupID == null) {
                    disscussId = '';
                  } else {
                    disscussId = message.groupID!;
                  }

                  Navigator.push(
                    context,
                    MaterialPageRoute(
                      builder: (context) => CreateTopic(
                          disscussId: disscussId,
                          message: message.textElem?.text ?? '',
                          messageIdList: [message.msgID!]),
                    ),
                  );
                },
                child:
                    TipsActionItem(label: imt("话题"), icon: 'assets/topic.png'),
              ),
            );
          } else {
            return null;
          }
        },
        appBarConfig: AppBar(
          actions: [
            if (isDisscuss)
              SizedBox(
                width: 34,
                child: TextButton(
                  onPressed: () {
                    _openTopicPage(widget.selectedConversation.groupID!);
                  },
                  child: const Image(
                      width: 34,
                      height: 34,
                      image: AssetImage('assets/topic.png'),
                      color: Colors.white),
                ),
              ),
            if (isTopic)
              IconButton(
                onPressed: () {
                  messagePopUpMenu(
                      context, widget.selectedConversation.groupID!);
                },
                icon: const Icon(
                  Icons.settings,
                ),
              ),
            if (IMDemoConfig.openShareFeature && isDisscuss)
              IconButton(
                  onPressed: () async {
                    showModalBottomSheet(
                        backgroundColor: Colors.transparent,
                        context: context,
                        builder: (BuildContext context) {
                          return ShareWidget(
                            ShareInfo('腾讯云IM',
                                'https://comm.qq.com/im_demo_download/#/discuss-share',
                                img: WeChatImage.network(
                                    "https://imgcache.qq.com/operation/dianshi/other/logo.ac7337705ff26825bf66a8e074460759465c48d7.png"),
                                describe:
                                    "即时通信 IM (Instant Messaging)基于 QQ 底层 IM 能力开发，仅需植入 SDK 即可轻松集成聊天、会话、群组、资料管理和直播弹幕能力，也支持通过信令消息与白板等其他产品打通，全面覆盖您的业务场景，支持各大平台小程序接入使用，全面满足通信需要"),
                            list: [
                              ShareOpt(
                                  title: '微信好友',
                                  img: Image.asset(
                                    'assets/icon_wechat.png',
                                    width: 25.0,
                                    height: 25.0,
                                    fit: BoxFit.fill,
                                  ),
                                  shareType: ShareType.SESSION,
                                  doAction: (shareType, shareInfo) async {
                                    if (!_installedWechat) {
                                      Toast.showToast(
                                          ToastType.fail, "未检测到微信安装", context);
                                      return;
                                    }
                                    var model =
                                        _getShareModel(shareType, shareInfo);
                                    shareToWeChat(model);
                                  }),
                              ShareOpt(
                                  title: '朋友圈',
                                  img: Image.asset(
                                    'assets/icon_wechat_moments.jpg',
                                    width: 25.0,
                                    height: 25.0,
                                    fit: BoxFit.fill,
                                  ),
                                  shareType: ShareType.TIMELINE,
                                  doAction: (shareType, shareInfo) {
                                    if (!_installedWechat) {
                                      Toast.showToast(
                                          ToastType.fail, "未检测到微信安装", context);
                                      return;
                                    }
                                    var model =
                                        _getShareModel(shareType, shareInfo);
                                    shareToWeChat(model);
                                  }),
                            ],
                          );
                        });
                  },
                  icon: const Icon(Icons.share)),
            IconButton(
                padding: const EdgeInsets.only(left: 8, right: 16),
                onPressed: () async {
                  final conversationType = widget.selectedConversation.type;

                  if (conversationType == 1) {
                    final userID = widget.selectedConversation.userID;
                    // if had remark modifed its will back new remark
                    String? newRemark = await Navigator.push(
                        context,
                        MaterialPageRoute(
                          builder: (context) => UserProfile(userID: userID!),
                        ));
                    setState(() {
                      backRemark = newRemark;
                    });
                  } else {
                    final groupID = widget.selectedConversation.groupID;
                    if (groupID != null) {
                      Navigator.push(
                          context,
                          MaterialPageRoute(
                            builder: (context) => GroupProfilePage(
                              groupID: groupID,
                            ),
                          ));
                    }
                  }
                },
                icon: Image.asset(
                  'images/more.png',
                  package: 'tim_ui_kit',
                  height: 34,
                  width: 34,
                ))
          ],
        ));
  }
}
文件：/im-flutter-uikit/lib/src/chatv2.dart
import 'package:flutter/material.dart';
import 'package:tim_ui_kit/tim_ui_kit.dart';
import 'package:tim_ui_kit/ui/controller/tim_uikit_chat_controller.dart';

class ChatV2 extends StatefulWidget {
  final V2TimConversation selectedConversation;
  final V2TimMessage? initFindingMsg;

  const ChatV2(
      {Key? key, required this.selectedConversation, this.initFindingMsg})
      : super(key: key);
  @override
  State<StatefulWidget> createState() => _ChatV2State();
}

class _ChatV2State extends State<ChatV2> {
  final TIMUIKitChatController _controller = TIMUIKitChatController();
  final TIMUIKitHistoryMessageListController _historyMessageListController =
      TIMUIKitHistoryMessageListController();
  final TIMUIKitInputTextFieldController _textFieldController =
      TIMUIKitInputTextFieldController();
  bool _haveMoreData = true;
  String? _getConvID() {
    return widget.selectedConversation.type == 1
        ? widget.selectedConversation.userID
        : widget.selectedConversation.groupID;
  }

  loadHistoryMessageList(String? lastMsgID, [int? count]) async {
    if (_haveMoreData) {
      _haveMoreData = await _controller.loadHistoryMessageList(
          count: count ?? 20,
          userID: widget.selectedConversation.userID,
          groupID: widget.selectedConversation.groupID,
          lastMsgID: lastMsgID);
    }
  }

  @override
  Widget build(BuildContext context) {
    return TIMUIKitChatProviderScope(
      conversationID: _getConvID() ?? "",
      conversationType: widget.selectedConversation.type ?? 0,
      builder: (context, w) {
        return GestureDetector(
          onTap: () {
            _textFieldController.hideAllPanel();
          },
          child: Scaffold(
            appBar: TIMUIKitAppBar(
              config: AppBar(
                title: Text(widget.selectedConversation.showName ?? ""),
              ),
            ),
            body: Column(
              children: [
                Expanded(
                    child: TIMUIKitHistoryMessageListSelector(
                  builder: (context, messageList, w) {
                    return TIMUIKitHistoryMessageList(
                      controller: _historyMessageListController,
                      messageList: messageList,
                      onLoadMore: loadHistoryMessageList,
                      itemBuilder: (context, message) {
                        return TIMUIKitHistoryMessageListItem(
                          // messageItemBuilder: MessageItemBuilder(
                          //   textReplyMessageItemBuilder:
                          //       (message, isShowJump, clearJump) {},
                          // ),
                          // themeData: MessageThemeData(
                          //     messageBackgroundColor: Colors.black,
                          //     messageTextStyle: TextStyle(color: Colors.redAccent)),
                          topRowBuilder: (context, message) {
                            return Row(
                              children: const [Text("this is top Raw builder")],
                            );
                          },
                          showMessageReadRecipt: false,
                          onScrollToIndex:
                              _historyMessageListController.scrollToIndex,
                          onScrollToIndexBegin: _historyMessageListController
                              .scrollToIndexBegin,
                          // exteraTipsActionItemBuilder:
                          //     widget.exteraTipsActionItemBuilder,
                          message: message!,
                          // onTapAvatar: widget.onTapAvatar,
                          // showNickName: widget.showNickName,
                          // messageItemBuilder: widget.messageItemBuilder,
                          // onLongPressForOthersHeadPortrait:
                          //     widget.onLongPressForOthersHeadPortrait,
                          // onMsgSendFailIconTap: widget.onMsgSendFailIconTap,
                        );
                      },
                    );
                  },
                  conversationID: _getConvID() ?? "",
                )),
                TIMUIKitInputTextField(
                  controller: _textFieldController,
                  conversationID: _getConvID() ?? "",
                  conversationType: widget.selectedConversation.type ?? ConversationType.V2TIM_C2C,
                  scrollController:
                      _historyMessageListController.scrollController!,
                  hintText: "",
                  // showMorePannel: false,
                  // showSendAudio: false,
                  // showSendEmoji: false,
                )
              ],
            ),
            // body: Container(),
          ),
        );
      },
    );
  }
}
文件：/im-flutter-uikit/lib/src/config.dart

import 'package:timuikit/i18n/i18n_utils.dart';

enum WebUrl { personalInfo, thirdPartyInfo }

class IMDemoConfig {
  static const int sdkappid = int.fromEnvironment('SDK_APPID', defaultValue: 0);
  static const String key = String.fromEnvironment('KEY', defaultValue: "");
  static const String appVersion =
      String.fromEnvironment('APP_VERSION', defaultValue: "0.0.1");
  static const String projectType =
      String.fromEnvironment('PROJECT_TYPE', defaultValue: "discord");
  static const bool productEnv =
      bool.fromEnvironment('ISPRODUCT_ENV', defaultValue: false);
  static const bool openShareFeature =
      bool.fromEnvironment('OPEN_SHARE_FEATURE', defaultValue: true);
  static const String smsLoginHttpBase =
      'https://demos.trtc.tencent-cloud.com/prod';
  // static const String captchaUrl =
  // 'https://imgcache.qq.com/operation/dianshi/other/captcha.11f3ef11e3657473779f28383735c6a680a87180.html';
  static const String captchaUrl =
      'https://imgcache.qq.com/operation/dianshi/other/captcha.b7104193bf789d667fbc2ed45d8bbd31434876ad.html';
  static const int loglevel = 3;
  static String appName = imt("云通信·IM");
  static const pushConfig = <String, Map<String, double>>{
    "ios": {
      "dev": 30626,
      "prod": 30572,
    },
  };
  // appBarTile无法做适配，必须要常量才可以
  static const double appBarTitleFontSize = 17;

  static const String baiduMapIOSAppKey = "Zj9tGHMYCGyE3Q2rdk3Mh6qRGXQvG6kv";

  static const Map<WebUrl, String> webUrls = {
    WebUrl.personalInfo:
        "https://privacy.qq.com/document/preview/45ba982a1ce6493597a00f8c86b52a1e",
    WebUrl.thirdPartyInfo:
        "https://privacy.qq.com/document/preview/dea84ac4bb88454794928b77126e9246",
  };
}
文件：/im-flutter-uikit/lib/src/contact.dart
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:tim_ui_kit/tim_ui_kit.dart';
import 'package:tim_ui_kit/ui/utils/color.dart';
import 'package:tim_ui_kit/ui/widgets/avatar.dart';
import 'package:timuikit/src/blackList.dart';
import 'package:timuikit/src/group_list.dart';
import 'package:timuikit/src/provider/theme.dart';
import 'package:timuikit/src/user_profile.dart';
import 'newContact.dart';
import 'package:timuikit/i18n/i18n_utils.dart';

class Contact extends StatefulWidget {
  const Contact({Key? key}) : super(key: key);

  @override
  State<StatefulWidget> createState() => _ContactState();
}

class _ContactState extends State<Contact> {
  @override
  void initState() {
    super.initState();
  }

  _topListItemTap(String id) {
    switch (id) {
      case "newContact":
        Navigator.push(
            context,
            MaterialPageRoute(
              builder: (context) => const NewContact(),
            ));
        break;
      case "groupList":
        Navigator.push(
            context,
            MaterialPageRoute(
              builder: (context) => GroupList(),
            ));
        break;
      case "blackList":
        Navigator.push(
            context,
            MaterialPageRoute(
              builder: (context) => const BlackList(),
            ));
    }
  }

  String _getImagePathByID(String id) {
    final themeTypeSubfix = Provider.of<DefaultThemeData>(context)
        .currentThemeType
        .toString()
        .replaceFirst('ThemeType.', '');
    switch (id) {
      case "newContact":
        return "assets/newContact_$themeTypeSubfix.png";
      case "groupList":
        return "assets/groupList_$themeTypeSubfix.png";
      case "blackList":
        return "assets/blackList_$themeTypeSubfix.png";
      default:
        return "";
    }
  }

  Widget? _topListBuilder(TopListItem item) {
    final showName = item.name;
    if (item.id == "newContact") {
      return InkWell(
        onTap: () {
          _topListItemTap(item.id);
        },
        child: Container(
          padding: const EdgeInsets.only(top: 10, left: 16),
          child: Row(
            children: [
              Container(
                height: 40,
                width: 40,
                margin: const EdgeInsets.only(right: 12),
                child: Avatar(
                    faceUrl: _getImagePathByID(item.id),
                    showName: showName,
                    isFromLocal: true),
              ),
              Expanded(
                  child: Container(
                padding: const EdgeInsets.only(top: 10, bottom: 19),
                decoration: BoxDecoration(
                    border: Border(
                        bottom: BorderSide(color: hexToColor("DBDBDB")))),
                child: Row(
                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                  children: [
                    Text(
                      showName,
                      style:
                          TextStyle(color: hexToColor("111111"), fontSize: 18),
                    ),
                    Expanded(child: Container()),
                    const TIMUIKitUnreadCount(),
                    Container(
                      margin: const EdgeInsets.only(right: 16),
                      child: Icon(
                        Icons.keyboard_arrow_right,
                        color: hexToColor('BBBBBB'),
                      ),
                    )
                  ],
                ),
              ))
            ],
          ),
        ),
      );
    }
    return null;
  }

  @override
  Widget build(BuildContext context) {
    return TIMUIKitContact(
      topList: [
        TopListItem(
            name: imt("新的联系人"),
            id: "newContact",
            icon: Image.asset(_getImagePathByID("newContact")),
            onTap: () {
              _topListItemTap("newContact");
            }),
        TopListItem(
            name: imt("我的群聊"),
            id: "groupList",
            icon: Image.asset(_getImagePathByID("groupList")),
            onTap: () {
              _topListItemTap("groupList");
            }),
        TopListItem(
            name: imt("黑名单"),
            id: "blackList",
            icon: Image.asset(_getImagePathByID("blackList")),
            onTap: () {
              _topListItemTap("blackList");
            })
      ],
      topListItemBuilder: _topListBuilder,
      onTapItem: (item) {
        Navigator.push(
            context,
            MaterialPageRoute(
              builder: (context) => UserProfile(userID: item.userID),
            ));
      },
      emptyBuilder: (context) => Center(
        child: Text(imt("无联系人")),
      ),
    );
  }
}
文件：/im-flutter-uikit/lib/src/contactPage.dart
// ignore_for_file: file_names

import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:provider/provider.dart';
import 'package:tim_ui_kit/ui/utils/color.dart';
import 'package:timuikit/i18n/i18n_utils.dart';
import 'package:timuikit/src/provider/theme.dart';
import 'package:timuikit/utils/toast.dart';

class ContactPage extends StatelessWidget {
  const ContactPage({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    final theme = Provider.of<DefaultThemeData>(context).theme;
    return Scaffold(
        appBar: AppBar(
          iconTheme: const IconThemeData(
            color: Colors.white,
          ),
          shadowColor: theme.weakDividerColor,
          elevation: 1,
          title: Text(
            imt("联系我们"),
            style: const TextStyle(color: Colors.white, fontSize: 17),
          ),
          flexibleSpace: Container(
            decoration: BoxDecoration(
              gradient: LinearGradient(colors: [
                theme.lightPrimaryColor ?? CommonColor.lightPrimaryColor,
                theme.primaryColor ?? CommonColor.primaryColor
              ]),
            ),
          ),
        ),
        body: Container(
          width: MediaQuery.of(context).size.width,
          decoration: BoxDecoration(
            color: hexToColor("ecf3fe"),
          ),
          child: Stack(
            alignment: Alignment.center,
            children: [
              Container(
                // 因为底部有波浪图， icon向上一点，感觉视觉上更协调
                margin: const EdgeInsets.only(bottom: 40),
                child: Column(
                  children: [
                    Text(
                      imt("反馈及建议可以加入QQ群"),
                      textAlign: TextAlign.center,
                      style: TextStyle(
                        fontSize: 18,
                        color: theme.darkTextColor,
                      ),
                    ),
                    Container(
                      margin: const EdgeInsets.only(top: 20, bottom: 20),
                      child: Text(
                        "788910197",
                        style: TextStyle(
                            fontSize: 22,
                            fontWeight: FontWeight.w600,
                            color: theme.primaryColor),
                      ),
                    ),
                    Text(
                      imt("在线时间: 周一到周五，早上10点 - 晚上8点"),
                      style: TextStyle(
                        color: theme.darkTextColor,
                      ),
                    ),
                    Container(
                      margin: const EdgeInsets.only(top: 40),
                      child: ElevatedButton(
                        onPressed: () {
                          Clipboard.setData(const ClipboardData(text: '788910197'));
                          Utils.toast(imt("QQ群号复制成功"));
                        },
                        child: Text(imt("复制群号")),
                      ),
                    ),
                  ],
                  crossAxisAlignment: CrossAxisAlignment.center,
                  mainAxisAlignment: MainAxisAlignment.center,
                ),
              ),
              Positioned(
                bottom: 0,
                child: Image.asset(
                  "assets/logo_bottom.png",
                  fit: BoxFit.fitWidth,
                  width: MediaQuery.of(context).size.width,
                ),
              )
            ],
          ),
        ),
    );
  }
}
文件：/im-flutter-uikit/lib/src/conversation.dart
// ignore_for_file: unused_element

import 'package:flutter/material.dart';
import 'package:tim_ui_kit/tim_ui_kit.dart';
import 'package:tim_ui_kit/ui/controller/tim_uikit_conversation_controller.dart';
import 'package:tim_ui_kit/ui/utils/color.dart';
import 'package:timuikit/src/chat.dart';
import 'package:timuikit/i18n/i18n_utils.dart';
import 'package:provider/provider.dart';
import 'package:timuikit/src/provider/theme.dart';
import 'package:timuikit/src/search.dart';

class Conversation extends StatefulWidget {
  final TIMUIKitConversationController conversationController;
  const Conversation({Key? key, required this.conversationController})
      : super(key: key);

  @override
  State<StatefulWidget> createState() => _ConversationState();
}

class _ConversationState extends State<Conversation> {
  late TIMUIKitConversationController _controller;

  @override
  void initState() {
    super.initState();
    _controller = widget.conversationController;
    _controller.setConversationListener();
  }

  void _handleOnConvItemTaped(V2TimConversation? selectedConv) async {
    await Navigator.push(
        context,
        MaterialPageRoute(
          builder: (context) => Chat(
            selectedConversation: selectedConv!,
          ),
        ));
    _controller.reloadData();
  }

  void _handleOnConvItemTapedWithPlace(V2TimConversation? selectedConv,
      [V2TimMessage? toMessage]) async {
    await Navigator.push(
        context,
        MaterialPageRoute(
          builder: (context) => Chat(
            selectedConversation: selectedConv!,
            initFindingMsg: toMessage,
          ),
        ));
    _controller.reloadData();
  }

  _clearHistory(V2TimConversation conversationItem) {
    _controller.clearHistoryMessage(conversation: conversationItem);
  }

  _pinConversation(V2TimConversation conversation) {
    _controller.pinConversation(
        conversationID: conversation.conversationID,
        isPinned: !conversation.isPinned!);
  }

  _deleteConversation(V2TimConversation conversation) {
    _controller.deleteConversation(conversationID: conversation.conversationID);
  }

  List<ConversationItemSlidablePanel> _itemSlidableBuilder(
      V2TimConversation conversationItem) {
    return [
      ConversationItemSlidablePanel(
        onPressed: (context) {
          _clearHistory(conversationItem);
        },
        backgroundColor: hexToColor("006EFF"),
        foregroundColor: Colors.white,
        label: imt("清除聊天"),
        autoClose: true,
      ),
      ConversationItemSlidablePanel(
        onPressed: (context) {
          _pinConversation(conversationItem);
        },
        backgroundColor: hexToColor("FF9C19"),
        foregroundColor: Colors.white,
        label: conversationItem.isPinned! ? imt("取消置顶") : imt("置顶"),
      ),
      ConversationItemSlidablePanel(
        onPressed: (context) {
          _deleteConversation(conversationItem);
        },
        backgroundColor: Colors.red,
        foregroundColor: Colors.white,
        label: imt("删除"),
      )
    ];
  }

  Widget searchEntry(TUITheme theme) {
    return GestureDetector(
      onTap: () async {
        await Navigator.push(
            context,
            MaterialPageRoute(
              builder: (context) =>
                  Search(onTapConversation: _handleOnConvItemTapedWithPlace),
            ));
      },
      child: Container(
        decoration: BoxDecoration(
            gradient: LinearGradient(colors: [
              theme.lightPrimaryColor ?? CommonColor.lightPrimaryColor,
              theme.primaryColor ?? CommonColor.primaryColor
            ]),
            boxShadow: [
              BoxShadow(
                color: theme.weakDividerColor ?? hexToColor("E6E9EB"),
                offset: const Offset(0.0, 2.0),
              )
            ]),
        child: Padding(
          padding: const EdgeInsets.fromLTRB(16, 8, 16, 16),
          child: Container(
            decoration: const BoxDecoration(
              color: Colors.white,
              borderRadius: BorderRadius.all(Radius.circular(4)),
            ),
            height: 40,
            child: Row(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                Icon(
                  Icons.search,
                  color: hexToColor("979797"),
                  size: 18,
                ),
                Text(imt("搜索"),
                    style: TextStyle(
                      color: hexToColor("979797"),
                      fontSize: 14,
                    )),
              ],
            ),
          ),
        ),
      ),
    );
  }

  @override
  void dispose() {
    super.dispose();
    _controller.dispose();
  }

  @override
  Widget build(BuildContext context) {
    final theme = Provider.of<DefaultThemeData>(context).theme;
    return Column(
      children: [
        searchEntry(theme),
        Expanded(
          child: TIMUIKitConversation(
            onTapItem: _handleOnConvItemTaped,
            controller: _controller,
            conversationCollector: (conversation) {
              final groupID = conversation?.groupID ?? "";
              return !groupID.contains("im_discuss_");
            },
            emptyBuilder: () {
              return Container(
                padding: const EdgeInsets.only(top:100),
                child: Center(
                  child: Text(imt("暂无会话")),
                ),
              );
            },
          ),
        )
      ],
    );
  }
}
文件：/im-flutter-uikit/lib/src/create_group.dart
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:tim_ui_kit/tim_ui_kit.dart';
import 'package:tim_ui_kit/ui/utils/color.dart';
import 'package:timuikit/i18n/i18n_utils.dart';
import 'package:timuikit/src/chat.dart';
import 'package:timuikit/src/provider/theme.dart';

enum GroupTypeForUIKit { single, work, chat, meeting, public }

class CreateGroup extends StatefulWidget {
  final GroupTypeForUIKit convType;
  const CreateGroup({Key? key, required this.convType}) : super(key: key);

  @override
  State<StatefulWidget> createState() => _CreateGroup();
}

class _CreateGroup extends State<CreateGroup> {
  final V2TIMManager _sdkInstance = TIMUIKitCore.getSDKInstance();
  List<V2TimFriendInfo> friendList = [];
  List<V2TimFriendInfo> selectedFriendList = [];

  _getConversationList() async {
    final res = await _sdkInstance.getFriendshipManager().getFriendList();
    if (res.code == 0) {
      friendList = res.data!;
      setState(() {});
    }
  }

  _createSingleConversation() async {
    final userID = selectedFriendList.first.userID;
    final conversationID = "c2c_$userID";
    final res = await _sdkInstance
        .getConversationManager()
        .getConversation(conversationID: conversationID);

    if (res.code == 0) {
      final conversation = res.data;
      Navigator.pushReplacement(
          context,
          MaterialPageRoute(
              builder: (context) => Chat(selectedConversation: conversation!)));
    }
  }

  _getShowName(V2TimFriendInfo item) {
    final friendRemark = item.friendRemark ?? "";
    final nickName = item.userProfile?.nickName ?? "";
    final userID = item.userID;
    final showName = nickName != "" ? nickName : userID;
    return friendRemark != "" ? friendRemark : showName;
  }

  _createGroup(String groupType) async {
    final groupName = selectedFriendList.map((e) => _getShowName(e)).join("、");

    final groupMember = selectedFriendList.map((e) {
      final role = e.userProfile!.role!;
      GroupMemberRoleTypeEnum roleEnum =
          GroupMemberRoleTypeEnum.V2TIM_GROUP_MEMBER_UNDEFINED;
      switch (role) {
        case GroupMemberRoleType.V2TIM_GROUP_MEMBER_ROLE_ADMIN:
          roleEnum = GroupMemberRoleTypeEnum.V2TIM_GROUP_MEMBER_ROLE_ADMIN;
          break;
        case GroupMemberRoleType.V2TIM_GROUP_MEMBER_ROLE_MEMBER:
          roleEnum = GroupMemberRoleTypeEnum.V2TIM_GROUP_MEMBER_ROLE_MEMBER;
          break;
        case GroupMemberRoleType.V2TIM_GROUP_MEMBER_ROLE_OWNER:
          roleEnum = GroupMemberRoleTypeEnum.V2TIM_GROUP_MEMBER_ROLE_OWNER;
          break;
        case GroupMemberRoleType.V2TIM_GROUP_MEMBER_UNDEFINED:
          roleEnum = GroupMemberRoleTypeEnum.V2TIM_GROUP_MEMBER_UNDEFINED;
          break;
      }

      return V2TimGroupMember(role: roleEnum, userID: e.userID);
    }).toList();
    final res = await _sdkInstance.getGroupManager().createGroup(
        groupType: groupType,
        groupName: groupName,
        memberList: groupType != GroupType.AVChatRoom ? groupMember : null);
    if (res.code == 0) {
      final groupID = res.data;
      final conversationID = "group_$groupID";
      final convRes = await _sdkInstance
          .getConversationManager()
          .getConversation(conversationID: conversationID);
      if (convRes.code == 0) {
        final conversation = convRes.data;
        Navigator.pushReplacement(
            context,
            MaterialPageRoute(
                builder: (context) =>
                    Chat(selectedConversation: conversation!)));
      }
    }
  }

  @override
  void initState() {
    super.initState();
    _getConversationList();
  }

  @override
  Widget build(BuildContext context) {
    final theme = Provider.of<DefaultThemeData>(context).theme;
    return Scaffold(
      appBar: AppBar(
          title: Text(
            imt("选择联系人"),
            style: const TextStyle(color: Colors.white, fontSize: 17),
          ),
          shadowColor: theme.weakDividerColor,
          flexibleSpace: Container(
            decoration: BoxDecoration(
              gradient: LinearGradient(colors: [
                theme.lightPrimaryColor ?? CommonColor.lightPrimaryColor,
                theme.primaryColor ?? CommonColor.primaryColor
              ]),
            ),
          ),
          actions: [
            TextButton(
              onPressed: () async {
                if (selectedFriendList.isNotEmpty) {
                  switch (widget.convType) {
                    case GroupTypeForUIKit.single:
                      _createSingleConversation();
                      break;
                    case GroupTypeForUIKit.chat:
                      _createGroup(GroupType.AVChatRoom);
                      break;
                    case GroupTypeForUIKit.meeting:
                      _createGroup(GroupType.Meeting);
                      break;
                    case GroupTypeForUIKit.work:
                      _createGroup(GroupType.Work);
                      break;
                    case GroupTypeForUIKit.public:
                      _createGroup(GroupType.Public);
                      break;
                  }
                }
              },
              child: Text(
                imt("确定"),
                style: const TextStyle(
                  color: Colors.white,
                  fontSize: 16,
                ),
              ),
            )
          ],
          iconTheme: const IconThemeData(
            color: Colors.white,
          )),
      body: ContactList(
        contactList: friendList,
        isCanSelectMemberItem: true,
        maxSelectNum: widget.convType == GroupTypeForUIKit.single ? 1 : null,
        onSelectedMemberItemChange: (selectedMember) {
          selectedFriendList = selectedMember;
          setState(() {});
        },
      ),
    );
  }
}
文件：/im-flutter-uikit/lib/src/group_application_list.dart
// ignore_for_file: unused_import

import 'package:flutter/material.dart';
import 'package:tim_ui_kit/ui/views/TIMUIKitGroup/tim_uikit_group_application_list.dart';
import 'package:timuikit/i18n/i18n_utils.dart';
import 'package:timuikit/src/provider/theme.dart';
import 'package:provider/provider.dart';

class GroupApplicationList extends StatelessWidget{
  /// group ID
  final String groupID;

  const GroupApplicationList({Key? key, required this.groupID}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    final theme = Provider.of<DefaultThemeData>(context).theme;
    return Scaffold(
      appBar: AppBar(
        iconTheme: const IconThemeData(
          color: Colors.white,
        ),
        elevation: 0,
        backgroundColor: theme.primaryColor,
        title: Text(
          imt("进群申请列表"),
          style: const TextStyle(
            color: Colors.white,
            fontSize: 17,
          ),
        ),
      ),
      body: TIMUIKitGroupApplicationList(groupID: groupID),
    );
  }

}文件：/im-flutter-uikit/lib/src/group_list.dart
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:tim_ui_kit/tim_ui_kit.dart';
import 'package:tim_ui_kit/ui/utils/color.dart';
import 'package:timuikit/src/chat.dart';
import 'package:timuikit/i18n/i18n_utils.dart';
import 'package:timuikit/src/provider/theme.dart';

class GroupList extends StatelessWidget {
  final sdkInstance = TIMUIKitCore.getSDKInstance();

  GroupList({Key? key}) : super(key: key);

  _jumpToChatPage(BuildContext context, String groupId) async {
    final res = await sdkInstance
        .getConversationManager()
        .getConversation(conversationID: "group_$groupId");
    if (res.code == 0) {
      final conversation = res.data;
      if (conversation != null) {
        Navigator.push(
            context,
            MaterialPageRoute(
              builder: (context) => Chat(selectedConversation: conversation),
            ));
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    final theme = Provider.of<DefaultThemeData>(context).theme;
    return Scaffold(
      appBar: AppBar(
          title: Text(
            imt("群聊"),
            style: const TextStyle(color: Colors.white, fontSize: 17),
          ),
          shadowColor: Colors.white,
          flexibleSpace: Container(
            decoration: BoxDecoration(
              gradient: LinearGradient(colors: [
                theme.lightPrimaryColor ?? CommonColor.lightPrimaryColor,
                theme.primaryColor ?? CommonColor.primaryColor
              ]),
            ),
          ),
          iconTheme: const IconThemeData(
            color: Colors.white,
          )),
      body: TIMUIKitGroup(
        onTapItem: (groupInfo) {
          final groupID = groupInfo.groupID;
          _jumpToChatPage(context, groupID);
        },
        emptyBuilder: (_) {
          return Center(
            child: Text(imt("暂无群聊")),
          );
        },
        groupCollector: (groupInfo) {
          final groupID = groupInfo?.groupID ?? "";
          return !groupID.contains("im_discuss_");
        },
      ),
    );
  }
}
文件：/im-flutter-uikit/lib/src/group_profile.dart
import 'package:provider/provider.dart';
import 'package:flutter/material.dart';
import 'package:tim_ui_kit/business_logic/life_cycle/group_profile_life_cycle.dart';
import 'package:tim_ui_kit/tim_ui_kit.dart';
import 'package:tim_ui_kit/ui/utils/color.dart';
import 'package:tim_ui_kit/ui/views/TIMUIKitGroupProfile/group_profile_widget.dart';
import 'package:tim_ui_kit/ui/views/TIMUIKitGroupProfile/widgets/tim_ui_group_profile_widget.dart';
import 'package:timuikit/src/pages/home_page.dart';
import 'package:timuikit/i18n/i18n_utils.dart';
import 'package:timuikit/src/chat.dart';
import 'package:timuikit/src/provider/theme.dart';
import 'package:timuikit/src/search.dart';

class GroupProfilePage extends StatelessWidget {
  final String groupID;
  final sdkInstance = TIMUIKitCore.getSDKInstance();
  final coreInstance = TIMUIKitCore.getInstance();

  GroupProfilePage({Key? key, required this.groupID}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    final theme = Provider.of<DefaultThemeData>(context).theme;
    return Scaffold(
        appBar: AppBar(
            title: Text(
              imt("群聊"),
              style: const TextStyle(color: Colors.white, fontSize: 17),
            ),
            shadowColor: Colors.white,
            flexibleSpace: Container(
              decoration: BoxDecoration(
                gradient: LinearGradient(colors: [
                  theme.lightPrimaryColor ?? CommonColor.lightPrimaryColor,
                  theme.primaryColor ?? CommonColor.primaryColor
                ]),
              ),
            ),
            iconTheme: const IconThemeData(
              color: Colors.white,
            )),
        body: SafeArea(
          child: TIMUIKitGroupProfile(
            lifeCycle: GroupProfileLifeCycle(didLeaveGroup: () async {
              Navigator.pushAndRemoveUntil(
                  context,
                  MaterialPageRoute(
                      builder: (context) => const HomePage(
                            pageIndex: 1,
                          )),
                  (route) => false);
            }),
            groupID: groupID,
            profileWidgetBuilder: GroupProfileWidgetBuilder(searchMessage: () {
              return TIMUIKitGroupProfileWidget.searchMessage(
                  (V2TimConversation? conversation) {
                Navigator.push(
                    context,
                    MaterialPageRoute(
                        builder: (context) => Search(
                              onTapConversation:
                                  (V2TimConversation conversation,
                                      V2TimMessage? targetMsg) {
                                Navigator.push(
                                    context,
                                    MaterialPageRoute(
                                      builder: (context) => Chat(
                                        selectedConversation: conversation,
                                        initFindingMsg: targetMsg,
                                      ),
                                    ));
                              },
                              conversation: conversation,
                            )));
              });
            }),
          ),
        ));
  }
}
文件：/im-flutter-uikit/lib/src/launch_page.dart
import 'package:flutter/material.dart';
import 'package:loading_animation_widget/loading_animation_widget.dart';
import 'package:tim_ui_kit/ui/utils/color.dart';
import 'package:timuikit/src/provider/theme.dart';
import 'package:provider/provider.dart';

class LaunchPage extends StatelessWidget{
  const LaunchPage({Key? key}) : super(key: key);


  @override
  Widget build(BuildContext context) {
    final theme = Provider.of<DefaultThemeData>(context).theme;
    return Container(
      decoration: BoxDecoration(
        color: hexToColor("ecf3fe"),
      ),
      child: Stack(
        alignment: Alignment.center,
        children: [
          Container(
            // 因为底部有波浪图， icon向上一点，感觉视觉上更协调
            margin: const EdgeInsets.only(bottom: 40),
            child: Column(
              mainAxisSize: MainAxisSize.min,
              crossAxisAlignment: CrossAxisAlignment.center,
              children: [
                LoadingAnimationWidget.fourRotatingDots(
                  color: theme.primaryColor ?? Colors.grey,
                  size: 76,
                )
              ],
            ),
          ),
          Positioned(
            bottom: 0,
              child: Image.asset(
                  "assets/logo_bottom.png",
                fit: BoxFit.fitWidth,
                width: MediaQuery.of(context).size.width,
              ),
          )
        ],
      ),
    );
  }

}文件：/im-flutter-uikit/lib/src/my_profile_detail.dart
import 'dart:math';

import 'package:adaptive_action_sheet/adaptive_action_sheet.dart';
import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:tim_ui_kit/tim_ui_kit.dart';
import 'package:tim_ui_kit/ui/controller/tim_uikit_personal_profile_controller.dart';
import 'package:tim_ui_kit/ui/utils/color.dart';
import 'package:tim_ui_kit/ui/views/TIMUIKitProfile/widget/tim_uikit_profile_widget.dart';
import 'package:tim_ui_kit/ui/widgets/avatar.dart';
import 'package:timuikit/i18n/i18n_utils.dart';
import 'package:timuikit/src/config.dart';
import 'package:timuikit/src/provider/login_user_Info.dart';
import 'package:timuikit/src/provider/theme.dart';
import 'package:provider/provider.dart';
import 'package:timuikit/utils/toast.dart';

class MyProfileDetail extends StatelessWidget {
  MyProfileDetail({Key? key}) : super(key: key);
  final CoreServicesImpl _coreServices = TIMUIKitCore.getInstance();
  final TIMUIKitPersonalProfileController _timUIKitPersonalProfileController =
      TIMUIKitPersonalProfileController();

  setRandomAvatar() async {
    int random = Random().nextInt(999);
    String avatar = "https://picsum.photos/id/$random/200/200";
    await _coreServices.setSelfInfo(
        userFullInfo: V2TimUserFullInfo.fromJson({
      "faceUrl": avatar,
    }));
  }

  showGenderChoseSheet(BuildContext context, TUITheme? theme) {
    showAdaptiveActionSheet(
      context: context,
      title: Text(imt("性别")),
      actions: <BottomSheetAction>[
        BottomSheetAction(
          title: Text(imt("男"), style: TextStyle(color: theme?.primaryColor)),
          onPressed: () {
            _timUIKitPersonalProfileController.updateGender(1);
            Navigator.pop(context);
          },
        ),
        BottomSheetAction(
          title: Text(imt("女"), style: TextStyle(color: theme?.primaryColor)),
          onPressed: () {
            _timUIKitPersonalProfileController.updateGender(2);
            Navigator.pop(context);
          },
        ),
      ],
      cancelAction: CancelAction(
        title: Text(imt("取消")),
      ), // onPressed parameter is optional by default will dismiss the ActionSheet
    );
  }

  String handleGender(int gender) {
    switch (gender) {
      case 0:
        return imt("未设置");
      case 1:
        return imt("男");
      case 2:
        return imt("女");
      default:
        return "";
    }
  }

  Future<bool?> showChangeAvatarDialog(BuildContext context) {
    return showDialog<bool>(
      context: context,
      builder: (context) {
        return CupertinoAlertDialog(
          title: Text(imt("TUIKIT 为你选择一个头像?")),
          actions: [
            CupertinoDialogAction(
              child: Text(imt("确定")),
              onPressed: () {
                setRandomAvatar();
                Navigator.of(context).pop();
              },
            ),
            CupertinoDialogAction(
              child: Text(imt("取消")),
              isDestructiveAction: true,
              onPressed: () {
                Navigator.of(context).pop();
              },
            ),
          ],
        );
      },
    );
  }

  void showCantModify() {
    Utils.toast(imt("无网络连接，无法修改"));
  }

  @override
  Widget build(BuildContext context) {
    final theme = Provider.of<DefaultThemeData>(context).theme;
    final loginUserInfoModel = Provider.of<LoginUserInfo>(context);
    final V2TimUserFullInfo loginUserInfo = loginUserInfoModel.loginUserInfo;
    return Scaffold(
      appBar: AppBar(
        iconTheme: const IconThemeData(
          color: Colors.white,
        ),
        shadowColor: theme.weakDividerColor,
        elevation: 1,
        title: Text(
          imt("个人资料"),
          style: const TextStyle(fontSize: IMDemoConfig.appBarTitleFontSize),
        ),
        flexibleSpace: Container(
          decoration: BoxDecoration(
            gradient: LinearGradient(colors: [
              theme.lightPrimaryColor ?? CommonColor.lightPrimaryColor,
              theme.primaryColor ?? CommonColor.primaryColor
            ]),
          ),
        ),
      ),
      body: Column(
        children: [
          GestureDetector(
            child: TIMUIKitOperationItem(
              operationName: TIM_t("头像"),
              operationRightWidget: SizedBox(
                width: 48,
                height: 48,
                child: Avatar(
                    faceUrl: loginUserInfo.faceUrl ?? "",
                    showName: loginUserInfo.nickName ?? ""),
              ),
            ),
            onTap: () => showChangeAvatarDialog(context),
          ),
          TIMUIKitProfileWidget.operationDivider(),
          GestureDetector(
            onTap: () async {
              _timUIKitPersonalProfileController.showTextInputBottomSheet(
                  context, imt("修改昵称"), imt("仅限中字、字母、数字和下划线"),
                  (String nickName) {
                _timUIKitPersonalProfileController.updateNickName(nickName);
              });
            },
            child: TIMUIKitOperationItem(
              operationName: TIM_t("昵称"),
              operationRightWidget: Text(loginUserInfo.nickName ?? ""),
            ),
          ),
          TIMUIKitProfileWidget.userAccountBar(
            loginUserInfo.userID ?? "",
          ),
          TIMUIKitProfileWidget.operationDivider(),
          GestureDetector(
            onTap: () async {
              _timUIKitPersonalProfileController.showTextInputBottomSheet(
                  context, imt("修改签名"), imt("仅限中字、字母、数字和下划线"),
                  (String selfSignature) {
                _timUIKitPersonalProfileController
                    .updateSelfSignature(selfSignature);
              });
            },
            child: TIMUIKitOperationItem(operationName: TIM_t("个性签名"),
              operationRightWidget: Text(loginUserInfo.selfSignature ?? imt("这个人很懒，什么也没写")))
          ),
          GestureDetector(
              onTap: () async {
                showGenderChoseSheet(context, theme);
              },
              child: TIMUIKitProfileWidget.genderBarWithArrow(loginUserInfo.gender ?? 0))
        ],
      ),
    );
  }
}
文件：/im-flutter-uikit/lib/src/newContact.dart
// ignore_for_file: file_names

import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:tim_ui_kit/tim_ui_kit.dart';
import 'package:tim_ui_kit/ui/utils/color.dart';
import 'package:timuikit/i18n/i18n_utils.dart';
import 'package:timuikit/src/provider/theme.dart';

class NewContact extends StatelessWidget {
  const NewContact({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    final theme = Provider.of<DefaultThemeData>(context).theme;
    return Scaffold(
      appBar: AppBar(
          title: Text(
            imt("新的联系人"),
            style: const TextStyle(color: Colors.white, fontSize: 17),
          ),
          shadowColor: Colors.white,
          flexibleSpace: Container(
            decoration: BoxDecoration(
              gradient: LinearGradient(colors: [
                theme.lightPrimaryColor ?? CommonColor.lightPrimaryColor,
                theme.primaryColor ?? CommonColor.primaryColor
              ]),
            ),
          ),
          iconTheme: const IconThemeData(
            color: Colors.white,
          )),
      body: TIMUIKitNewContact(
        emptyBuilder: (c) {
          return Center(
            child: Text(imt("暂无新联系人")),
          );
        },
      ),
    );
  }
}
文件：/im-flutter-uikit/lib/src/profile.dart
// ignore_for_file: unused_import

import 'dart:math';

import 'package:connectivity_plus/connectivity_plus.dart';
import 'package:provider/provider.dart';

import 'package:flutter/material.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:tim_ui_kit/tim_ui_kit.dart';
import 'package:tim_ui_kit/ui/utils/color.dart';

import 'package:timuikit/src/pages/login.dart';
import 'package:timuikit/src/provider/login_user_Info.dart';
import 'package:timuikit/src/provider/theme.dart';
import 'package:timuikit/src/routes.dart';
import 'package:timuikit/utils/theme.dart';
import 'package:timuikit/utils/toast.dart';

import 'package:adaptive_action_sheet/adaptive_action_sheet.dart';
import 'package:timuikit/i18n/i18n_utils.dart';

import 'about.dart';
import 'my_profile_detail.dart';
import 'pages/skin/skin_page.dart';

class MyProfile extends StatefulWidget {
  const MyProfile({Key? key}) : super(key: key);

  @override
  State<StatefulWidget> createState() => _ProfileState();
}

class _ProfileState extends State<MyProfile> {
  final CoreServicesImpl _coreServices = TIMUIKitCore.getInstance();
  final V2TIMManager sdkInstance = TIMUIKitCore.getSDKInstance();
  final TIMUIKitProfileController _timuiKitProfileController =
      TIMUIKitProfileController();
  String? userID;

  String _getAllowText(int? allowType) {
    if (allowType == 0) {
      return imt("同意任何用户加好友");
    }

    if (allowType == 1) {
      return imt("需要验证");
    }

    if (allowType == 2) {
      return imt("拒绝任何人加好友");
    }

    return imt("未知");
  }

  _handleLogout() async {
    final res = await _coreServices.logout();
    if (res.code == 0) {
      try {
        Future<SharedPreferences> _prefs = SharedPreferences.getInstance();
        SharedPreferences prefs = await _prefs;
        prefs.remove('smsLoginUserId');
        prefs.remove('smsLoginToken');
        prefs.remove('smsLoginPhone');
        prefs.remove('channelListMain');
        prefs.remove('discussListMain');
      } catch (err) {
        Utils.log("someError");
        Utils.log(err);
      }
      Routes().directToLoginPage();

      // Navigator.of(context).pushAndRemoveUntil(
      //   MaterialPageRoute(builder: (BuildContext context) => const LoginPage()),
      //   ModalRoute.withName('/'),
      // );
    }
  }

  getLoginUser() async {
    final res = await sdkInstance.getLoginUser();
    if (res.code == 0) {
      setState(() {
        userID = res.data;
      });
    }
  }

  changeFriendVerificationMethod(int allowType) async {
    _timuiKitProfileController.changeFriendVerificationMethod(allowType);
  }

  showApplicationTypeSheet(theme) async {
    const allowAny = 0;
    const neddConfirm = 1;
    const denyAny = 2;

    showAdaptiveActionSheet(
      context: context,
      actions: <BottomSheetAction>[
        BottomSheetAction(
          title: Text(
            imt("同意任何用户加好友"),
            style: TextStyle(color: theme.primaryColor, fontSize: 18),
          ),
          onPressed: () {
            changeFriendVerificationMethod(allowAny);
            Navigator.pop(context);
          },
        ),
        BottomSheetAction(
            title: Text(
              imt("需要验证"),
              style: TextStyle(color: theme.primaryColor, fontSize: 18),
            ),
            onPressed: () {
              changeFriendVerificationMethod(neddConfirm);
              Navigator.pop(context);
            }),
        BottomSheetAction(
          title: Text(
            imt("拒绝任何人加好友"),
            style: TextStyle(color: theme.primaryColor, fontSize: 18),
          ),
          onPressed: () {
            changeFriendVerificationMethod(denyAny);
            Navigator.pop(context);
          },
        ),
      ],
      cancelAction: CancelAction(
        title: Text(
          imt("取消"),
          style: const TextStyle(fontSize: 18),
        ),
      ), // onPressed parameter is optional by default will dismiss the ActionSheet
    );
  }

  @override
  void initState() {
    super.initState();
    getLoginUser();
  }

  @override
  Widget build(BuildContext context) {
    if (userID == null) {
      return Container();
    }
    final themeType = Provider.of<DefaultThemeData>(context).currentThemeType;
    final theme = Provider.of<DefaultThemeData>(context).theme;
    final loginUserInfoModel = Provider.of<LoginUserInfo>(context);
    final V2TimUserFullInfo loginUserInfo = loginUserInfoModel.loginUserInfo;
    final int? allowType = loginUserInfo.allowType;
    final allowText = _getAllowText(allowType);

    return Column(
      children: [
        GestureDetector(
          onTap: () {
            Navigator.push(
              context,
              MaterialPageRoute(
                  builder: (context) => MyProfileDetail()),
            );
          },
          child: TIMUIKitProfileUserInfoCard(
            userInfo: loginUserInfo,
            showArrowRightIcon: true,
          ),
        ),
        // 好友验证方式选
        Container(
          margin: const EdgeInsets.symmetric(vertical: 10),
          child: InkWell(
            onTap: () {
              showApplicationTypeSheet(theme);
            },
            child: TIMUIKitOperationItem(
              operationName: imt("加我为好友时需要验证"),
              operationRightWidget: Text(allowText),
            ),
          ),
        ),
        InkWell(
          onTap: () {
            Navigator.push(
              context,
              MaterialPageRoute(
                builder: (context) => const SkinPage(),
              ),
            );
          },
          child: TIMUIKitOperationItem(
            operationName: imt("更换皮肤"),
            operationRightWidget: Text(DefTheme.defaultThemeName[themeType]!,
                style: TextStyle(color: theme.primaryColor)),
          ),
        ),
        const SizedBox(
          height: 10,
        ),
        InkWell(
          onTap: () {
            Navigator.push(
              context,
              MaterialPageRoute(
                builder: (context) => const About(),
              ),
            );
          },
          child: TIMUIKitOperationItem(
            operationName: imt("关于腾讯云 · IM"),
            operationRightWidget: const Text(""),
          ),
        ),
        const SizedBox(
          height: 10,
        ),
        InkWell(
          onTap: _handleLogout,
          child: Container(
            alignment: Alignment.center,
            padding: const EdgeInsets.symmetric(vertical: 15),
            decoration: BoxDecoration(
                color: Colors.white,
                border:
                    Border(bottom: BorderSide(color: hexToColor("E5E5E5")))),
            child: Text(
              imt("退出登录"),
              style: TextStyle(color: hexToColor("FF584C"), fontSize: 17),
            ),
          ),
        )
      ],
    );
  }
}
文件：/im-flutter-uikit/lib/src/routes.dart
import 'package:flutter/material.dart';

class Routes extends ChangeNotifier {
  static String _pageType = "";
  Routes._internal();

  static late final Routes _instance = Routes._internal();

  factory Routes() {
    return _instance;
  }

  String get pageType {
    return _pageType;
  }

  directToHomePage() {
    _pageType = "homePage";
    notifyListeners();
  }

  directToLoginPage() {
    _pageType = "loginPage";
    notifyListeners();
  }
}
文件：/im-flutter-uikit/lib/src/search.dart


import 'package:flutter/material.dart';
import 'package:tim_ui_kit/tim_ui_kit.dart';
import 'package:timuikit/i18n/i18n_utils.dart';
import 'package:timuikit/src/provider/theme.dart';
import 'package:provider/provider.dart';

class Search extends StatelessWidget {
  const Search(
      {Key? key,
      this.conversation,
      required this.onTapConversation,
      this.initKeyword})
      : super(key: key);

  /// if assign a specific conversation, it will only search in it; otherwise search globally
  final V2TimConversation? conversation;

  /// the callback after clicking the conversation item to specific message in it
  final Function(V2TimConversation, V2TimMessage?) onTapConversation;

  /// initial keyword for detail search
  final String? initKeyword;

  @override
  Widget build(BuildContext context) {
    final isConversation = (conversation != null);

    final theme = Provider.of<DefaultThemeData>(context).theme;
    return Scaffold(
      appBar: AppBar(
        iconTheme: const IconThemeData(
          color: Colors.white,
        ),
        elevation: 0,
        backgroundColor: theme.primaryColor,
        title: Text(
          isConversation
              ? (conversation?.showName ??
                  conversation?.conversationID ??
                  imt("相关聊天记录"))
              : imt("全局搜索"),
          style: const TextStyle(
            color: Colors.white,
            fontSize: 17,
          ),
        ),
      ),
      body: isConversation
          ? TIMUIKitSearchMsgDetail(
              currentConversation: conversation!,
              onTapConversation: onTapConversation,
              keyword: initKeyword ?? "",
            )
          : TIMUIKitSearch(
              onEnterConversation:
                  (V2TimConversation conversation, String keyword) {
                Navigator.push(
                    context,
                    MaterialPageRoute(
                      builder: (context) => Search(
                        onTapConversation: onTapConversation,
                        conversation: conversation,
                        initKeyword: keyword,
                      ),
                    ));
              },
              onTapConversation: onTapConversation,
              conversation: conversation,
            ),
    );
  }
}
文件：/im-flutter-uikit/lib/src/share.dart
// ignore_for_file: prefer_typing_uninitialized_variables

import 'package:flutter/material.dart';
import 'package:tim_ui_kit/ui/utils/color.dart';

/// 点击事件
typedef OnItemClickListener = void Function(int index);
typedef DoAction = void Function(ShareType shareType, ShareInfo shareInfo);
// ignore: constant_identifier_names
enum ShareType { SESSION, TIMELINE, COPY_LINK, DOWNLOAD }

/// 定义分享内容
class ShareInfo {
  /// 标题
  String title;

  /// 连接
  String url;

  /// 图片
  var img;

  /// 描述
  String describe;

  ShareInfo(this.title, this.url, {this.img, this.describe = ""});

  static ShareInfo fromJson(Map map) {
    return ShareInfo(map['title'], map['url'],
        img: map['img'], describe: map['describe']);
  }
}

/// 分享操作
class ShareOpt {
  final String title;
  final Widget img;
  final DoAction doAction;
  final ShareType shareType;

  const ShareOpt(
      {this.title = "",
      required this.img,
      this.shareType = ShareType.SESSION,
      required this.doAction});
}

/// 弹出窗
class ShareWidget extends StatefulWidget {
  final List<ShareOpt> list;
  final ShareInfo shareInfo;

  const ShareWidget(this.shareInfo, {Key? key, required this.list})
      : super(key: key);

  @override
  _ShareWidgetState createState() => _ShareWidgetState();
}

class _ShareWidgetState extends State<ShareWidget> {
  @override
  void initState() {
    super.initState();
  }

  @override
  Widget build(BuildContext context) {
    return SizedBox(
      height: 200,
      child: Container(
        // margin: const EdgeInsets.only(left: 10, right: 10),
        //边框设置
        decoration: BoxDecoration(
          //背景
          color: hexToColor('E9E9EA'),
          //设置四周边框
          border: Border.all(
            width: 1,
            color: hexToColor('E9E9EA'),
          ),
          //设置四周圆角角度
          borderRadius: const BorderRadius.only(
            topLeft: Radius.circular(10.0),
            topRight: Radius.circular(10.0),
          ),
        ),
        //设置 child 居中
        alignment: Alignment.center,
        child: Padding(
          padding: const EdgeInsets.all(10.0),
          child: Column(
            children: [
              const Center(
                child: Text(
                  '分享到',
                  style: TextStyle(fontSize: 18),
                ),
              ),
              const SizedBox(
                height: 20,
              ),
              Expanded(
                child: GridView.builder(
                  gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
                      crossAxisCount: 4,
                      mainAxisSpacing: 5.0,
                      childAspectRatio: 1.0),
                  itemBuilder: (BuildContext context, int index) {
                    return GestureDetector(
                      behavior: HitTestBehavior.opaque, // 空白地方也可以点击
                      onTap: () {
                        Navigator.pop(context);
                        widget.list[index].doAction(
                            widget.list[index].shareType, widget.shareInfo);
                      },
                      child: Column(
                        children: <Widget>[
                          Padding(
                            padding:
                                const EdgeInsets.fromLTRB(0.0, 6.0, 0.0, 10.0),
                            child: Container(
                              alignment: Alignment.center,
                              height: 50,
                              width: 50,
                              decoration: const BoxDecoration(
                                  color: Colors.white,
                                  borderRadius:
                                      BorderRadius.all(Radius.circular(5))),
                              child: widget.list[index].img,
                            ),
                          ),
                          Text(widget.list[index].title)
                        ],
                      ),
                    );
                  },
                  itemCount: widget.list.length,
                ),
              )
            ],
          ),
        ),
      ),
    );
  }
}
文件：/im-flutter-uikit/lib/src/user_profile.dart

import 'package:provider/provider.dart';
import 'package:flutter/material.dart';
import 'package:tim_ui_kit/tim_ui_kit.dart';
import 'package:tim_ui_kit/ui/utils/color.dart';
import 'package:tim_ui_kit/ui/utils/permission.dart';
import 'package:tim_ui_kit/ui/views/TIMUIKitProfile/profile_widget.dart';
import 'package:tim_ui_kit/ui/views/TIMUIKitProfile/widget/tim_uikit_profile_widget.dart';
import 'package:tim_ui_kit/ui/widgets/toast.dart';
import 'package:tim_ui_kit_calling_plugin/enum/tim_uikit_trtc_calling_scence.dart';
import 'package:tim_ui_kit_calling_plugin/tim_ui_kit_calling_plugin.dart';
import 'package:timuikit/i18n/i18n_utils.dart';
import 'package:timuikit/src/provider/theme.dart';
import 'package:timuikit/src/search.dart';
import 'package:timuikit/utils/platform.dart';
import 'package:timuikit/utils/push/push_constant.dart';
import 'chat.dart';

class UserProfile extends StatefulWidget {
  final String userID;
  const UserProfile({Key? key, required this.userID}) : super(key: key);
  @override
  State<StatefulWidget> createState() => UserProfileState();
}

class UserProfileState extends State<UserProfile> {
  final TIMUIKitProfileController _timuiKitProfileController =
      TIMUIKitProfileController();
  TUICalling? _calling;
  final V2TIMManager sdkInstance = TIMUIKitCore.getSDKInstance();
  String? newUserMARK;

  _itemClick(
      String id, BuildContext context, V2TimConversation conversation) async {
    switch (id) {
      case "sendMsg":
        Navigator.push(
            context,
            MaterialPageRoute(
              builder: (context) => Chat(
                selectedConversation: conversation,
              ),
            ));
        break;
      case "deleteFriend":
        _timuiKitProfileController.deleteFriend(widget.userID).then((res) {
          if (res == null) {
            throw Error();
          }
          if (res.resultCode == 0) {
            Toast.showToast(ToastType.success, imt("好友删除成功"), context);
            _timuiKitProfileController.loadData(widget.userID);
          } else {
            throw Error();
          }
        }).catchError((error) {
          Toast.showToast(ToastType.fail, imt("好友添加失败"), context);
        });
        break;
      case "audioCall":
        final user = await sdkInstance.getLoginUser();
        final myId = user.data;
        OfflinePushInfo offlinePush = OfflinePushInfo(
          title: "",
          desc: imt("邀请你语音通话"),
          ext: "{\"conversationID\": \"c2c_$myId\"}",
          disablePush: false,
          androidOPPOChannelID: PushConfig.OPPOChannelID,
          ignoreIOSBadge: false,
        );

         await Permissions.checkPermission(
            context, Permission.microphone.value);

        _calling?.call(widget.userID, CallingScenes.Audio, offlinePush);
        break;
      case "videoCall":
        final user = await sdkInstance.getLoginUser();
        final myId = user.data;
        OfflinePushInfo offlinePush = OfflinePushInfo(
          title: "",
          desc: imt("邀请你视频通话"),
          ext: "{\"conversationID\": \"c2c_$myId\"}",
          androidOPPOChannelID: PushConfig.OPPOChannelID,
          disablePush: false,
          ignoreIOSBadge: false,
        );

        await Permissions.checkPermission(context, Permission.camera.value);
        await Permissions.checkPermission(
            context, Permission.microphone.value);
            
        _calling?.call(widget.userID, CallingScenes.Video, offlinePush);
        break;
    }
  }

  _buildBottomOperationList(
      BuildContext context, V2TimConversation conversation, theme) {
    final operationList = [
      {
        "label": imt("发送消息"),
        "id": "sendMsg",
      },
      {
        "label": imt("语音通话"),
        "id": "audioCall",
      },
      {
        "label": imt("视频通话"),
        "id": "videoCall",
      },
    ];

    return operationList.map((e) {
      return InkWell(
        onTap: () {
          _itemClick(e["id"] ?? "", context, conversation);
        },
        child: Container(
          alignment: Alignment.center,
          padding: const EdgeInsets.symmetric(vertical: 15),
          decoration: BoxDecoration(
              color: Colors.white,
              border:
                  Border(bottom: BorderSide(color: theme.weakDividerColor))),
          child: Text(
            e["label"] ?? "",
            style: TextStyle(
                color: e["id"] != "deleteFriend"
                    ? theme.primaryColor
                    : theme.cautionColor,
                fontSize: 17),
          ),
        ),
      );
    }).toList();
  }

  handleTapRemarkBar(BuildContext context) async {
    _timuiKitProfileController.showTextInputBottomSheet(
        context, imt("修改备注"), imt("支持数字、英文、下划线"), (String remark) {
      newUserMARK = remark;
      _timuiKitProfileController.updateRemarks(widget.userID, remark);
    });
  }

  handleTapSearch(BuildContext context) async {
    _timuiKitProfileController.showTextInputBottomSheet(
        context, imt("修改备注"), imt("支持数字、英文、下划线"), (String remark) {
      newUserMARK = remark;
      _timuiKitProfileController.updateRemarks(widget.userID, remark);
    });
  }

  _initTUICalling() async {
    final isAndroidEmulator = await PlatformUtils.isAndroidEmulator();
    if (!isAndroidEmulator) {
      _calling = TUICalling();
    }
  }

  @override
  void initState() {
    // ignore: todo
    // TODO: implement initState
    super.initState();
    _initTUICalling();
  }

  @override
  Widget build(BuildContext context) {
    final theme = Provider.of<DefaultThemeData>(context).theme;
    return Scaffold(
      appBar: AppBar(
        shadowColor: Colors.white,
        title: Text(
          imt("详细资料"),
          style: const TextStyle(color: Colors.white, fontSize: 17),
        ),
        flexibleSpace: Container(
          decoration: BoxDecoration(
            gradient: LinearGradient(colors: [
              theme.lightPrimaryColor ?? CommonColor.lightPrimaryColor,
              theme.primaryColor ?? CommonColor.primaryColor
            ]),
          ),
        ),
        iconTheme: const IconThemeData(
          color: Colors.white,
        ),
        leading: IconButton(
          padding: const EdgeInsets.only(left: 16),
          icon: Image.asset(
            'images/arrow_back.png',
            package: 'tim_ui_kit',
            height: 34,
            width: 34,
          ),
          onPressed: () {
            Navigator.pop(context, newUserMARK);
          },
        ),
      ),
      body: Container(
        color: theme.weakBackgroundColor,
        child: TIMUIKitProfile(
          userID: widget.userID,
          profileWidgetBuilder: ProfileWidgetBuilder(
            searchBar: (conversation) => TIMUIKitProfileWidget.searchBar(context, conversation,
                    handleTap: () {
                  Navigator.push(
                      context,
                      MaterialPageRoute(
                        builder: (context) => Search(
                            conversation: conversation,
                            onTapConversation:
                                (V2TimConversation conversation,
                                    [V2TimMessage? targetMsg]) {
                              Navigator.push(
                                  context,
                                  MaterialPageRoute(
                                    builder: (context) => Chat(
                                      selectedConversation: conversation,
                                      initFindingMsg: targetMsg,
                                    ),
                                  ));
                            }),
                      ));
                }),
            customBuilderOne: (bool isFriend, V2TimFriendInfo friendInfo, V2TimConversation conversation){
              if(!isFriend){
                return Container();
              }
              return Column(
                  children: _buildBottomOperationList(
                  context, conversation, theme)
              );
            }
          ),
          controller: _timuiKitProfileController,
          profileWidgetsOrder: const [
            ProfileWidgetEnum.userInfoCard,
            ProfileWidgetEnum.operationDivider,
            ProfileWidgetEnum.remarkBar,
            ProfileWidgetEnum.genderBar,
            ProfileWidgetEnum.birthdayBar,
            ProfileWidgetEnum.operationDivider,
            ProfileWidgetEnum.searchBar,
            ProfileWidgetEnum.operationDivider,
            ProfileWidgetEnum.addToBlockListBar,
            ProfileWidgetEnum.pinConversationBar,
            ProfileWidgetEnum.messageMute,
            ProfileWidgetEnum.operationDivider,
            ProfileWidgetEnum.customBuilderOne,
            ProfileWidgetEnum.addAndDeleteArea
          ],
        ),
      ),
    );
  }
}
文件：/im-flutter-uikit/lib/src/discuss/create_topic.dart
import 'dart:convert';
import 'package:provider/provider.dart';

import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:tim_ui_kit/tim_ui_kit.dart';
import 'package:tim_ui_kit/ui/utils/color.dart';
import 'package:timuikit/openSourceTmp/chat.dart';
import 'package:timuikit/src/provider/theme.dart';
import 'package:timuikit/utils/discuss.dart';
import 'package:timuikit/utils/toast.dart';
import 'package:timuikit/i18n/i18n_utils.dart';

class CreateTopic extends StatefulWidget {
  final String disscussId;
  final String message;
  final List<String> messageIdList;
  const CreateTopic({
    Key? key,
    required this.disscussId,
    required this.message,
    required this.messageIdList,
  }) : super(key: key);
  @override
  State<StatefulWidget> createState() => CreateTopicState();
}

class CreateTopicState extends State<CreateTopic> {
  final TextEditingController controller = TextEditingController();
  String disscussId = "";
  final V2TIMManager sdkInstance = TIMUIKitCore.getSDKInstance();
  final List<Map<String, String>> allTags = [
    {"text": imt("性能"), "color": "229800"},
    {"text": "BUG", "color": "b61903"},
    {"text": "Flutter", "color": "5fe5f4"},
    {"text": "TRTC", "color": "0279a4"},
    {"text": "Electron", "color": "d4c5fa"},
    {"text": "PC", "color": "fbca05"},
    {"text": "iOS", "color": "2b2b2b"},
    {"text": "Android", "color": "e4f0fe"}
  ];
  final FocusNode focusNode = FocusNode();
  List selected = [imt("性能")];
  String title = '';
  List<Map<String, dynamic>> discussList = [];
  String currentSelectedDis = '';
  List<String> messageIdList = [];
  List<V2TimMessage> messageList = [];

  @override
  initState() {
    if (widget.message.isNotEmpty) {
      controller.value = TextEditingValue(text: widget.message);
    }
    setState(() {
      title = widget.message;
      disscussId = widget.disscussId;
      messageIdList = widget.messageIdList;
    });
    getMessages();
    getDiscussList();
    super.initState();
  }

  getMessages() async {
    if (widget.messageIdList.isNotEmpty) {
      V2TimValueCallback<List<V2TimMessage>> res =
          await sdkInstance.getMessageManager().findMessages(
                messageIDList: widget.messageIdList,
              );
      if (res.code == 0) {
        String option8 = res.data!.length.toString();
        Utils.log(imt_para("获取到的消息:{{option8}}", "获取到的消息:$option8")(
            option8: option8));
        setState(() {
          messageList = res.data!;
        });
      }
    }
  }

  tagTap(String text) {
    focusNode.unfocus();
    List selectedCopy = selected;
    if (selected.contains(text)) {
      selectedCopy.remove(text);
    } else {
      selectedCopy.add(text);
    }
    setState(() {
      selected = selectedCopy;
    });
  }

  getDiscussList() async {
    Map<String, dynamic> res = await DisscussApi.getDiscussList(
      offset: 0,
      limit: 100,
    );
    int code = res['code'];
    String message = res['message'];
    Map<String, dynamic> data = res['data'];
    if (code == 0) {
      List<Map<String, dynamic>> list =
          List<Map<String, dynamic>>.from(data['rows']);
      String select = '';
      String id = disscussId;
      for (var item in list) {
        if (item['imGroupId'] == disscussId) {
          select = item['name'];
        }
      }
      if (select == '') {
        select = list[0]['name'];
        id = list[0]['imGroupId'];
      }
      setState(() {
        discussList = list;
        currentSelectedDis = select;
        disscussId = id;
      });
    } else {
      String option8 = message;
      Utils.toast(imt_para("获取讨论区列表失败 {{option8}}", "获取讨论区列表失败 $option8")(
          option8: option8));
    }
  }

  Widget tagBuilder({
    required String color,
    required String text,
  }) {
    return InkWell(
      onTap: () {
        tagTap(text);
      },
      child: Container(
        alignment: Alignment.center,
        height: 25,
        margin: const EdgeInsets.all(5),
        padding: const EdgeInsets.fromLTRB(10, 4, 10, 4),
        width: 70,
        decoration: BoxDecoration(
          color: Color(int.parse(color, radix: 16)).withAlpha(255),
          borderRadius: const BorderRadius.all(Radius.circular(12.5)),
          border: selected.contains(text)
              ? Border.all(
                  width: 2,
                  style: BorderStyle.solid,
                  color: Colors.amber,
                )
              : Border.all(
                  width: 0,
                  style: BorderStyle.none,
                ),
        ),
        child: Text(
          text,
          style: const TextStyle(
            fontSize: 15,
            textBaseline: TextBaseline.alphabetic,
            color: Colors.white,
            backgroundColor: Colors.transparent,
            height: 1,
          ),
        ),
      ),
    );
  }

  titleChange(text) {
    setState(() {
      title = text;
    });
  }

  directToMessage(V2TimConversation conversation) {
    Navigator.pushReplacement(
      context,
      MaterialPageRoute(
        builder: (context) => Chat(selectedConversation: conversation),
      ),
    );
  }

  Future<V2TimConversation> getConversion(String conversationID) async {
    final data = await sdkInstance.getConversationManager().getConversation(
          conversationID: conversationID,
        );
    return data.data!;
  }

  createTopic() async {
    if (title == '') {
      Utils.toast(imt("请完善话题标题"));
      return;
    }
    if (selected.isEmpty) {
      Utils.toast(imt("必须选择一个标签"));
      return;
    }
    V2TimValueCallback<String> data = await sdkInstance.getLoginUser();
    String? userId = data.data;

    if (userId!.isNotEmpty) {
      V2TimValueCallback<List<V2TimUserFullInfo>> userInfo =
          await sdkInstance.getUsersInfo(userIDList: [userId]);

      Map<String, dynamic> res = await DisscussApi.addTopic(
        disscussImGroupId: disscussId,
        title: title,
        tags: jsonEncode(selected),
        creator: jsonEncode(userInfo.data![0].toJson()),
        aboutMessages: jsonEncode(messageList.map((e) => e.toJson()).toList()),
      );

      int code = res['code'];
      String message = res['message'];
      Map<String, dynamic> data = res["data"];
      Utils.log(data);
      if (code != 0) {
        final String option8 = message;
        Utils.toast(imt_para("创建话题失败 {{option8}}", "创建话题失败 $option8")(
            option8: option8));
      } else {
        String imGroupId = data['imGroupId'];
        V2TimConversation conversation =
            await getConversion('group_$imGroupId');
        Utils.toast(imt("创建话题成功"));
        directToMessage(conversation);
      }
    } else {
      Utils.toast(imt("创建者异常"));
    }
  }

  onActionItemTap(item) {
    setState(() {
      currentSelectedDis = item['name'];
      disscussId = item['imGroupId'];
    });
    Navigator.pop(context);
  }

  showDiscussSelector() {
    return showCupertinoModalPopup(
      context: context,
      builder: (BuildContext context) {
        return CupertinoActionSheet(
          title: Text(imt("选择讨论区")),
          actions: discussList
              .map(
                (e) => CupertinoActionSheetAction(
                  onPressed: () {
                    onActionItemTap(e);
                  },
                  child: Text(e['name']),
                  isDefaultAction: e['name'] == currentSelectedDis,
                ),
              )
              .toList(),
        );
      },
    );
  }

  @override
  Widget build(BuildContext context) {
    final theme = Provider.of<DefaultThemeData>(context).theme;
    return Scaffold(
      appBar: AppBar(
        iconTheme: const IconThemeData(
          color: Colors.white,
        ),
        shadowColor: theme.weakBackgroundColor,
        elevation: 1,
        title: Text(
          imt("创建话题"),
          style: const TextStyle(color: Colors.white, fontSize: 17),
        ),
        flexibleSpace: Container(
          decoration: BoxDecoration(
            gradient: LinearGradient(colors: [
              theme.lightPrimaryColor ?? CommonColor.lightPrimaryColor,
              theme.primaryColor ?? CommonColor.primaryColor
            ]),
          ),
        ),
      ),
      bottomNavigationBar: Container(
        height: messageList.isEmpty ? 65 : 300,
        padding: const EdgeInsets.all(10),
        child: Column(
          children: [
            if (messageList.isNotEmpty)
              Text(
                imt("---- 相关讨论 ----"),
                style: TextStyle(color: theme.weakTextColor),
              ),
            // if (messageList.isNotEmpty) MessageViewer(messageList: messageList),
            SizedBox(
              height: 45,
              child: Row(
                children: [
                  Expanded(
                    child: ElevatedButton(
                      onPressed: createTopic,
                      child: Text(imt("创建话题")),
                    ),
                  ),
                ],
              ),
            )
          ],
        ),
      ),
      body: GestureDetector(
        behavior: HitTestBehavior.translucent,
        onTap: () {
          focusNode.unfocus();
        },
        child: Container(
          padding: const EdgeInsets.all(22),
          child: Column(
            children: [
              Row(
                mainAxisAlignment: MainAxisAlignment.start,
                children: [
                  Expanded(
                    child: OutlinedButton(
                      onPressed: showDiscussSelector,
                      style: const ButtonStyle(
                        alignment: Alignment.centerLeft,
                      ),
                      child: Row(
                        children: [
                          Expanded(
                            child: Text(
                              currentSelectedDis,
                            ),
                          ),
                          const Icon(Icons.expand_more_sharp)
                        ],
                      ),
                    ),
                  )
                ],
              ),
              TextField(
                keyboardType: TextInputType.text,
                focusNode: focusNode,
                maxLines: 3,
                maxLength: 100,
                controller: controller,
                onChanged: titleChange,
                decoration: InputDecoration(
                  hintText: imt("填写话题标题"),
                  filled: true,
                  fillColor: theme.weakBackgroundColor,
                  focusedBorder: const OutlineInputBorder(
                    borderSide: BorderSide(color: Colors.transparent, width: 0),
                  ),
                  enabledBorder: const OutlineInputBorder(
                    borderSide: BorderSide(color: Colors.transparent, width: 0),
                  ),
                ),
              ),
              Container(
                alignment: Alignment.topLeft,
                child: InkWell(
                  child: Text(
                    imt("+标签（至少添加一个）"),
                    textAlign: TextAlign.left,
                    style: TextStyle(
                      color: theme.primaryColor,
                      fontSize: 12,
                    ),
                  ),
                ),
              ),
              Container(
                padding: const EdgeInsets.all(10),
                alignment: Alignment.topLeft,
                child: Wrap(
                  children: allTags.map((e) {
                    return tagBuilder(color: e['color']!, text: e['text']!);
                  }).toList(),
                ),
              )
            ],
          ),
        ),
      ),
    );
  }
}
文件：/im-flutter-uikit/lib/src/discuss/topic.dart
// ignore_for_file: prefer_typing_uninitialized_variables

import 'package:connectivity_plus/connectivity_plus.dart';
import 'package:provider/provider.dart';

import 'package:flutter/material.dart';
import 'package:intl/intl.dart';
import 'package:loading_indicator/loading_indicator.dart';
import 'dart:convert';
import 'package:tim_ui_kit/tim_ui_kit.dart';
import 'package:tim_ui_kit/ui/utils/color.dart';
import 'package:timuikit/openSourceTmp/chat.dart';
import 'package:timuikit/src/discuss/create_topic.dart';
import 'package:timuikit/src/provider/theme.dart';
import 'package:timuikit/utils/discuss.dart';
import 'package:timuikit/utils/toast.dart';
import 'package:timuikit/i18n/i18n_utils.dart';

class Topic extends StatefulWidget {
  const Topic(this.imGroupId, {Key? key}) : super(key: key);
  final String imGroupId;
  @override
  State<StatefulWidget> createState() => TopicState();
}

class TopicState extends State<Topic> {
  Map<String, dynamic>? disscussInfo;
  V2TimGroupInfo? groupInfo;
  final V2TIMManager sdkInstance = TIMUIKitCore.getSDKInstance();
  final Connectivity _connectivity = Connectivity();
  var subscription;
  bool hasInternet = true;

  @override
  void initState() {
    super.initState();
    init();
    subscription =
        _connectivity.onConnectivityChanged.listen((ConnectivityResult result) {
      if (result == ConnectivityResult.none) {
        setState(() {
          hasInternet = false;
        });
      } else {
        setState(() {
          hasInternet = true;
        });
      }
    });
  }

  init() {
    getDissInfo();
    getGroupInfo();
  }

  getDissInfo() async {
    Map<String, dynamic> data =
        await DisscussApi.getDisscussInfo(imGroupId: widget.imGroupId);
    if (data['data'] != null && data['data']['uuid'] != null) {
      setState(() {
        disscussInfo = data['data'];
      });
    }
  }

  getGroupInfo() async {
    V2TimValueCallback<List<V2TimGroupInfoResult>> res = await sdkInstance
        .getGroupManager()
        .getGroupsInfo(groupIDList: List.from([widget.imGroupId]));
    if (res.code == 0 && res.data![0].resultCode == 0) {
      setState(() {
        groupInfo = res.data![0].groupInfo;
      });
    } else {
      // Utils.toast("${res.desc} ${res.data![0].resultMessage}");
    }
  }

  List<Widget>? getAction(BuildContext context) {
    if (groupInfo != null) {
      return [
        groupInfo!.role == 300 || groupInfo!.role == 400
            ? IconButton(onPressed: openCreate, icon: const Icon(Icons.add))
            : Container(),
      ];
    }
    return [];
  }

  openCreate() {
    String? disscussId = disscussInfo!['imGroupId'];
    if (disscussId == null) {
      Utils.toast(imt("讨论区参数异常"));
      return;
    }
    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) => CreateTopic(
          disscussId: disscussId,
          message: "",
          messageIdList: const [],
        ),
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    final theme = Provider.of<DefaultThemeData>(context).theme;
    return DefaultTabController(
      length: 2,
      child: Scaffold(
        appBar: AppBar(
          iconTheme: const IconThemeData(
            color: Colors.white,
          ),
          shadowColor: theme.weakBackgroundColor,
          elevation: 1,
          actions: getAction(context),
          bottom: TabBar(
            labelColor: Colors.white,
            tabs: [
              Tab(
                text: imt("全部"),
              ),
              Tab(
                text: imt("已加入"),
              ),
            ],
          ),
          title: Column(
            children: [
              Text(
                hasInternet ? imt("话题") : imt("话题（未连接）"),
                style: const TextStyle(color: Colors.white, fontSize: 17),
              ),
              Text(
                "# ${disscussInfo == null ? '' : disscussInfo!['name']}",
                style: const TextStyle(fontSize: 10, color: Colors.white),
              )
            ],
          ),
          flexibleSpace: Container(
            decoration: BoxDecoration(
              gradient: LinearGradient(colors: [
                theme.lightPrimaryColor ?? CommonColor.lightPrimaryColor,
                theme.primaryColor ?? CommonColor.primaryColor
              ]),
            ),
          ),
        ),
        body: disscussInfo != null && groupInfo != null
            ? TabBarView(
                children: [
                  TopicList(1, disscussInfo!, groupInfo),
                  TopicList(0, disscussInfo!, groupInfo),
                ],
              )
            : Container(),
      ),
    );
  }
}

class TopicList extends StatefulWidget {
  final int type;
  final Map<String, dynamic> disscussInfo;
  final V2TimGroupInfo? groupInfo;
  const TopicList(this.type, this.disscussInfo, this.groupInfo, {Key? key})
      : super(key: key);
  @override
  // ignore: no_logic_in_create_state
  State<StatefulWidget> createState() => TopicListState(type);
}

class TopicListState extends State<TopicList> {
  final int type;
  final V2TIMManager sdkInstance = TIMUIKitCore.getSDKInstance();
  TopicListState(this.type);
  bool loading = false;
  List list = List.from([]);
  var subscription;
  final Connectivity _connectivity = Connectivity();

  getlist() async {
    setState(() {
      loading = true;
    });
    String disscussImGroupId = widget.disscussInfo['imGroupId'];
    String userId = '';
    if (type == 0) {
      V2TimValueCallback<String> logindata = await sdkInstance.getLoginUser();
      userId = logindata.data!;
    }
    Map<String, dynamic> res = await DisscussApi.getTopicList(
      disscussImGroupId: disscussImGroupId,
      type: type,
      userId: userId,
    );
    int code = res['code'];
    // String message = res['message'];
    Map<String, dynamic> data = res['data'];
    if (code == 0) {
      setState(() {
        list = data['rows'];
        loading = false;
      });
    } else {
      setState(() {
        loading = false;
      });
    }
    // Utils.log(res);
  }

  openCreate() {
    String? disscussId = widget.disscussInfo['imGroupId'];
    if (disscussId == null) {
      Utils.toast(imt("讨论区参数异常"));
      return;
    }
    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) => CreateTopic(
          disscussId: disscussId,
          message: "",
          messageIdList: const [],
        ),
      ),
    );
  }

  @override
  void initState() {
    super.initState();
    getlist();
    subscription =
        _connectivity.onConnectivityChanged.listen((ConnectivityResult result) {
        getlist();
    });
  }

  @override
  Widget build(BuildContext context) {
    int role = widget.groupInfo!.role!;
    return Container(
      child: list.isNotEmpty
          ? ListView(
              children: list.map((e) => TopicItem(e, sdkInstance)).toList(),
            )
          : loading
              ? Center(
                  child: SizedBox(
                    width: 40,
                    height: 40,
                    child: LoadingIndicator(
                      indicatorType: Indicator.lineSpinFadeLoader,
                      color: Colors.black26,
                    ),
                  ),
                )
              : Center(
                  child: Column(
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: [
                      Text(
                        type == 1 ? imt("该讨论区下暂无话题") : imt("暂未加入任何话题"),
                        style: const TextStyle(color: Colors.black26),
                      ),
                      type == 1 && (role == 300 || role == 400)
                          ? Container(
                              padding: const EdgeInsets.all(40),
                              child: Row(
                                children: [
                                  Expanded(
                                    child: ElevatedButton(
                                      onPressed: openCreate,
                                      child: Text(imt("创建话题")),
                                    ),
                                  )
                                ],
                              ),
                            )
                          : Container()
                    ],
                  ),
                ),
    );
  }
}

class TopicItem extends StatelessWidget {
  final Map<String, dynamic> item;
  final V2TIMManager sdkInstance;
  const TopicItem(this.item, this.sdkInstance, {Key? key}) : super(key: key);
  Future<V2TimConversation> getConversion(String conversationID) async {
    final data = await sdkInstance.getConversationManager().getConversation(
          conversationID: conversationID,
        );
    return data.data!;
  }

  openTopic(context) async {
      String topicGroupId = item["imGroupId"];
      V2TimCallback res = await sdkInstance.joinGroup(
        groupID: topicGroupId,
        message: imt("大家好"),
      );
      V2TimConversation conversation =
          await getConversion('group_$topicGroupId');
      if (res.code == 0 || res.code == 10013) {
        V2TimValueCallback<String> loginUser = await sdkInstance.getLoginUser();
        String userId = loginUser.data!;
        await DisscussApi.joinTopic(
          userId: userId,
          imGroupId: topicGroupId,
        );
        Navigator.push(
          context,
          MaterialPageRoute(
            builder: (context) => Chat(selectedConversation: conversation),
          ),
        );
      }
  }

  @override
  Widget build(BuildContext context) {
    return InkWell(
      onTap: () {
        openTopic(context);
      },
      child: Container(
        padding: const EdgeInsets.all(4),
        decoration: const BoxDecoration(
          border: Border(
            bottom: BorderSide(
              color: Colors.black12,
            ),
          ),
        ),
        child: Column(
          children: [
            TopicItemTitle(item),
            TopicItemTag(item),
            TopicItemTime(item),
          ],
        ),
      ),
    );
  }
}

class TopicItemTitle extends StatelessWidget {
  final Map<String, dynamic> item;
  const TopicItemTitle(this.item, {Key? key}) : super(key: key);
  getStatus() {
    Color c = Colors.grey;
    switch (item['status']) {
      case 0:
        c = Colors.green;
        break;
      case 1:
        c = Colors.red;
        break;
      case 1000:
        c = Colors.orange;
    }
    return c;
  }

  @override
  Widget build(BuildContext context) {
    return SizedBox(
      height: 30,
      child: Row(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          Container(
            height: 10,
            width: 10,
            margin: const EdgeInsets.fromLTRB(12, 0, 8, 0),
            decoration: BoxDecoration(
              color: getStatus(),
              borderRadius: const BorderRadius.all(Radius.circular(10.0)),
              border: Border.all(width: 0, style: BorderStyle.none),
            ),
          ), //状态
          Expanded(
            child: Text(
              item['name'],
              style: const TextStyle(
                fontSize: 15,
              ),
              softWrap: true,
              textAlign: TextAlign.left,
              maxLines: 1,
              overflow: TextOverflow.ellipsis,
            ),
          ),
        ],
      ),
    );
  }
}

class TopicItemTag extends StatelessWidget {
  final Map<String, String> tagColors = {
    "bug": "b61903",
    imt("性能"): "229800",
    "flutter": "5fe5f4",
    "trtc": "0279a4",
    "pc": "fbca05",
    "default": "006fff",
    "Electron": "d4c5fa",
    "iOS": "2b2b2b",
    "Android": "e4f0fe"
  };
  final Map<String, dynamic> item;
  TopicItemTag(this.item, {Key? key}) : super(key: key);
  List<Widget> getTags() {
    List<String> tags = List.from(jsonDecode(item['tags']));
    if (tags.isEmpty) {
      return [];
    }
    return tags.map(
      (e) {
        late String color;
        if (tagColors[e.toLowerCase()] == null) {
          color = tagColors['default']!;
        } else {
          color = tagColors[e.toLowerCase()]!;
        }
        return Container(
          alignment: Alignment.center,
          height: 20,
          margin: const EdgeInsets.only(right: 5),
          padding: const EdgeInsets.fromLTRB(10, 4, 10, 4),
          decoration: BoxDecoration(
            color: Color(int.parse(color, radix: 16)).withAlpha(255),
            borderRadius: const BorderRadius.all(Radius.circular(10.0)),
            border: Border.all(width: 0, style: BorderStyle.none),
          ),
          child: Text(
            e,
            style: const TextStyle(
              fontSize: 10,
              textBaseline: TextBaseline.alphabetic,
              color: Colors.white,
              backgroundColor: Colors.transparent,
              height: 1,
            ),
          ),
        );
      },
    ).toList();
  }

  @override
  Widget build(BuildContext context) {
    return Container(
      padding: const EdgeInsets.only(left: 24),
      child: Row(
        children: getTags(),
      ),
    );
  }
}

class TopicItemTime extends StatelessWidget {
  final Map<String, dynamic> item;
  String getFormatTime() {
    String time = item['created_at'];
    var ftime = DateTime.parse(time);
    DateFormat formatter = DateFormat('yyyy-MM-dd');

    return formatter.format(ftime);
  }

  const TopicItemTime(this.item, {Key? key}) : super(key: key);
  @override
  Widget build(BuildContext context) {
    return Container(
      height: 20,
      padding: const EdgeInsets.only(left: 24),
      alignment: Alignment.centerLeft,
      child: Text(
        getFormatTime(),
        textAlign: TextAlign.left,
        style: TextStyle(
          color: Color(int.parse("808080", radix: 16)).withAlpha(255),
          fontSize: 10,
        ),
      ),
    );
  }
}
文件：/im-flutter-uikit/lib/src/pages/app.dart
// ignore_for_file: avoid_print, prefer_typing_uninitialized_variables, unused_import,  prefer_final_fields, unused_field

import 'dart:async';
import 'dart:convert';
import 'dart:io';

import 'package:connectivity_plus/connectivity_plus.dart';
import 'package:flutter/services.dart';
import 'package:provider/provider.dart';
import 'package:flutter/material.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:tim_ui_kit/base_widgets/tim_ui_kit_base.dart';
import 'package:tim_ui_kit/data_services/conversation/conversation_services.dart';
import 'package:tim_ui_kit/data_services/core/core_services.dart';
import 'package:tim_ui_kit/data_services/services_locatar.dart';
import 'package:tim_ui_kit/tim_ui_kit.dart';
import 'package:flutter_screenutil/flutter_screenutil.dart';
import 'package:tim_ui_kit/ui/widgets/emoji.dart';
import 'package:tim_ui_kit_sticker_plugin/tim_ui_kit_sticker_plugin.dart';
import 'package:timuikit/src/channel.dart';
import 'package:timuikit/src/chat.dart';
import 'package:timuikit/src/config.dart';
import 'package:timuikit/src/pages/home_page.dart';
import 'package:timuikit/src/pages/login.dart';
import 'package:timuikit/src/provider/custom_sticker_package.dart';
import 'package:timuikit/src/provider/login_user_Info.dart';
import 'package:timuikit/src/provider/theme.dart';
import 'package:timuikit/src/routes.dart';
import 'package:timuikit/utils/constant.dart';
import 'package:timuikit/utils/push/channel/channel_push.dart';
import 'package:timuikit/utils/push/push_constant.dart';
import 'package:timuikit/utils/smsLogin.dart';
import 'package:timuikit/utils/theme.dart';
import 'package:timuikit/utils/toast.dart';
import 'package:timuikit/i18n/i18n_utils.dart';
import 'package:tim_ui_kit/ui/constants/emoji.dart';
import 'package:uni_links/uni_links.dart';

import 'package:timuikit/src/launch_page.dart';

bool isInitScreenUtils = false;

class MyApp extends StatefulWidget {
  const MyApp({Key? key}) : super(key: key);

  @override
  State<StatefulWidget> createState() => _MyAppState();
}

class _MyAppState extends State<MyApp> with WidgetsBindingObserver {
  var subscription;
  final Connectivity _connectivity = Connectivity();
  final CoreServicesImpl _coreInstance = TIMUIKitCore.getInstance();
  final V2TIMManager _sdkInstance = TIMUIKitCore.getSDKInstance();
  final ConversationService _conversationService =
      serviceLocator<ConversationService>();
  bool _initialURILinkHandled = false;
  BuildContext? _cachedContext;
  bool _isInitIMSDK = false;

  @override
  void didChangeAppLifecycleState(AppLifecycleState state) async {
    if (Platform.isIOS) {
      return;
    }
    print("--" + state.toString());
    int? unreadCount = await _getTotalUnreadCount();
    switch (state) {
      case AppLifecycleState.inactive:
        _coreInstance.setOfflinePushStatus(
            status: AppStatus.background, totalCount: unreadCount);
        if(unreadCount != null){
          ChannelPush.setBadgeNum(unreadCount);
        }
        break;
      case AppLifecycleState.resumed:
        ChannelPush.clearAllNotification();
        _coreInstance.setOfflinePushStatus(status: AppStatus.foreground);
        break;
      case AppLifecycleState.paused:
        _coreInstance.setOfflinePushStatus(
            status: AppStatus.background, totalCount: unreadCount);
        break;
      case AppLifecycleState.detached:
        // ignore: todo
        // TODO: Handle this case.
        break;
    }
  }

  directToLogin() {
    Navigator.of(context).pushAndRemoveUntil(
      PageRouteBuilder(
        transitionDuration: const Duration(milliseconds: 500),
        pageBuilder: (BuildContext context, Animation<double> animation,
            Animation secondaryAnimation) {
          return FadeTransition(
            opacity: animation,
            child: LoginPage(initIMSDK: () => initIMSDKAndAddIMListeners()),
          );
        },
      ),
      ModalRoute.withName('/'),
    );
  }

  Future<int?> _getTotalUnreadCount() async {
    final res = await _sdkInstance
        .getConversationManager()
        .getTotalUnreadMessageCount();
    if (res.code == 0) {
      return res.data ?? 0;
    }
    return null;
  }

  directToHomePage() {
    Navigator.of(context).pushAndRemoveUntil(
      PageRouteBuilder(
        transitionDuration: const Duration(milliseconds: 500),
        pageBuilder: (BuildContext context, Animation<double> animation,
            Animation secondaryAnimation) {
          return FadeTransition(
            opacity: animation,
            child: const HomePage(),
          );
        },
      ),
      ModalRoute.withName('/'),
    );
  }

  removeLocalSetting() async {
    Future<SharedPreferences> _prefs = SharedPreferences.getInstance();
    SharedPreferences prefs = await _prefs;
    prefs.remove("smsLoginToken");
    prefs.remove("smsLoginPhone");
    prefs.remove("smsLoginUserID");
    prefs.remove("channelListMain");
    prefs.remove("discussListMain");
    prefs.remove("themeType");
  }

  onKickedOffline() async {
// 被踢下线
    // 清除本地缓存，回到登录页TODO
    try {
      // Provider.of<ConversionModel>(context, listen: false).clear();
      // Provider.of<UserModel>(context, listen: false).clear();
      // Provider.of<CurrentMessageListModel>(context, listen: false).clear();
      // Provider.of<FriendListModel>(context, listen: false).clear();
      // Provider.of<FriendApplicationModel>(context, listen: false).clear();
      // Provider.of<GroupApplicationModel>(context, listen: false).clear();
      directToLogin();
      // 去掉存的一些数据
      removeLocalSetting();
      // ignore: empty_catches
    } catch (err) {}
    // Navigator.of(_cachedContext!).pushAndRemoveUntil(
    //   MaterialPageRoute(builder: (BuildContext context) => const LoginPage()),
    //   ModalRoute.withName('/'),
    // );
  }

  initIMSDKAndAddIMListeners() async {
    if (_isInitIMSDK) return;
    final isInitSuccess = await _coreInstance.init(
      onTUIKitCallbackListener: (TIMCallback callbackValue){

        switch(callbackValue.type) {
          case TIMCallbackType.INFO:
            // Shows the recommend text for info callback directly
            Utils.toast(callbackValue.infoRecommendText!);
            break;

          case TIMCallbackType.API_ERROR:
            //Prints the API error to console, and shows the error message.
            print("Error from TUIKit: ${callbackValue.errorMsg}, Code: ${callbackValue.errorCode}");
            if (callbackValue.errorCode == 10004 && callbackValue.errorMsg!.contains("not support @all")) {
                Utils.toast(imt("当前群组不支持@全体成员"));
            }else if (callbackValue.errorCode == 80001 && callbackValue.errorMsg!.contains("not support @all")) {
                Utils.toast(imt("发言中有非法语句"));
            }else{
              Utils.toast(callbackValue.errorMsg ?? callbackValue.errorCode.toString());
            }
            break;

          case TIMCallbackType.FLUTTER_ERROR:
          default:
            // prints the stack trace to console or shows the catch error
            if(callbackValue.catchError != null){
              Utils.toast(callbackValue.catchError.toString());
            }else{
              print(callbackValue.stackTrace);
            }
        }
      },
      sdkAppID: IMDemoConfig.sdkappid,
      loglevel: LogLevelEnum.V2TIM_LOG_DEBUG,
      listener: V2TimSDKListener(
        onConnectFailed: (code, error) {},
        onConnectSuccess: () {
          Utils.log(imt("即时通信服务连接成功"));
        },
        onConnecting: () {},
        onKickedOffline: () {
          onKickedOffline();
        },
        onSelfInfoUpdated: (info) {
          Provider.of<LoginUserInfo>(context, listen: false)
              .setLoginUserInfo(info);
          // onSelfInfoUpdated(info);
        },
        onUserSigExpired: () {
          // userSig过期，相当于踢下线
          onKickedOffline();
        },
      ),
    );
    if (isInitSuccess == null || !isInitSuccess) {
      Utils.toast(imt("即时通信 SDK初始化失败"));
      return;
    } else {}
    _isInitIMSDK = true;
  }

  initApp() {
    // getAllDiscussAndTopic();
    // 初始化IM SDK
    // initIMSDKAndAddIMListeners();
    // 获取登录凭证全局数据
    // getSmsLoginConfig();
    // 检测登录状态
    checkLogin();
  }

  // getSmsLoginConfig() async {
  //   Map<String, dynamic>? data = await SmsLogin.getGlsb();
  //   int errorCode = data!['errorCode'];
  //   String errorMessage = data['errorMessage'];
  //   Map<String, dynamic> info = data['data'];
  //   if (errorCode != 0) {
  //     Utils.toast(errorMessage);
  //   } else {
  //     // ignore: non_constant_identifier_names
  //     String captcha_web_appid = info['captcha_web_appid'].toString();
  //     print(captcha_web_appid);
  //     // Provider.of<AppConfig>(context, listen: false)
  //     //     .updateAppId(captcha_web_appid);
  //   }
  // }

  setTheme(String themeTypeString) {
    ThemeType themeType = DefTheme.themeTypeFromString(themeTypeString);
    Provider.of<DefaultThemeData>(context, listen: false).currentThemeType =
        themeType;
    Provider.of<DefaultThemeData>(context, listen: false).theme =
        DefTheme.defaultTheme[themeType]!;
    _coreInstance.setTheme(theme: DefTheme.defaultTheme[themeType]!);
  }

  setCustomSticker() async {
    // 添加自定义表情包
    List<CustomStickerPackage> customStickerPackageList = [];
    final defEmojiList = emojiData.asMap().keys.map((emojiIndex) {
      final emo = Emoji.fromJson(emojiData[emojiIndex]);
      return CustomSticker(
          index: emojiIndex, name: emo.name, unicode: emo.unicode);
    }).toList();
    customStickerPackageList.add(CustomStickerPackage(
        name: "defaultEmoji",
        stickerList: defEmojiList,
        menuItem: defEmojiList[0]));
    customStickerPackageList.addAll(Const.emojiList.map((customEmojiPackage) {
      return CustomStickerPackage(
          name: customEmojiPackage.name,
          baseUrl: "assets/custom_face_resource/${customEmojiPackage.name}",
          stickerList: customEmojiPackage.list
              .asMap()
              .keys
              .map((idx) =>
                  CustomSticker(index: idx, name: customEmojiPackage.list[idx]))
              .toList(),
          menuItem: CustomSticker(
            index: 0,
            name: customEmojiPackage.icon,
          ));
    }).toList());
    Provider.of<CustomStickerPackageData>(context, listen: false)
        .customStickerPackageList = customStickerPackageList;
  }

  checkLogin() async {
    Future<SharedPreferences> _prefs = SharedPreferences.getInstance();
    SharedPreferences prefs = await _prefs;
    String? token = prefs.getString("smsLoginToken");
    String? phone = prefs.getString("smsLoginPhone");
    String? userId = prefs.getString("smsLoginUserID");
    String themeTypeString = prefs.getString("themeType") ?? "";
    setTheme(themeTypeString);
    setCustomSticker();
    Utils.log("$token $phone $userId");
    if (token != null && phone != null && userId != null) {
      Map<String, dynamic> response = await SmsLogin.smsTokenLogin(
        userId: userId,
        token: token,
      );
      int errorCode = response['errorCode'];
      String errorMessage = response['errorMessage'];

      if (errorCode == 0) {
        Map<String, dynamic> datas = response['data'];
        String userId = datas['userId'];
        String userSig = datas['sdkUserSig'];
        print(_coreInstance.loginUserInfo);
        await initIMSDKAndAddIMListeners();
        V2TimCallback data =
            await _coreInstance.login(userID: userId, userSig: userSig);

        if (data.code != 0) {
          final option8 = data.desc;
          Utils.toast(
              imt_para("登录失败 {{option8}}", "登录失败 $option8")(option8: option8));
          removeLocalSetting();
          directToLogin();
          return;
        }
        directToHomePage();
      } else {
        Utils.toast(errorMessage);
        directToLogin();
      }
    } else {
      directToLogin();
    }
  }

  initScreenUtils() {
    if (isInitScreenUtils) return;

    ScreenUtil.init(
      context,
      designSize: const Size(750, 1624),
      minTextAdapt: true,
    );
    isInitScreenUtils = true;
  }

  void handleClickNotification(Map<String, dynamic> msg) async {
    String ext = msg['ext'] ?? "";
    Map<String, dynamic> extMsp = jsonDecode(ext);
    String convId = extMsp["conversationID"] ?? "";
    V2TimConversation? targetConversation =
        await _conversationService.getConversation(conversationID: convId);
    if (targetConversation != null) {
      ChannelPush.clearAllNotification();
      Future.delayed(const Duration(milliseconds: 100), () {
        Navigator.push(
            _cachedContext ?? context,
            MaterialPageRoute(
              builder: (context) => Chat(
                selectedConversation: targetConversation,
              ),
            ));
      });
    }
  }

  initRouteListener() {
    final routes = Routes();
    routes.addListener(() {
      final pageType = routes.pageType;
      if (pageType == "loginPage") {
        directToLogin();
      }

      if (pageType == "homePage") {
        directToHomePage();
      }
    });
  }

  @override
  void initState() {
    super.initState();
    _cachedContext = context;
    WidgetsBinding.instance?.addObserver(this);
    ChannelPush.init(handleClickNotification);
    initApp();
    initRouteListener();
  }

  @override
  dispose() {
    super.dispose();
    print("========isDispose-=========");
    WidgetsBinding.instance?.removeObserver(this);
    Routes().dispose();
  }

  @override
  Widget build(BuildContext context) {
    initScreenUtils();
    return const LaunchPage();
  }
}
文件：/im-flutter-uikit/lib/src/pages/home_page.dart
// ignore_for_file: prefer_typing_uninitialized_variables

import 'package:connectivity_plus/connectivity_plus.dart';
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:super_tooltip/super_tooltip.dart';
import 'package:tim_ui_kit/tim_ui_kit.dart';
import 'package:tim_ui_kit/ui/controller/tim_uikit_chat_controller.dart';
import 'package:tim_ui_kit/ui/controller/tim_uikit_conversation_controller.dart';
import 'package:tim_ui_kit/ui/utils/color.dart';
import 'package:tim_ui_kit_calling_plugin/tim_ui_kit_calling_plugin.dart';
import 'package:timuikit/src/add_friend.dart';
import 'package:timuikit/src/add_group.dart';
import 'package:timuikit/src/channel.dart';
import 'package:timuikit/src/config.dart';
import 'package:timuikit/src/contact.dart';
import 'package:timuikit/src/conversation.dart';
import 'package:timuikit/src/create_group.dart';
import 'package:timuikit/src/profile.dart';
import 'package:flutter_screenutil/flutter_screenutil.dart';
import 'package:timuikit/i18n/i18n_utils.dart';
import 'package:timuikit/src/provider/theme.dart';
import 'package:timuikit/utils/platform.dart';

/// 首页
class HomePage extends StatefulWidget {
  final int pageIndex;
  const HomePage({Key? key, this.pageIndex = 0}) : super(key: key);

  @override
  State<StatefulWidget> createState() => HomePageState();
}

class HomePageState extends State<HomePage> {
  bool hasInit = false;
  int totalUnreadCount = 0;
  var subscription;
  final Connectivity _connectivity = Connectivity();
  bool hasInternet = true;
  final CoreServicesImpl _coreInstance = TIMUIKitCore.getInstance();
  final V2TIMManager _sdkInstance = TIMUIKitCore.getSDKInstance();
  final TIMUIKitConversationController _conversationController =
      TIMUIKitConversationController();
  final contactTooltip = [
    {"id": "addFriend", "asset": "assets/add_friend.png", "label": imt("添加好友")},
    {"id": "addGroup", "asset": "assets/add_group.png", "label": imt("添加群聊")}
  ];
  final conversationTooltip = [
    {"id": "createConv", "asset": "assets/c2c_conv.png", "label": imt("发起会话")},
    {
      "id": "createWork",
      "asset": "assets/group_conv.png",
      "label": imt("创建工作群")
    },
    {
      "id": "createPublic",
      "asset": "assets/group_conv.png",
      "label": imt("创建社交群")
    },
    {
      "id": "createMeeting",
      "asset": "assets/group_conv.png",
      "label": imt("创建会议群")
    },
    {
      "id": "createAvChat",
      "asset": "assets/group_conv.png",
      "label": imt("创建直播群")
    },
  ];

  /// 当前选择下标
  int currentIndex = 0;

  SuperTooltip? tooltip;

  Widget _emptyAvatarBuilder(context) {
    return Image.asset("assets/default_avatar.png");
  }

  _initConversationListener() {
    final listener = V2TimConversationListener(
        onTotalUnreadMessageCountChanged: ((unreadCount) {
      totalUnreadCount = unreadCount;
      setState(() {});
    }));

    _conversationController.setConversationListener(listener: listener);
  }

  _getTotalUnreadCount() async {
    final res = await _sdkInstance
        .getConversationManager()
        .getTotalUnreadMessageCount();
    if (res.code == 0) {
      totalUnreadCount = res.data ?? 0;
      setState(() {});
    }
  }

  _connectivityChange(ConnectivityResult result) {
    hasInternet = result != ConnectivityResult.none;
    setState(() {});
  }

  _initTrtc() async {
    final isAndroidEmulator = await PlatformUtils.isAndroidEmulator();
    if (!isAndroidEmulator) {
      final TUICalling _calling = TUICalling();
      final loginInfo = _coreInstance.loginInfo;
      final userID = loginInfo.userID;
      final userSig = loginInfo.userSig;
      final sdkAppId = loginInfo.sdkAppID;
      _calling.init(sdkAppID: sdkAppId, userID: userID, userSig: userSig);
      _calling.enableFloatingWindow();
    }
  }

  @override
  initState() {
    super.initState();
    currentIndex = widget.pageIndex;
    _coreInstance.setEmptyAvatarBuilder(_emptyAvatarBuilder);
    _initConversationListener();
    _getTotalUnreadCount();
    _initTrtc();
    setState(() {});
    subscription =
        _connectivity.onConnectivityChanged.listen(_connectivityChange);
  }

  @override
  dispose() {
    super.dispose();
    TIMUIKitChatController().dispose();
    // subscription.cancle();
  }

  Map<int, String> pageTitle() {
    return {
      0: imt("频道"),
      1: hasInternet ? imt("消息") : imt("连接中..."),
      2: imt("通讯录"),
      3: imt("我的"),
    };
  }

  List<NavigationBarData> getBottomNavigatorList(BuildContext context, theme) {
    final List<NavigationBarData> bottomNavigatorList = [
      NavigationBarData(
        widget: const Channel(),
        // widget: Text("1"),
        title: imt("频道"),
        selectedIcon: Icon(
          Icons.group_work_outlined,
          color: theme.primaryColor,
        ),
        unselectedIcon: const Icon(
          Icons.group_work_outlined,
          color: Colors.grey,
        ),
      ),
      NavigationBarData(
        widget: Conversation(
          conversationController: _conversationController,
        ),
        title: imt("消息"),
        selectedIcon: Stack(
          clipBehavior: Clip.none,
          children: [
            ColorFiltered(
              child: Image.asset(
                "assets/chat_active.png",
                width: 24,
                height: 24,
              ),
              colorFilter: ColorFilter.mode(
                  theme.primaryColor ?? CommonColor.primaryColor,
                  BlendMode.srcATop),
            ),
            if (totalUnreadCount != 0)
              Positioned(
                top: -5,
                right: -6,
                child: UnconstrainedBox(
                  child: UnreadMessage(
                      width: 16, height: 16, unreadCount: totalUnreadCount),
                ),
              )
          ],
        ),
        unselectedIcon: Stack(
          clipBehavior: Clip.none,
          children: [
            Image.asset(
              "assets/chat.png",
              width: 24,
              height: 24,
            ),
            if (totalUnreadCount != 0)
              Positioned(
                top: -5,
                right: -6,
                child: UnconstrainedBox(
                  child: UnreadMessage(
                      width: 16, height: 16, unreadCount: totalUnreadCount),
                ),
              )
          ],
        ),
      ),
      NavigationBarData(
        widget: const Contact(),
        title: imt("通讯录"),
        selectedIcon: Stack(
          clipBehavior: Clip.none,
          children: [
            ColorFiltered(
              child: Image.asset(
                "assets/contact_active.png",
                width: 24,
                height: 24,
              ),
              colorFilter: ColorFilter.mode(
                  theme.primaryColor ?? CommonColor.primaryColor,
                  BlendMode.srcATop),
            ),
            const Positioned(
              top: -5,
              right: -6,
              child: UnconstrainedBox(
                child: TIMUIKitUnreadCount(
                  width: 16,
                  height: 16,
                ),
              ),
            )
          ],
        ),
        unselectedIcon: Stack(
          clipBehavior: Clip.none,
          children: [
            Image.asset(
              "assets/contact.png",
              width: 24,
              height: 24,
            ),
            const Positioned(
              top: -5,
              right: -6,
              child: UnconstrainedBox(
                child: TIMUIKitUnreadCount(
                  width: 16,
                  height: 16,
                ),
              ),
            )
          ],
        ),
      ),
      NavigationBarData(
        widget: const MyProfile(),
        title: imt("我的"),
        selectedIcon: ColorFiltered(
            child: Image.asset(
              "assets/profile_active.png",
              width: 24,
              height: 24,
            ),
            colorFilter: ColorFilter.mode(
                theme.primaryColor ?? CommonColor.primaryColor,
                BlendMode.srcATop)),
        unselectedIcon: Image.asset(
          "assets/profile.png",
          width: 24,
          height: 24,
        ),
      ),
    ];

    return bottomNavigatorList;
  }

  List<NavigationBarData> bottomNavigatorList(theme) {
    return getBottomNavigatorList(context, theme);
  }

  ///关闭
  close() {
    Navigator.of(context).pop();
  }

  //如果点击的导航页不是当前项，切换
  void _changePage(int index) {
    if (index != currentIndex) {
      setState(() {
        currentIndex = index;
      });
    }
  }

  Widget? getTitle() {
    return Text(
      pageTitle()[currentIndex]!,
      style: const TextStyle(
          color: Colors.white, fontSize: IMDemoConfig.appBarTitleFontSize),
    );
  }

  _handleTapTooltipItem(String id) {
    switch (id) {
      case "addFriend":
        Navigator.of(context).push(
          MaterialPageRoute(
            builder: (context) => const AddFriend(),
          ),
        );
        break;
      case "addGroup":
        Navigator.of(context).push(
          MaterialPageRoute(
            builder: (context) => const AddGroup(),
          ),
        );
        break;
      case "createConv":
        Navigator.of(context).push(
          MaterialPageRoute(
            builder: (context) => const CreateGroup(
              convType: GroupTypeForUIKit.single,
            ),
          ),
        );
        break;
      case "createWork":
        Navigator.of(context).push(
          MaterialPageRoute(
            builder: (context) => const CreateGroup(
              convType: GroupTypeForUIKit.work,
            ),
          ),
        );
        break;
      case "createPublic":
        Navigator.of(context).push(
          MaterialPageRoute(
            builder: (context) => const CreateGroup(
              convType: GroupTypeForUIKit.public,
            ),
          ),
        );
        break;
      case "createMeeting":
        Navigator.of(context).push(
          MaterialPageRoute(
            builder: (context) => const CreateGroup(
              convType: GroupTypeForUIKit.meeting,
            ),
          ),
        );
        break;
      case "createAvChat":
        Navigator.of(context).push(
          MaterialPageRoute(
            builder: (context) => const CreateGroup(
              convType: GroupTypeForUIKit.chat,
            ),
          ),
        );
        break;
    }
  }

  List<Widget> _getTooltipContent(BuildContext context) {
    List toolTipList = currentIndex == 1 ? conversationTooltip : contactTooltip;

    return toolTipList.map((e) {
      return InkWell(
        onTap: () {
          _handleTapTooltipItem(e["id"]!);
          tooltip!.close();
        },
        child: Row(
          children: [
            Image.asset(
              e["asset"]!,
              width: 21,
              height: 21,
            ),
            const SizedBox(
              width: 12,
            ),
            Text(e['label']!)
          ],
        ),
      );
    }).toList();
  }

  _showTooltip(BuildContext context) {
    tooltip = SuperTooltip(
        minimumOutSidePadding: 5,
        arrowTipDistance: 15,
        arrowBaseWidth: 15.0,
        arrowLength: 10.0,
        // maxHeight: 110,
        // maxWidth: 110,
        borderColor: Colors.white,
        backgroundColor: Colors.white,
        shadowColor: Colors.black26,
        content: Wrap(
          direction: Axis.vertical,
          spacing: 10,
          children: [..._getTooltipContent(context)],
        ),
        popupDirection: TooltipDirection.down);
    tooltip?.show(context);
  }

  @override
  Widget build(BuildContext context) {
    ScreenUtil.init(
      context,
      designSize: const Size(750, 1624),
      minTextAdapt: true,
    );

    final theme = Provider.of<DefaultThemeData>(context).theme;
    return Scaffold(
      appBar: currentIndex != 0
          ? AppBar(
              iconTheme: const IconThemeData(
                color: Colors.white,
              ),
              shadowColor: theme.weakDividerColor,
              elevation: currentIndex == 1 ? 0 : 1,
              automaticallyImplyLeading: false,
              leading: null,
              title: getTitle(),
              centerTitle: true,
              flexibleSpace: Container(
                decoration: BoxDecoration(
                  gradient: LinearGradient(colors: [
                    theme.lightPrimaryColor ?? CommonColor.lightPrimaryColor,
                    theme.primaryColor ?? CommonColor.primaryColor
                  ]),
                ),
              ),
              actions: [
                if ([1, 2].contains(currentIndex))
                  Builder(builder: (BuildContext c) {
                    return IconButton(
                        onPressed: () {
                          _showTooltip(c);
                        },
                        icon: const Icon(
                          Icons.add_circle_outline,
                          color: Colors.white,
                        ));
                  })
              ],
            )
          : null,
      body: IndexedStack(
        index: currentIndex,
        children: bottomNavigatorList(theme).map((res) => res.widget).toList(),
      ),
      bottomNavigationBar: BottomNavigationBar(
        items: List.generate(
          bottomNavigatorList(theme).length,
          (index) => BottomNavigationBarItem(
            icon: index == currentIndex
                ? bottomNavigatorList(theme)[index].selectedIcon
                : bottomNavigatorList(theme)[index].unselectedIcon,
            label: bottomNavigatorList(theme)[index].title,
          ),
        ),
        currentIndex: currentIndex,
        type: BottomNavigationBarType.fixed,
        onTap: (index) {
          _changePage(index);
        },
        selectedItemColor: theme.primaryColor,
        unselectedItemColor: Colors.grey,
        backgroundColor: theme.weakBackgroundColor,
      ),
    );
  }
}

/// 底部导航栏数据对象
class NavigationBarData {
  /// 未选择时候的图标
  final Widget unselectedIcon;

  /// 选择后的图标
  final Widget selectedIcon;

  /// 标题内容
  final String title;

  /// 页面组件
  final Widget widget;

  NavigationBarData({
    required this.unselectedIcon,
    required this.selectedIcon,
    required this.title,
    required this.widget,
  });
}
文件：/im-flutter-uikit/lib/src/pages/login.dart
// ignore_for_file: avoid_relative_lib_imports, avoid_print, unused_import
import 'dart:io';

import 'package:flutter/cupertino.dart';
import 'package:provider/provider.dart';

import 'package:connectivity_plus/connectivity_plus.dart';
import 'package:flutter/gestures.dart';
import 'package:flutter/services.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:flutter/material.dart';
import 'package:tim_ui_kit_push_plugin/tim_ui_kit_push_plugin.dart';
import 'package:tim_ui_kit/tim_ui_kit.dart';
import 'package:tim_ui_kit/ui/utils/color.dart';
import 'package:timuikit/country_list_pick-1.0.1+5/lib/country_list_pick.dart';
import 'package:timuikit/country_list_pick-1.0.1+5/lib/country_selection_theme.dart';
import 'package:timuikit/country_list_pick-1.0.1+5/lib/support/code_country.dart';
import 'package:timuikit/src/config.dart';
import 'package:timuikit/src/pages/home_page.dart';
import 'package:timuikit/src/pages/privacy/privacy_webview.dart';
import 'package:timuikit/src/provider/theme.dart';
import 'package:timuikit/src/routes.dart';
import 'package:timuikit/src/widgets/login_captcha.dart';
import 'package:timuikit/utils/commonUtils.dart';
import 'package:timuikit/utils/push/channel/channel_push.dart';
import 'package:timuikit/utils/push/push_constant.dart';
import 'package:timuikit/utils/smsLogin.dart';
import 'package:timuikit/utils/toast.dart';
import 'package:flutter_screenutil/flutter_screenutil.dart';
import 'package:timuikit/i18n/i18n_utils.dart';

var timNewLogo = const AssetImage("assets/im_logo.png");

class LoginPage extends StatelessWidget {
  final Function? initIMSDK;
  const LoginPage({Key? key, this.initIMSDK}) : super(key: key);

  removeLocalSetting() async {
    Future<SharedPreferences> _prefs = SharedPreferences.getInstance();
    SharedPreferences prefs = await _prefs;
    prefs.remove("smsLoginToken");
    prefs.remove("smsLoginPhone");
    prefs.remove("smsLoginUserID");
    prefs.remove("channelListMain");
    prefs.remove("discussListMain");
  }

  @override
  Widget build(BuildContext context) {
    return WillPopScope(
        onWillPop: () async {
          return false;
        },
        child: Scaffold(
          body: AppLayout(initIMSDK: initIMSDK),
          resizeToAvoidBottomInset: false,
        ));
  }
}

class AppLayout extends StatelessWidget {
  final Function? initIMSDK;
  const AppLayout({Key? key, this.initIMSDK}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return GestureDetector(
      onTap: () {
        SystemChannels.textInput.invokeMethod('TextInput.hide');
      },
      child: Stack(
        children: [
          const AppLogo(),
          LoginForm(
            initIMSDK: initIMSDK,
          ),
        ],
      ),
    );
  }
}

class AppLogo extends StatelessWidget {
  const AppLogo({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    final double height = MediaQuery.of(context).size.height;
    final theme = Provider.of<DefaultThemeData>(context).theme;
    return Stack(
      alignment: Alignment.topCenter,
      children: [
        Container(
            decoration: BoxDecoration(
              gradient: LinearGradient(
                  begin: Alignment.topCenter,
                  end: Alignment.bottomCenter,
                  colors: [
                    theme.lightPrimaryColor ?? CommonColor.lightPrimaryColor,
                    theme.primaryColor ?? CommonColor.primaryColor
                  ]),
            ),
            child: Image.asset("assets/hero_image.png")),
        Positioned(
          child: Container(
            padding: EdgeInsets.only(top: height / 30),
            child: Row(
              mainAxisSize: MainAxisSize.min,
              mainAxisAlignment: MainAxisAlignment.center,
              children: <Widget>[
                SizedBox(
                  height: CommonUtils.adaptWidth(380),
                  width: CommonUtils.adaptWidth(200),
                  child: Image(
                      image: timNewLogo,
                      width: CommonUtils.adaptWidth(380),
                      height: CommonUtils.adaptHeight(200)),
                ),
                Expanded(
                    child: Container(
                  margin: const EdgeInsets.only(right: 5),
                  height: CommonUtils.adaptHeight(180),
                  padding: const EdgeInsets.only(top: 10, left: 5, right: 15),
                  child: Column(
                    children: <Widget>[
                      Text(
                        imt("登录·即时通信"),
                        style: TextStyle(
                          color: Colors.white,
                          fontSize: CommonUtils.adaptFontSize(64),
                        ),
                      ),
                      Text(
                        imt("体验群组聊天，音视频对话等IM功能"),
                        style: TextStyle(
                          color: Colors.white,
                          fontSize: CommonUtils.adaptFontSize(28),
                        ),
                      ),
                    ],
                    crossAxisAlignment: CrossAxisAlignment.start,
                  ),
                )),
              ],
            ),
          ),
        )
      ],
    );
  }
}

class LoginForm extends StatefulWidget {
  final Function? initIMSDK;
  const LoginForm({Key? key, required this.initIMSDK}) : super(key: key);

  @override
  _LoginFormState createState() => _LoginFormState();
}

class _LoginFormState extends State<LoginForm> {
  final CoreServicesImpl coreInstance = TIMUIKitCore.getInstance();

  @override
  void initState() {
    super.initState();

    Future.delayed(const Duration(milliseconds: 100), checkFirstEnter);
  }

  @override
  void dispose() {
    userSigEtController.dispose();
    telEtController.dispose();
    super.dispose();
  }

  bool isGeted = false;
  String tel = '';
  int timer = 60;
  String sessionId = '';
  String code = '';
  bool isValid = false;
  TextEditingController userSigEtController = TextEditingController();
  TextEditingController telEtController = TextEditingController();
  String dialCode = "+86";
  String countryName = imt("中国大陆");

  initService() {
    if (widget.initIMSDK != null) {
      widget.initIMSDK!();
    }
    userSigEtController.addListener(checkIsValidForm);
    telEtController.addListener(checkIsValidForm);
    SmsLogin.initLoginService();
    setTel();
  }

  checkIsValidForm() {
    if (userSigEtController.text.isNotEmpty &&
        telEtController.text.isNotEmpty) {
      setState(() {
        isValid = true;
      });
    } else if (isValid) {
      setState(() {
        isValid = false;
      });
    }
  }

  setTel() async {
    Future<SharedPreferences> _prefs = SharedPreferences.getInstance();
    SharedPreferences prefs = await _prefs;
    String? phone = prefs.getString("smsLoginPhone");
    if (phone != null) {
      telEtController.value = TextEditingValue(
        text: phone,
      );
      setState(() {
        tel = phone;
      });
    }
  }

  timeDown() {
    Future.delayed(const Duration(milliseconds: 1000), () {
      if (mounted) {
        if (timer == 0) {
          setState(() {
            timer = 60;
            isGeted = false;
          });
          return;
        }
        setState(() {
          timer = timer - 1;
        });
        timeDown();
      }
    });
  }

  TextSpan webViewLink(String title, String url) {
    return TextSpan(
      text: imt(title),
      style: const TextStyle(
        color: Color.fromRGBO(0, 110, 253, 1),
      ),
      recognizer: TapGestureRecognizer()
        ..onTap = () {
          Navigator.push(
              context,
              MaterialPageRoute(
                  builder: (context) =>
                      PrivacyDocument(title: title, url: url)));
        },
    );
  }

  void checkFirstEnter() async {
    // 不再检查是否首次登录，每次切换账号均提示
    showDialog<bool>(
      context: context,
      barrierDismissible: false,
      builder: (context) {
        return AlertDialog(
          shape: const RoundedRectangleBorder(
              borderRadius: BorderRadius.all(Radius.circular(8))),
          content: Text.rich(
            TextSpan(
                style: const TextStyle(
                    fontSize: 14, color: Colors.black, height: 2.0),
                children: [
                  TextSpan(
                    text: imt(
                        "欢迎使用腾讯云即时通信 IM，为保护您的个人信息安全，我们更新了《隐私政策》，主要完善了收集用户信息的具体内容和目的、增加了第三方SDK使用等方面的内容。"),
                  ),
                  const TextSpan(
                    text: "\n",
                  ),
                  TextSpan(
                    text: imt("请您点击"),
                  ),
                  webViewLink("《用户协议》",
                      'https://web.sdk.qcloud.com/document/Tencent-IM-User-Agreement.html'),
                  TextSpan(
                    text: imt(", "),
                  ),
                  webViewLink("《隐私政策摘要》",
                      'https://privacy.qq.com/document/preview/c63a48325d0e4a35b93f675205a65a77'),
                  TextSpan(
                    text: imt(", "),
                  ),
                  webViewLink("《隐私政策》",
                      'https://privacy.qq.com/document/preview/1cfe904fb7004b8ab1193a55857f7272'),
                  TextSpan(
                    text: imt(", "),
                  ),
                  webViewLink("《信息收集清单》",
                      'https://privacy.qq.com/document/preview/45ba982a1ce6493597a00f8c86b52a1e'),
                  TextSpan(
                    text: imt("和"),
                  ),
                  webViewLink("《信息共享清单》",
                      'https://privacy.qq.com/document/preview/dea84ac4bb88454794928b77126e9246'),
                  TextSpan(
                      text: imt("并仔细阅读，如您同意以上内容，请点击“同意并继续”，开始使用我们的产品与服务！")),
                ]),
            overflow: TextOverflow.clip,
          ),
          actions: [
            CupertinoDialogAction(
              child: Container(
                  padding:
                      const EdgeInsets.symmetric(horizontal: 100, vertical: 10),
                  decoration: const BoxDecoration(
                    color: Color.fromRGBO(0, 110, 253, 1),
                    borderRadius: BorderRadius.all(
                      Radius.circular(24),
                    ),
                  ),
                  child: Text(imt("同意并继续"),
                      style:
                          const TextStyle(color: Colors.white, fontSize: 16))),
              onPressed: () {
                initService();
                Navigator.of(context).pop(true);
              },
            ),
            CupertinoDialogAction(
              child: Text(imt("不同意并退出"),
                  style: const TextStyle(color: Colors.grey, fontSize: 16)),
              isDestructiveAction: true,
              onPressed: () {
                exit(0);
              },
            ),
          ],
        );
      },
    );
  }

  // 获取验证码
  getLoginCode(context) async {
    if (tel.isEmpty) {
      Utils.toast(imt("请输入手机号"));
      return;
    } else if (!RegExp(r"1[0-9]\d{9}$").hasMatch(tel)) {
      Utils.toast(imt("手机号格式错误"));
      return;
    } else {
      await _showMyDialog();
    }
  }

  // 验证验证码后台下发短信
  vervifyPicture(messageObj) async {
    // String captchaWebAppid =
    //     Provider.of<AppConfig>(context, listen: false).appid;
    String phoneNum = "$dialCode$tel";
    final sdkAppid = IMDemoConfig.sdkappid.toString();
    print("sdkAppID$sdkAppid");
    Map<String, dynamic> response = await SmsLogin.vervifyPicture(
      phone: phoneNum,
      ticket: messageObj['ticket'],
      randstr: messageObj['randstr'],
      appId: sdkAppid,
    );
    int errorCode = response['errorCode'];
    String errorMessage = response['errorMessage'];
    if (errorCode == 0) {
      Map<String, dynamic> res = response['data'];
      String sid = res['sessionId'];
      setState(() {
        isGeted = true;
        sessionId = sid;
      });
      timeDown();
      Utils.toast(imt("验证码发送成功"));
    } else {
      Utils.toast(errorMessage);
    }
  }

  Future<void> _showMyDialog() async {
    return showDialog<void>(
      context: context,
      barrierDismissible: false, // user must tap button!
      builder: (BuildContext context) {
        return AlertDialog(
          backgroundColor: Colors.transparent,
          contentPadding: EdgeInsets.zero,
          elevation: 0,
          content: SingleChildScrollView(
              child: LoginCaptcha(
                  onSuccess: vervifyPicture,
                  onClose: () {
                    Navigator.pop(context);
                  })),
        );
      },
    );
  }

  directToHomePage() {
    Routes().directToHomePage();
  }

  smsFristLogin() async {
    if (tel == '' && IMDemoConfig.productEnv) {
      Utils.toast(imt("请输入手机号"));
    }
    if (sessionId == '' || code == '') {
      Utils.toast(imt("验证码异常"));
      return;
    }
    String phoneNum = "$dialCode$tel";
    Map<String, dynamic> response = await SmsLogin.smsFirstLogin(
      sessionId: sessionId,
      phone: phoneNum,
      code: code,
    );
    int errorCode = response['errorCode'];
    String errorMessage = response['errorMessage'];

    if (errorCode == 0) {
      Map<String, dynamic> datas = response['data'];
      // userId, sdkAppId, sdkUserSig, token, phone:tel
      String userId = datas['userId'];
      String userSig = datas['sdkUserSig'];
      String token = datas['token'];
      String phone = datas['phone'];
      String avatar = datas['avatar'];
      int sdkAppId = datas['sdkAppId'];

      var data = await coreInstance.login(
        userID: userId,
        userSig: userSig,
      );
      if (data.code != 0) {
        final option1 = data.desc;
        Utils.toast(
            imt_para("登录失败{{option1}}", "登录失败$option1")(option1: option1));
        return;
      }

      final userInfos = coreInstance.loginUserInfo;
      if (userInfos != null) {
        await coreInstance.setSelfInfo(
          userFullInfo: V2TimUserFullInfo.fromJson(
            {
              "nickName": userId,
              "faceUrl": avatar,
            },
          ),
        );
      }

      Future<SharedPreferences> _prefs = SharedPreferences.getInstance();
      SharedPreferences prefs = await _prefs;
      prefs.setString("smsLoginToken", token);
      prefs.setString("smsLoginPhone", phone.replaceFirst(dialCode, ""));
      prefs.setString("smsLoginUserID", userId);
      prefs.setString("sdkAppId", sdkAppId.toString());
      setState(() {
        tel = '';
        code = '';
        timer = 60;
        isGeted = false;
      });
      userSigEtController.clear();
      telEtController.clear();
      await getIMData();
      // TIMUIKitConversationController().loadData();
      // Navigator.pop(context);
      directToHomePage();
    } else {
      Utils.toast(errorMessage);
    }
  }

  getIMData() async {
    await Future.wait([
      setOfflinePushInfo(),
    ]);
  }

  Future<void> setOfflinePushInfo() async {
    // 这里先请求权限再上报token
    ChannelPush.requestPermission();
    final bool isUploadSuccess =
        await ChannelPush.uploadToken(PushConfig.appInfo);
    if (isUploadSuccess) {
      print("upload sueecss");
    }
  }

  @override
  Widget build(BuildContext context) {
    ScreenUtil.init(
      context,
      designSize: const Size(750, 1624),
      minTextAdapt: true,
    );

    final theme = Provider.of<DefaultThemeData>(context).theme;
    return Stack(
      children: [
        Positioned(
            bottom: CommonUtils.adaptHeight(200),
            child: Container(
              padding: const EdgeInsets.fromLTRB(16, 40, 16, 0),
              decoration: const BoxDecoration(
                //背景
                color: Colors.white,
                borderRadius: BorderRadius.only(
                    topLeft: Radius.circular(30.0),
                    topRight: Radius.circular(30.0),
                    bottomLeft: Radius.circular(30.0),
                    bottomRight: Radius.circular(30.0)),
                //设置四周边框
              ),
              // color: Colors.white,
              height: MediaQuery.of(context).size.height -
                  CommonUtils.adaptHeight(600),

              width: MediaQuery.of(context).size.width,
              child: Form(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      imt("国家/地区"),
                      style: TextStyle(
                          fontWeight: FontWeight.w700,
                          fontSize: CommonUtils.adaptFontSize(34)),
                    ),
                    CountryListPick(
                      appBar: AppBar(
                        // backgroundColor: Colors.blue,
                        title: Text(imt("选择你的国家区号"),
                            style: const TextStyle(fontSize: 17)),
                        flexibleSpace: Container(
                          decoration: BoxDecoration(
                            gradient: LinearGradient(colors: [
                              theme.lightPrimaryColor ??
                                  CommonColor.lightPrimaryColor,
                              theme.primaryColor ?? CommonColor.primaryColor
                            ]),
                          ),
                        ),
                      ),

                      // if you need custome picker use this
                      pickerBuilder: (context, CountryCode? countryCode) {
                        return Row(
                          children: [
                            // 屏蔽伊朗 98
                            // 朝鲜 82 850
                            // 叙利亚 963
                            // 古巴 53
                            Text(
                                "${countryName == "China" ? "中国大陆" : countryName}(${countryCode?.dialCode})",
                                style: TextStyle(
                                    color: const Color.fromRGBO(17, 17, 17, 1),
                                    fontSize: CommonUtils.adaptFontSize(32))),
                            const Spacer(),
                            const Icon(
                              Icons.arrow_drop_down,
                              color: Color.fromRGBO(17, 17, 17, 0.8),
                            ),
                          ],
                        );
                      },

                      // To disable option set to false
                      theme: CountryTheme(
                          isShowFlag: false,
                          isShowTitle: true,
                          isShowCode: true,
                          isDownIcon: true,
                          showEnglishName: true,
                          searchHintText: imt("请使用英文搜索"),
                          searchText: imt("搜索")),
                      // Set default value
                      initialSelection: '+86',
                      onChanged: (code) {
                        setState(() {
                          dialCode = code?.dialCode ?? "+86";
                          countryName = code?.name ?? imt("中国大陆");
                        });
                      },
                      useUiOverlay: false,
                      // Whether the country list should be wrapped in a SafeArea
                      useSafeArea: false,
                    ),
                    Container(
                      decoration: const BoxDecoration(
                          border: Border(
                              bottom:
                                  BorderSide(width: 1, color: Colors.grey))),
                    ),
                    Padding(
                      padding:
                          EdgeInsets.only(top: CommonUtils.adaptFontSize(34)),
                      child: Text(
                        imt("手机号"),
                        style: TextStyle(
                          fontWeight: FontWeight.w700,
                          fontSize: CommonUtils.adaptFontSize(34),
                        ),
                      ),
                    ),
                    TextField(
                      controller: telEtController,
                      decoration: InputDecoration(
                        contentPadding:
                            EdgeInsets.only(left: CommonUtils.adaptWidth(14)),
                        hintText: imt("请输入手机号"),
                        hintStyle:
                            TextStyle(fontSize: CommonUtils.adaptFontSize(32)),
                        //
                      ),
                      keyboardType: TextInputType.phone,
                      onChanged: (v) {
                        setState(() {
                          tel = v;
                        });
                      },
                    ),
                    Padding(
                        child: Text(
                          imt("验证码"),
                          style: TextStyle(
                              fontWeight: FontWeight.w700,
                              fontSize: CommonUtils.adaptFontSize(34)),
                        ),
                        padding: EdgeInsets.only(
                          top: CommonUtils.adaptHeight(35),
                        )),
                    Row(
                      children: [
                        Expanded(
                          child: TextField(
                            controller: userSigEtController,
                            decoration: InputDecoration(
                              contentPadding: const EdgeInsets.only(left: 5),
                              hintText: imt("请输入验证码"),
                              hintStyle: TextStyle(
                                  fontSize: CommonUtils.adaptFontSize(32)),
                            ),
                            keyboardType: TextInputType.number,
                            //校验密码
                            onChanged: (value) {
                              if ('$code$code' == value && value.length > 5) {
                                //键入重复的情况
                                setState(() {
                                  userSigEtController.value = TextEditingValue(
                                    text: code, //不赋值新的 用旧的;
                                    selection: TextSelection.fromPosition(
                                      TextPosition(
                                          affinity: TextAffinity.downstream,
                                          offset: code.length),
                                    ), //  此处是将光标移动到最后,
                                  );
                                });
                              } else {
                                //第一次输入验证码
                                setState(() {
                                  userSigEtController.value = TextEditingValue(
                                    text: value,
                                    selection: TextSelection.fromPosition(
                                      TextPosition(
                                          affinity: TextAffinity.downstream,
                                          offset: value.length),
                                    ), //  此处是将光标移动到最后,
                                  );
                                  code = value;
                                });
                              }
                            },
                          ),
                        ),
                        SizedBox(
                          width: CommonUtils.adaptWidth(200),
                          child: ElevatedButton(
                            child: isGeted
                                ? Text(timer.toString())
                                : Text(
                                    imt("获取验证码"),
                                    style: TextStyle(
                                      color: Colors.white,
                                      fontSize: CommonUtils.adaptFontSize(24),
                                    ),
                                  ),
                            onPressed: isGeted
                                ? null
                                : () {
                                    //获取验证码
                                    FocusScope.of(context).unfocus();
                                    getLoginCode(context);
                                  },
                          ),
                        )
                      ],
                    ),
                    Container(
                      margin: EdgeInsets.only(
                        top: CommonUtils.adaptHeight(46),
                      ),
                      child: Row(
                        children: [
                          Expanded(
                            child: ElevatedButton(
                              child: Text(imt("登录")),
                              onPressed: isValid ? smsFristLogin : null,
                            ),
                          )
                        ],
                      ),
                    ),
                    Expanded(
                      child: Container(),
                    )
                  ],
                ),
              ),
            ))
      ],
    );
  }
}
文件：/im-flutter-uikit/lib/src/pages/no_connect.dart
import 'package:connectivity_plus/connectivity_plus.dart';
import 'package:flutter/material.dart';
import 'package:timuikit/utils/toast.dart';
import 'package:timuikit/i18n/i18n_utils.dart';

//
class NoConnectivityPage extends StatefulWidget {
  const NoConnectivityPage({Key? key}) : super(key: key);

  @override
  State<StatefulWidget> createState() => NoConnectivityPageState();
}

class NoConnectivityPageState extends State<NoConnectivityPage> {
  final Connectivity _connectivity = Connectivity();
  bool hasNetwork = false;
  testConnectivity() async {
    ConnectivityResult connectivityResult =
        await _connectivity.checkConnectivity();
    if (connectivityResult == ConnectivityResult.none) {
      Utils.toast(imt("当前无网络"));
      setState(() {
        hasNetwork = false;
      });
    } else {
      setState(() {
        hasNetwork = true;
      });
      Navigator.pop(context);
    }
  }

  @override
  Widget build(BuildContext context) {
    return WillPopScope(
        onWillPop: () async {
          return hasNetwork;
        },
        child: Center(
            child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Text(imt("当前无网络"),
                style: const TextStyle(fontSize: 26, color: Colors.black45)),
            const Icon(Icons.wifi_off, size: 44, color: Colors.black45),
            TextButton(
              child: Text(imt("重试网络")),
              onPressed: testConnectivity, // 关闭对话框
            ),
          ],
        )));
  }
}
文件：/im-flutter-uikit/lib/src/pages/privacy/privacy_webview.dart
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:tim_ui_kit/ui/utils/color.dart';
import 'package:timuikit/src/provider/theme.dart';
import 'package:webview_flutter/webview_flutter.dart';

class PrivacyDocument extends StatelessWidget {
  final String title;
  final String url;
  const PrivacyDocument({Key? key, required this.title, required this.url})
      : super(key: key);

  @override
  Widget build(BuildContext context) {
    final theme = Provider.of<DefaultThemeData>(context).theme;
    return Scaffold(
      resizeToAvoidBottomInset: false,
      appBar: AppBar(
        shadowColor: theme.weakDividerColor,
        elevation: 1,
        iconTheme: const IconThemeData(
          color: Colors.white,
        ),
        title: Text(
          title,
          style: const TextStyle(fontSize: 17),
        ),
        leading: IconButton(
          padding: const EdgeInsets.only(left: 16),
          icon: Image.asset(
            'images/arrow_back.png',
            package: 'tim_ui_kit',
            height: 34,
            width: 34,
          ),
          // 返回Home事件
          onPressed: () => {Navigator.pop(context)},
        ),
        centerTitle: true,
        flexibleSpace: Container(
          decoration: BoxDecoration(
            gradient: LinearGradient(colors: [
              theme.lightPrimaryColor ?? CommonColor.lightPrimaryColor,
              theme.primaryColor ?? CommonColor.primaryColor
            ]),
          ),
        ),
      ),
      body: SizedBox(
        width: MediaQuery.of(context).size.width,
        child: WebView(
            initialUrl: url, javascriptMode: JavascriptMode.unrestricted),
      ),
    );
  }
}
文件：/im-flutter-uikit/lib/src/pages/skin/skin_page.dart
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:tim_ui_kit/ui/utils/color.dart';
import 'package:timuikit/i18n/i18n_utils.dart';
import 'package:timuikit/src/provider/theme.dart';
import 'package:timuikit/utils/theme.dart';

class SkinPage extends StatelessWidget {
  const SkinPage({Key? key}) : super(key: key);

  List<Widget> skinBuilder() => ThemeType.values
      .map((type) => SkinCube(
            currentThemeType: type,
          ))
      .toList();

  @override
  Widget build(BuildContext context) {
    final theme = Provider.of<DefaultThemeData>(context).theme;
    return Scaffold(
        appBar: AppBar(
          iconTheme: const IconThemeData(
            color: Colors.white,
          ),
          shadowColor: theme.weakDividerColor,
          elevation: 1,
          title: Text(
            imt("更换皮肤"),
            style: const TextStyle(color: Colors.white, fontSize: 17),
          ),
          flexibleSpace: Container(
            decoration: BoxDecoration(
              gradient: LinearGradient(colors: [
                theme.lightPrimaryColor ?? CommonColor.lightPrimaryColor,
                theme.primaryColor ?? CommonColor.primaryColor
              ]),
            ),
          ),
        ),
        body: Container(
            padding: const EdgeInsets.only(top: 16),
            height: MediaQuery.of(context).size.height,
            width: MediaQuery.of(context).size.width,
            color: theme.weakBackgroundColor,
            child: Wrap(
              spacing: 16.0, // 主轴(水平)方向间距
              runSpacing: 16.0, // 纵轴（垂直）方向间距
              alignment: WrapAlignment.center, //沿主轴方向居中
              children: skinBuilder(),
            )));
  }
}

class SkinCube extends StatelessWidget {
  final ThemeType currentThemeType;
  const SkinCube({Key? key, required this.currentThemeType}) : super(key: key);

  onThemeChanged(BuildContext context, ThemeType type) {
    if (currentThemeType != type) {
      Provider.of<DefaultThemeData>(context, listen: false).currentThemeType =
          currentThemeType;
    }
  }

  @override
  Widget build(BuildContext context) {
    final themeType = Provider.of<DefaultThemeData>(context).currentThemeType;
    return SizedBox(
        height: 128,
        width: MediaQuery.of(context).size.width * 0.45,
        child: GestureDetector(
            onTap: () {
              onThemeChanged(context, themeType);
            },
            child: DecoratedBox(
                decoration: BoxDecoration(
                  borderRadius: const BorderRadius.all(Radius.circular(8)),
                  gradient: LinearGradient(colors: [
                    DefTheme.defaultTheme[currentThemeType]!
                            .lightPrimaryColor ??
                        CommonColor.lightPrimaryColor,
                    DefTheme.defaultTheme[currentThemeType]!.primaryColor ??
                        CommonColor.primaryColor
                  ]),
                ),
                child: Stack(
                  children: [
                    Positioned(
                      top: 0,
                      right: 0,
                      child: Checkbox(
                          onChanged: (bool? value) {
                            if (value != null && value == true) {
                              onThemeChanged(context, themeType);
                            }
                          },
                          value: themeType == currentThemeType,
                          side: const BorderSide(color: Colors.white, width: 1),
                          shape: const CircleBorder()),
                    ),
                    Positioned(
                        bottom: 0,
                        child: Container(
                            width: MediaQuery.of(context).size.width * 0.45,
                            height: 32,
                            decoration: BoxDecoration(
                                color: Colors.black.withAlpha(64),
                                borderRadius: const BorderRadius.vertical(
                                    bottom: Radius.circular(8))),
                            child: Center(
                                child: Text(
                                    DefTheme
                                        .defaultThemeName[currentThemeType]!,
                                    style: const TextStyle(
                                        color: Colors.white, fontSize: 16)))))
                  ],
                ))));
  }
}
文件：/im-flutter-uikit/lib/src/provider/custom_sticker_package.dart
import 'package:flutter/material.dart';
import 'package:tim_ui_kit_sticker_plugin/utils/tim_ui_kit_sticker_data.dart';

class CustomStickerPackageData extends ChangeNotifier {
  List<CustomStickerPackage> _customStickerPackageList = [];
  int _selectedIdx = 0;
  List<int> _emojiIndexList = [];
  List<CustomStickerPackage> get customStickerPackageList {
    return _customStickerPackageList;
  }

  int get selectedIdx {
    return _selectedIdx;
  }

  List<int> get emojiIndexList {
    return _emojiIndexList;
  }

  set selectedIdx(int idx) {
    _selectedIdx = idx;
    notifyListeners();
  }

  set customStickerPackageList(List<CustomStickerPackage> list) {
    _customStickerPackageList = list;
    list.asMap().keys.forEach((customStickerPackageIndex) {
      if (!_customStickerPackageList[customStickerPackageIndex]
          .isCustomSticker) {
        _emojiIndexList.add(customStickerPackageIndex);
      }
    });
    notifyListeners();
  }

  addStickerPackage(CustomStickerPackage sticker) {
    if (!sticker.isCustomSticker) {
      _emojiIndexList.add(_customStickerPackageList.length);
    }
    _customStickerPackageList.add(sticker);
    notifyListeners();
  }

  removeEmojiPackage(CustomStickerPackage sticker) {
  }

  clearStickerPackageList() {
    _customStickerPackageList = [];
    _selectedIdx = 0;
    _emojiIndexList = [];
  }
}
文件：/im-flutter-uikit/lib/src/provider/discuss.dart
import 'package:flutter/foundation.dart';
import 'package:tim_ui_kit/tim_ui_kit.dart';

class DiscussData with ChangeNotifier {
  List<Map<String, dynamic>> _channelList = [];
  final List<V2TimConversation> _conversationList = List.empty(growable: true);
  List<V2TimConversation> get conversationList => _conversationList;
  List<Map<String, dynamic>> get channelList => _channelList;
  int _currentSelectedChannel = 0;
  int get currentSelectedChannel => _currentSelectedChannel;

  List<Map<String, dynamic>> _discussList = [];
  List<Map<String, dynamic>> get discussList => _discussList;

  updateDiscussList(List<Map<String, dynamic>> list) {
    _discussList = list;
    notifyListeners();
  }

  List<Map<String, dynamic>> getDiscussListByCategrey(String catgrey) {
    return _discussList
        .where((element) => element['category'] == catgrey)
        .toList();
  }

  updateCurrentSelectedChannel(int current) {
    _currentSelectedChannel = current;
    notifyListeners();
  }

  updateChannelList(List<Map<String, dynamic>> list) {
    _channelList = list;
    notifyListeners();
  }

  Map<String, dynamic>? get currentChannelInfo {
    return _channelList.isNotEmpty
        ? _channelList[_currentSelectedChannel]
        : null;
  }

  conversationItemChange(List<V2TimConversation> list) {
    for (int element = 0; element < list.length; element++) {
      int index = _conversationList.indexWhere(
          (item) => item.conversationID == list[element].conversationID);
      if (index > -1) {
        _conversationList.setAll(index, [list[element]]);
      } else {
        _conversationList.add(list[element]);
      }
    }
    sort();
    notifyListeners();
  }

  addNewConversation(List<V2TimConversation?> list) {
    _conversationList.addAll(List.from(list));
    sort();
    notifyListeners();
  }

  sort() {
    _conversationList.sort((a, b) => b.orderkey!.compareTo(a.orderkey!));
  }
}
文件：/im-flutter-uikit/lib/src/provider/login_user_Info.dart
// ignore_for_file: file_names

import 'package:flutter/widgets.dart';
import 'package:tim_ui_kit/tim_ui_kit.dart';

class LoginUserInfo with ChangeNotifier {
  V2TimUserFullInfo _loginUserInfo = V2TimUserFullInfo();
  V2TimUserFullInfo get loginUserInfo {
    return _loginUserInfo;
  }

  setLoginUserInfo(V2TimUserFullInfo info) {
    _loginUserInfo = info;
    notifyListeners();
  }
}
文件：/im-flutter-uikit/lib/src/provider/theme.dart
import 'package:flutter/foundation.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:tim_ui_kit/tim_ui_kit.dart';
import 'package:tim_ui_kit/ui/utils/color.dart';
import 'package:timuikit/utils/theme.dart';

class DefaultThemeData with ChangeNotifier {
  ThemeType _currentThemeType = ThemeType.brisk;
  final CoreServicesImpl _coreInstance = TIMUIKitCore.getInstance();
  TUITheme _theme = CommonColor.defaultTheme;

  TUITheme get theme {
    return _theme;
  }

  set theme(TUITheme theme) {
    _theme = theme;
    notifyListeners();
  }

  ThemeType get currentThemeType => _currentThemeType;

  set currentThemeType(ThemeType type) {
    _currentThemeType = type;
    Future<SharedPreferences> _prefs = SharedPreferences.getInstance();
    _prefs.then((prefs) {
      prefs.setString("themeType", type.toString());
    });
    _coreInstance.setTheme(theme: DefTheme.defaultTheme[type]!);
    theme = DefTheme.defaultTheme[type]!;
    notifyListeners();
  }
}
文件：/im-flutter-uikit/lib/src/widgets/login_captcha.dart
import 'dart:convert';

import 'package:flutter/material.dart';
import 'package:timuikit/i18n/i18n_utils.dart';
import 'package:timuikit/src/config.dart';
import 'package:timuikit/utils/toast.dart';
import 'package:webview_flutter/webview_flutter.dart';

enum CaptchaStatus { unReady, loading, ready }

class LoginCaptcha extends StatefulWidget {
  const LoginCaptcha({Key? key, required this.onSuccess, required this.onClose})
      : super(key: key);
  final void Function(dynamic obj) onSuccess;
  final void Function() onClose;

  @override
  _LoginCaptchaState createState() => _LoginCaptchaState();
}

class _LoginCaptchaState extends State<LoginCaptcha> {
  CaptchaStatus captchaStatus = CaptchaStatus.unReady;

  double getSize() {
    switch (captchaStatus) {
      case CaptchaStatus.unReady:
        return 0;
      case CaptchaStatus.loading:
        return 130;
      case CaptchaStatus.ready:
        return 260;
    }
  }

  @override
  build(BuildContext context) {
    return Container(
        color: Colors.transparent,
        child: Center(
          child: SizedBox(
            width: getSize(),
            height: getSize(),
            child: WebView(
              initialUrl: IMDemoConfig.captchaUrl,
              javascriptMode: JavascriptMode.unrestricted,
              javascriptChannels: {
                JavascriptChannel(
                    name: 'onLoading',
                    onMessageReceived: (JavascriptMessage message) {
                      // 防水墙loading
                      setState(() {
                        captchaStatus = CaptchaStatus.loading;
                      });
                    }),
                JavascriptChannel(
                    name: 'onCaptchaReady',
                    onMessageReceived: (JavascriptMessage message) {
                      // 防水墙ready
                      setState(() {
                        captchaStatus = CaptchaStatus.ready;
                      });
                    }),
                JavascriptChannel(
                    name: 'messageHandler',
                    onMessageReceived: (JavascriptMessage message) {
                      try {
                        var messageObj = jsonDecode(message.message);
                        widget.onSuccess(messageObj);
                      } catch (e) {
                        Utils.toast(imt("图片验证码校验失败"));
                      }
                      setState(() {
                        captchaStatus = CaptchaStatus.unReady;
                      });
                      widget.onClose();
                    }),
                JavascriptChannel(
                    name: 'capClose',
                    onMessageReceived: (JavascriptMessage message) {
                      setState(() {
                        captchaStatus = CaptchaStatus.unReady;
                      });
                      widget.onClose();
                    })
              },
            ),
          ),
        ));
  }
}
文件：/im-flutter-uikit/lib/src/widgets/message_item/location_message_item.dart
import 'package:flutter/material.dart';
import 'package:tim_ui_kit/tim_ui_kit.dart';
import 'package:tim_ui_kit/ui/utils/color.dart';
import 'package:timuikit/i18n/i18n_utils.dart';
import 'package:timuikit/src/provider/theme.dart';
import 'package:provider/provider.dart';

class LocationMessageItem extends StatelessWidget{
  final bool? isSelf;
  final V2TimMessage message;

  const LocationMessageItem({Key? key, this.isSelf, required this.message}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    // return LocationMsgElement(
    //   isAllowCurrentLocation: false,
    //   messageID: message.msgID,
    //   locationElem: LocationMessage(
    //     longitude: message.locationElem!.longitude,
    //     latitude: message.locationElem!.latitude,
    //     desc: message.locationElem?.desc ?? "",
    //   ),
    //   isFromSelf: message.isSelf ?? false,
    //   isShowJump: isShowJump,
    //   clearJump: clearJump,
    //   mapBuilder: (onMapLoadDone, mapKey) => BaiduMap(
    //     onMapLoadDone: onMapLoadDone,
    //     key: mapKey,
    //   ),
    //   locationUtils: LocationUtils(BaiduMapService()),
    // );

    String dividerForDesc = "/////";
    final theme = Provider.of<DefaultThemeData>(context).theme;
    final isFromSelf = isSelf ?? true;
    final borderRadius = isFromSelf
        ? const BorderRadius.only(
        topLeft: Radius.circular(10),
        topRight: Radius.circular(2),
        bottomLeft: Radius.circular(10),
        bottomRight: Radius.circular(10))
        : const BorderRadius.only(
        topLeft: Radius.circular(2),
        topRight: Radius.circular(10),
        bottomLeft: Radius.circular(10),
        bottomRight: Radius.circular(10));

    return Container(
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: borderRadius,
        border: Border.all(color: hexToColor("DDDDDD")),
      ),
      constraints: const BoxConstraints(maxWidth: 240),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Container(
              padding: const EdgeInsets.fromLTRB(10, 8, 10, 5),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(
                    message.locationElem?.desc
                        ?.split(dividerForDesc)[0] ??
                        imt("腾讯大厦"),
                    softWrap: true,
                    style: const TextStyle(fontSize: 16),
                  ),
                  const SizedBox(
                    height: 2,
                  ),
                  Text(
                    message.locationElem?.desc
                        ?.split(dividerForDesc)[0] ??
                        imt("深圳市深南大道10000号"),
                    softWrap: true,
                    style: const TextStyle(
                        fontSize: 12, color: CommonColor.weakTextColor),
                  ),
                ],
              )),
          SizedBox(
            height: 100,
            child: Stack(
              alignment: AlignmentDirectional.center,
              children: [
                Container(
                  decoration: BoxDecoration(
                    color: theme.weakDividerColor,
                  ),
                ),
                Center(
                  child: Text(
                    imt("位置消息维护中"),
                    textAlign: TextAlign.center,
                    style: TextStyle(
                        fontSize: 12, color: theme.darkTextColor),
                  ),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

}文件：/im-flutter-uikit/lib/utils/GenerateUserSig.dart
// ignore_for_file: file_names

import 'dart:convert';

import 'package:crypto/crypto.dart';
import 'package:archive/archive.dart';
import 'package:archive/archive_io.dart';

/// 生成腾讯云即时通信测试用userSig
/// Generate userSig for Tencent Cloud instant messaging test
///
class GenerateTestUserSig {
  GenerateTestUserSig({required this.sdkappid, required this.key});
  int sdkappid;
  String key;

  /// 生成UserSig
  /// Generate UserSig
  ///
  String genSig({
    required String identifier,
    required int expire,
  }) {
    int currTime = _getCurrentTime();
    String sig = '';
    Map<String, dynamic> sigDoc = <String, dynamic>{};
    sigDoc.addAll({
      "TLS.ver": "2.0",
      "TLS.identifier": identifier,
      // ignore: unnecessary_this
      "TLS.sdkappid": this.sdkappid,
      "TLS.expire": expire,
      "TLS.time": currTime,
    });

    sig = _hmacsha256(
      identifier: identifier,
      currTime: currTime,
      expire: expire,
    );
    sigDoc['TLS.sig'] = sig;
    String jsonStr = json.encode(sigDoc);
    List<int>? compress = const ZLibEncoder().encode(utf8.encode(jsonStr));
    return _escape(content: base64.encode(compress));
  }

  int _getCurrentTime() {
    return (DateTime.now().millisecondsSinceEpoch / 1000).floor();
  }

  String _hmacsha256({
    required String identifier,
    required int currTime,
    int expire = 30 * 24 * 60 * 60,
  }) {
    int sdkappid = this.sdkappid;
    String contentToBeSigned =
        "TLS.identifier:$identifier\nTLS.sdkappid:$sdkappid\nTLS.time:$currTime\nTLS.expire:$expire\n";
    Hmac hmacSha256 = Hmac(sha256, utf8.encode(key));
    Digest hmacSha256Digest =
        hmacSha256.convert(utf8.encode(contentToBeSigned));
    return base64.encode(hmacSha256Digest.bytes);
  }

  String _escape({
    required String content,
  }) {
    return content
        .replaceAll('+', '*')
        .replaceAll('/', '-')
        .replaceAll('=', '_');
  }
}
文件：/im-flutter-uikit/lib/utils/commonUtils.dart
// ignore_for_file: file_names

import 'package:flutter_screenutil/flutter_screenutil.dart';

class CommonUtils {
  static double adaptHeight(double height) {
    return height.h;
  }

  static double adaptWidth(double width) {
    return width.h;
  }

  static double adaptFontSize(double fontSize) {
    return fontSize.sp;
  }
}
文件：/im-flutter-uikit/lib/utils/constant.dart
// ignore_for_file: constant_identifier_names
import 'package:timuikit/i18n/i18n_utils.dart';
import 'package:timuikit/utils/custom_emoji_face_data.dart';

class Const {
  // 时间戳消息 前端模拟
  static const int V2TIM_ELEM_TYPE_TIME = 11;
  static const int REQUEST_ERROR_CODE = -9;
  static const int SERVER_ERROR_CODE = -99;
  // 消息滚动的底部 前端模拟
  static const int V2TIM_ELEM_TYPE_REFRESH = -999;
  // 房间消息的底部 （之后没有数据） 前端模拟
  static const int V2TIM_ELEM_TYPE_END = -9999;
  static List weekdayMap = [
    '',
    imt("星期一"),
    imt("星期二"),
    imt("星期三"),
    imt("星期四"),
    imt("星期五"),
    imt("星期六"),
    imt("星期七")
  ];

  static const DAY_SEC = 86400;
  static const HOUR_SEC = 3600;
  static const MIN_SEC = 60;

  static const SEC_SERIES = [HOUR_SEC, MIN_SEC];

  static const V2_TIM_IMAGE_TYPES = {
    'ORIGINAL': 0,
    'BIG': 1,
    'SMALL': 2,
  };

  static final List<CustomEmojiFaceData> emojiList = [
    const CustomEmojiFaceData(name: '4350', icon: "menu@2x.png", list: [
      "yz00@2x.png",
      "yz01@2x.png",
      "yz02@2x.png",
      "yz03@2x.png",
      "yz04@2x.png",
      "yz05@2x.png",
      "yz06@2x.png",
      "yz07@2x.png",
      "yz08@2x.png",
      "yz09@2x.png",
      "yz10@2x.png",
      "yz11@2x.png",
      "yz12@2x.png",
      "yz13@2x.png",
      "yz14@2x.png",
      "yz15@2x.png",
      "yz16@2x.png",
      "yz17@2x.png"
    ]),
    const CustomEmojiFaceData(name: "4351", icon: "menu@2x.png", list: [
      "ys00@2x.png",
      "ys01@2x.png",
      "ys02@2x.png",
      "ys03@2x.png",
      "ys04@2x.png",
      "ys05@2x.png",
      "ys06@2x.png",
      "ys07@2x.png",
      "ys08@2x.png",
      "ys09@2x.png",
      "ys10@2x.png",
      "ys11@2x.png",
      "ys12@2x.png",
      "ys13@2x.png",
      "ys14@2x.png",
      "ys15@2x.png"
    ]),
    const CustomEmojiFaceData(name: "4352", icon: "menu@2x.png", list: [
      "gcs00@2x.png",
      "gcs01@2x.png",
      "gcs02@2x.png",
      "gcs03@2x.png",
      "gcs04@2x.png",
      "gcs05@2x.png",
      "gcs06@2x.png",
      "gcs07@2x.png",
      "gcs08@2x.png",
      "gcs09@2x.png",
      "gcs10@2x.png",
      "gcs11@2x.png",
      "gcs12@2x.png",
      "gcs13@2x.png",
      "gcs14@2x.png",
      "gcs15@2x.png",
      "gcs16@2x.png"
    ])
  ];
}
文件：/im-flutter-uikit/lib/utils/custom_emoji_face_data.dart
class CustomEmojiFaceData {
  const CustomEmojiFaceData(
      {required this.name, required this.icon, required this.list});

  final String name;
  final String icon;
  final List<String> list;
}
文件：/im-flutter-uikit/lib/utils/discuss.dart
// 频道 讨论区Api

import 'package:dio/dio.dart';
import 'package:timuikit/src/config.dart';
import 'package:timuikit/utils/request.dart';


class DisscussApi {
  static String baseUrl = IMDemoConfig.productEnv
      ? 'https://service-brnvps08-1256635546.gz.apigw.tencentcs.com/release/'
      : 'https://service-7x3j2zkw-1256635546.gz.apigw.tencentcs.com/release/';
  // static String baseUrl = 'http://127.0.0.1:3000/';
  // 获取讨论区列表
  static Future<Map<String, dynamic>> getDiscussList({
    int? offset = 0,
    int? limit = 10,
  }) async {
    Response<Map<String, dynamic>> data = await appRequest(
      path: "/disscuss/getList",
      baseUrl: baseUrl,
      params: {
        "offset": offset,
        "limit": limit,
      },
    );
    Map<String, dynamic> res = data.data!;
    return res;
  }

  // 判断群组是否是讨论区
  static Future<Map<String, dynamic>> isValidateDisscuss({
    required String imGroupId,
  }) async {
    Response<Map<String, dynamic>> data = await appRequest(
      path: "/disscuss/isValidateDisscuss",
      baseUrl: baseUrl,
      params: {
        "imGroupId": imGroupId,
      },
    );
    Map<String, dynamic> res = data.data!;
    return res;
  }

  // 获取讨论区详情
  static Future<Map<String, dynamic>> getDisscussInfo({
    required String imGroupId,
  }) async {
    Response<Map<String, dynamic>> data = await appRequest(
      path: "/disscuss/getDisscussInfo",
      baseUrl: baseUrl,
      params: {
        "imGroupId": imGroupId,
      },
    );
    Map<String, dynamic> res = data.data!;
    return res;
  }

  // 创建话题
  static Future<Map<String, dynamic>> addTopic({
    required String title,
    required String tags,
    required String creator,
    required String disscussImGroupId,
    required String aboutMessages,
  }) async {
    Response<Map<String, dynamic>> data = await appRequest(
      path: "/disscuss/addTopic",
      baseUrl: baseUrl,
      method: "post",
      data: {
        "disscussImGroupId": disscussImGroupId,
        "title": title,
        "tags": tags,
        "creator": creator,
        "aboutMessages": aboutMessages,
      },
    );
    Map<String, dynamic> res = data.data!;
    return res;
  }

  // 获取话题列表
  static Future<Map<String, dynamic>> getTopicList({
    required int type,
    String? userId = '',
    int? limit = 10,
    int? offset = 0,
    required String disscussImGroupId,
  }) async {
    Response<Map<String, dynamic>> data = await appRequest(
      path: "/disscuss/getTopicList",
      baseUrl: baseUrl,
      params: {
        "disscussImGroupId": disscussImGroupId,
        "type": type,
        "userId": userId,
        "limit": limit,
        "offset": offset,
      },
    );
    Map<String, dynamic> res = data.data!;
    return res;
  }

// 加入话题
  static Future<Map<String, dynamic>> joinTopic({
    required String userId,
    required String imGroupId,
  }) async {
    Response<Map<String, dynamic>> data = await appRequest(
      path: "/disscuss/joinTopic",
      baseUrl: baseUrl,
      method: 'post',
      data: {
        "imGroupId": imGroupId,
        "userId": userId,
      },
    );
    Map<String, dynamic> res = data.data!;
    return res;
  }

  // 是否是管理员
  static Future<Map<String, dynamic>> isValidateAdimn({
    required String userId,
  }) async {
    Response<Map<String, dynamic>> data = await appRequest(
      path: "/disscuss/isValidateAdmin",
      baseUrl: baseUrl,
      params: {
        "userId": userId,
      },
    );
    Map<String, dynamic> res = data.data!;
    return res;
  }

  // 全部管理区
  static Future<Map<String, dynamic>> allDiscussAndTopic() async {
    Response<Map<String, dynamic>> data = await appRequest(
      path: "/disscuss/allDiscussAndTopic",
      baseUrl: baseUrl,
    );
    Map<String, dynamic> res = data.data!;
    return res;
  }

  static Future<Map<String, dynamic>> getTopicInfo({
    required String imGroupId,
  }) async {
    Response<Map<String, dynamic>> data = await appRequest(
      path: "/disscuss/getTopicInfo",
      baseUrl: baseUrl,
      params: {
        "imGroupId": imGroupId,
      },
    );
    Map<String, dynamic> res = data.data!;
    return res;
  }

  static Future<Map<String, dynamic>> updateTopicStatus({
    required String imGroupId,
    required String status,
  }) async {
    Response<Map<String, dynamic>> data = await appRequest(
      path: "/disscuss/updateTopicStatus",
      baseUrl: baseUrl,
      method: "post",
      data: {
        "imGroupId": imGroupId,
        "status": status,
      },
    );
    Map<String, dynamic> res = data.data!;
    return res;
  }

  static Future<Map<String, dynamic>> getChannelList() async {
    Response<Map<String, dynamic>> data = await appRequest(
      path: "/disscuss/getChanelList",
      baseUrl: baseUrl,
      method: "get",
    );
    Map<String, dynamic> res = data.data!;
    return res;
  }
}
文件：/im-flutter-uikit/lib/utils/platform.dart
import 'dart:io';

import 'package:device_info_plus/device_info_plus.dart';

class PlatformUtils {
  static Future<bool> isAndroidEmulator() async {
    if (Platform.isAndroid) {
      final deviceInfoPlugin = DeviceInfoPlugin();
      final androidInfo = await deviceInfoPlugin.androidInfo;
      final isPhysicalDevice = androidInfo.isPhysicalDevice ?? false;
      return !isPhysicalDevice;
    }
    return false;
  }
}
文件：/im-flutter-uikit/lib/utils/request.dart
import 'package:dio/dio.dart';
import 'package:timuikit/src/config.dart';
import 'package:timuikit/utils/constant.dart';
import 'package:timuikit/i18n/i18n_utils.dart';

Future<Response<Map<String, dynamic>>> appRequest({
  String? method = 'get',
  Map<String, dynamic>? params,
  required String path,
  dynamic data,
  String? baseUrl,
}) async {
  BaseOptions options = BaseOptions(
    baseUrl: baseUrl ?? IMDemoConfig.smsLoginHttpBase,
    method: method,
    sendTimeout: 6000,
    queryParameters: params,
  );
  try {
    return await Dio(options).request<Map<String, dynamic>>(
      path,
      data: data,
      queryParameters: params,
    );
  } on DioError catch (e) {
    // Server error 服务端问题
    if (e.response != null) {
      final option8 = e.message;
      return Response(data: {
        'errorCode': Const.SERVER_ERROR_CODE,
        'errorMessage':
            imt_para("服务器错误：{{option8}}", "服务器错误：$option8")(option8: option8),
      }, requestOptions: e.requestOptions);
    } else {
      // Request error 请求时的问题
      final option8 = e.message;
      return Response(data: {
        'errorCode': Const.REQUEST_ERROR_CODE,
        'errorMessage':
            imt_para("请求错误：{{option8}}", "请求错误：$option8")(option8: option8),
      }, requestOptions: e.requestOptions);
    }
  }
}
文件：/im-flutter-uikit/lib/utils/smsLogin.dart
// 短信验证码登录，开发者用不到，可以去掉此部分

// ignore_for_file: file_names

import 'package:dio/dio.dart';
import 'package:timuikit/src/config.dart';
import 'package:timuikit/utils/request.dart';

class SmsLogin {
  static Future<Map<String, dynamic>?> getGlsb() async {
    Response<Map<String, dynamic>> data = await appRequest(
      path: "/base/v1/gslb",
    );
    Map<String, dynamic> res = data.data!;
    return res;
  }

  // 验证防水墙验证
  // "phone"
  // "ticket"
  //  "randstr"
  static vervifyPicture({
    required String phone,
    required String ticket,
    required String randstr,
    required String appId,
  }) async {
    Response<Map<String, dynamic>> data = await appRequest(
        path: "/base/v1/auth_users/user_verify_by_picture",
        method: "post",
        data: <String, dynamic>{
          "phone": phone,
          "appId": appId,
          "ticket": ticket,
          "randstr": randstr,
          "apaasAppId": "1027627063",
        });
    Map<String, dynamic> res = data.data!;
    return res;
  }

  // 验证码登录
  // "sessionId"
  // "phone"
  static smsFirstLogin({
    required String phone,
    required String sessionId,
    required String code,
  }) async {
    Response<Map<String, dynamic>> data = await appRequest(
        path: "/base/v1/auth_users/user_login_code",
        method: "post",
        data: <String, dynamic>{
          "sessionId": sessionId,
          "phone": phone,
          "code": code,
          "apaasAppId": "1027627063",
          "tag": "flutter_tuikit"
        });
    Map<String, dynamic> res = data.data!;
    return res;
  }

  // token登录
  // "userId"
  // "token"
  static smsTokenLogin({
    required String userId,
    required String token,
  }) async {
    Response<Map<String, dynamic>> data = await appRequest(
        path: "/base/v1/auth_users/user_login_token",
        method: "post",
        data: <String, dynamic>{
          "userId": userId,
          "token": token,
          "apaasAppId": "1027627063"
        });
    Map<String, dynamic> res = data.data!;
    return res;
  }

  static initLoginService() async {
    await Dio(BaseOptions(
      method: "get",
    )).request(
      IMDemoConfig.captchaUrl,
    );
  }

  // 修改用户信息
  static smsChangeUserInfo({
    required String userId,
    required String token,
  }) async {
    Response<Map<String, dynamic>> data = await appRequest(
        path: "/base/v1/auth_users/user_update",
        method: "post",
        data: <String, dynamic>{
          "userId": userId,
          "token": token,
          "tag": "flutter_tuikit",
          "apaasAppId": "1027627063"
        });
    Map<String, dynamic> res = data.data!;
    return res;
  }
}
文件：/im-flutter-uikit/lib/utils/theme.dart
import 'dart:ui';

import 'package:tim_ui_kit/tim_ui_kit.dart';
import 'package:timuikit/i18n/i18n_utils.dart';

enum ThemeType { solemn, brisk, bright, fantasy }

class DefTheme {
  static ThemeType themeTypeFromString(String str) {
    return ThemeType.values
        .firstWhere((e) => e.toString() == str, orElse: () => ThemeType.brisk);
  }

  static final Map<ThemeType, TUITheme> defaultTheme = {
    ThemeType.solemn: const TUITheme(
      primaryColor: Color(0xFF00449E),
      lightPrimaryColor: Color(0xFF3371CD),
    ),
    ThemeType.brisk: const TUITheme(
      primaryColor: Color(0xFF147AFF),
      lightPrimaryColor: Color(0xFFC0E1FF),
    ),
    ThemeType.bright: const TUITheme(
      primaryColor: Color(0xFFF38787),
      lightPrimaryColor: Color(0xFFFAE1B6),
    ),
    ThemeType.fantasy: const TUITheme(
      primaryColor: Color(0xFF8783F0),
      lightPrimaryColor: Color(0xFFAEB6F4),
    ),
  };

  static final Map<ThemeType, String> defaultThemeName = {
    ThemeType.solemn: imt("深沉"),
    ThemeType.brisk: imt("轻快"),
    ThemeType.bright: imt("明媚"),
    ThemeType.fantasy: imt("梦幻")
  };
}
文件：/im-flutter-uikit/lib/utils/toast.dart
import 'package:flutter/material.dart';
import 'package:fluttertoast/fluttertoast.dart';

import 'commonUtils.dart';

class Utils {
  static void toast(String msg) {
    Fluttertoast.showToast(
      msg: msg,
      toastLength: Toast.LENGTH_SHORT,
      gravity: ToastGravity.CENTER,
      timeInSecForIosWeb: 1,
      textColor: Colors.white,
      fontSize: CommonUtils.adaptFontSize(34),
      backgroundColor: Colors.black,
    );
  }

  static void toastError(int code, String desc) {
    Fluttertoast.showToast(
      msg: "code:$code,desc:$desc",
      toastLength: Toast.LENGTH_SHORT,
      gravity: ToastGravity.CENTER,
      timeInSecForIosWeb: 1,
      textColor: Colors.white,
      fontSize: CommonUtils.adaptFontSize(34),
      backgroundColor: Colors.black,
    );
  }

  static void log(Object? data) {
    bool prod =
        const bool.fromEnvironment('ISPRODUCT_ENV', defaultValue: false);
    if (!prod) {
      // ignore: avoid_print
      print("===================================");
      // ignore: avoid_print
      print("IM_DEMO_PRINT:$data");
      // ignore: avoid_print
      print("===================================");
    } else {}
  }
}
文件：/im-flutter-uikit/lib/utils/webview_page.dart
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:tim_ui_kit/ui/utils/color.dart';
import 'package:timuikit/src/provider/theme.dart';
import 'package:webview_flutter/webview_flutter.dart';
import 'package:timuikit/i18n/i18n_utils.dart';

class WebviewPage extends StatelessWidget {
  const WebviewPage({Key? key, required this.url}) : super(key: key);

  final String url;
  @override
  Widget build(BuildContext context) {
    final theme = Provider.of<DefaultThemeData>(context).theme;
    return Scaffold(
      resizeToAvoidBottomInset: false,
      appBar: AppBar(
        iconTheme: const IconThemeData(
          color: Colors.white,
        ),
        shadowColor: theme.weakDividerColor,
        elevation: 1,
        title: Text(
          imt("腾讯云即时通信IM"),
          style: const TextStyle(fontSize: 17),
        ),
        leading: SizedBox(
            child: IconButton(
          padding: const EdgeInsets.only(left: 16),
          icon: Image.asset(
            'images/arrow_back.png',
            package: 'tim_ui_kit',
            height: 34,
            width: 34,
          ),
          // 返回Home事件
          onPressed: () => {Navigator.pop(context)},
        )),
        centerTitle: true,
        flexibleSpace: Container(
          decoration: BoxDecoration(
            gradient: LinearGradient(colors: [
              theme.lightPrimaryColor ?? CommonColor.lightPrimaryColor,
              theme.primaryColor ?? CommonColor.primaryColor
            ]),
          ),
        ),
      ),
      body: SizedBox(
        width: MediaQuery.of(context).size.width,
        child: WebView(
            initialUrl: url, javascriptMode: JavascriptMode.unrestricted),
      ),
    );
  }
}
文件：/im-flutter-uikit/lib/utils/push/push_constant.dart
// ignore_for_file: constant_identifier_names, slash_for_doc_comments

import 'package:tim_ui_kit_push_plugin/model/appInfo.dart';

class PushConfig{
  /// 华为离线推送参数start ******/
  // 在腾讯云控制台上传第三方推送证书后分配的证书ID
  static const HWPushBuzID = 23374;
  // ignore: todo
  // TODO: 角标参数，默认为应用的 launcher 界面的类名
  static const String BADGECLASSNAME = "com.tencent.qcloud.tim.demo.SplashActivity";
  /**华为离线推送参数end ******/

  /// 小米离线推送参数start ******/
  // 在腾讯云控制台上传第三方推送证书后分配的证书ID
  static const XMPushBuzID = 23373;
  // 小米开放平台分配的应用APPID及APPKEY
  static const String XMPushAPPID = "2882303761520155831";
  static const String XMPushAPPKEY = "5152015527831";
  /**小米离线推送参数end ******/

  /// 魅族离线推送参数start ******/
  // 在腾讯云控制台上传第三方推送证书后分配的证书ID
  static const MZPushBuzID = 23375;
  // 魅族开放平台分配的应用APPID及APPKEY
  static const String MZPushAPPID = "148322";
  static const String MZPushAPPKEY = "2c008055172b453ba3b1ea2ec5f3895d";
  /**魅族离线推送参数end ******/

  /// vivo离线推送参数start ******/
  // 在腾讯云控制台上传第三方推送证书后分配的证书ID
  static const VIVOPushBuzID = 23376;
  /**vivo离线推送参数end ******/

  /// google离线推送参数start ******/
  // 在腾讯云控制台上传第三方推送证书后分配的证书ID
  static const GOOGLEFCMPushBuzID = 23451;
  /**google离线推送参数end ******/

  /// oppo离线推送参数start ******/
  // 在腾讯云控制台上传第三方推送证书后分配的证书ID
  static const OPPOPushBuzID = 23386;
  // oppo开放平台分配的应用APPID及APPKEY
  static const String OPPOPushAPPKEY = "cc035ae17e4b4831bb3d58b2c934990e";
  static const String OPPOPushAPPSECRET = "8a363e802cdf4fc9bc2342608baf68c4";
  static const String OPPOPushAPPID = "30803767";
  static const String OPPOChannelID = "new_message";
  /**oppo离线推送参数end ******/

  /// Apple离线推送参数start ******/
  // 在腾讯云控制台上传第三方推送证书后分配的证书ID
  static const ApplePushBuzID = 30626;
  /**Apple离线推送参数end ******/

  static final PushAppInfo appInfo = PushAppInfo(
    hw_buz_id: PushConfig.HWPushBuzID,
    mi_app_id: PushConfig.XMPushAPPID,
    mi_app_key: PushConfig.XMPushAPPKEY,
    mi_buz_id: PushConfig.XMPushBuzID,
    mz_app_id: PushConfig.MZPushAPPID,
    mz_app_key: PushConfig.MZPushAPPKEY,
    mz_buz_id: PushConfig.MZPushBuzID,
    vivo_buz_id: PushConfig.VIVOPushBuzID,
    oppo_app_key: PushConfig.OPPOPushAPPKEY,
    oppo_app_secret: PushConfig.OPPOPushAPPSECRET,
    oppo_buz_id: PushConfig.OPPOPushBuzID,
    oppo_app_id: PushConfig.OPPOPushAPPID,
    google_buz_id: PushConfig.GOOGLEFCMPushBuzID,
    apple_buz_id: PushConfig.ApplePushBuzID
  );
}文件：/im-flutter-uikit/lib/utils/push/channel/channel_push.dart
import 'package:tim_ui_kit_push_plugin/tim_ui_kit_push_plugin.dart';
import 'package:timuikit/utils/push/push_constant.dart';


class ChannelPush{
  static final TimUiKitPushPlugin cPush = TimUiKitPushPlugin(
    isUseGoogleFCM: false,
  );

  static init(PushClickAction pushClickAction) async {
    cPush.init(
        pushClickAction: pushClickAction,
        appInfo: PushConfig.appInfo,
    );

    cPush.createNotificationChannel(channelId: "new_message", channelName: "消息推送", channelDescription: "推送新聊天消息");
    cPush.createNotificationChannel(channelId: "high_system", channelName: "新消息提醒", channelDescription: "推送新聊天消息");
  }

  static requestPermission(){
    cPush.requireNotificationPermission();
  }

  static Future<String> getDeviceToken() async {
    return cPush.getDevicePushToken();
  }

  static setBadgeNum(int badgeNum){
    return cPush.setBadgeNum(badgeNum);
  }

  static clearAllNotification(){
    return cPush.clearAllNotification();
  }

  static Future<bool> uploadToken(PushAppInfo appInfo) async {
    return cPush.uploadToken(appInfo);
  }
}文件：/im-flutter-uikit/package_src/tim_ui_kit/lib/tim_ui_kit.dart
library tim_ui_kit;

import 'package:tencent_im_base/tencent_im_base.dart';

import 'package:tim_ui_kit/data_services/services_locatar.dart';
import 'data_services/core/core_services_implements.dart';
export 'data_services/core/core_services_implements.dart';

// Global
export 'ui/utils/tui_theme.dart';

// Widgets
export 'package:tim_ui_kit/ui/views/TIMUIKitConversation/tim_uikit_conversation.dart';
export 'package:tim_ui_kit/ui/views/TIMUIKitChat/tim_uikit_chat.dart';
export 'package:tim_ui_kit/ui/views/TIMUIKitProfile/tim_uikit_profile.dart';
export 'package:tim_ui_kit/ui/views/TIMUIKitProfile/widget/tim_uikit_operation_item.dart';
export 'package:tim_ui_kit/ui/views/TIMUIKitContact/tim_uikit_contact.dart';
export 'package:tim_ui_kit/ui/views/TIMUIKitGroup/tim_uikit_group.dart';
export 'package:tim_ui_kit/ui/views/TIMUIKitBlackList/tim_uikit_black_list.dart';
export 'package:tim_ui_kit/ui/views/TIMUIKitNewContact/tim_uikit_new_contact.dart';
export 'package:tim_ui_kit/ui/views/TIMUIKitNewContact/tim_uikit_unread_count.dart';
export 'package:tim_ui_kit/ui/views/TIMUIKitGroupProfile/tim_uikit_group_profile.dart';
export 'package:tim_ui_kit/ui/views/TIMUIKitChat/TIMUIKItMessageList/tim_uikit_chat_history_message_list_item.dart';
export 'package:tim_ui_kit/ui/widgets/unread_message.dart';
export 'package:tim_ui_kit/ui/views/TIMUIKitAddFriend/tim_uikit_add_friend.dart';
export 'package:tim_ui_kit/ui/views/TIMUIKitAddGroup/tim_uikit_add_group.dart';
export 'package:tim_ui_kit/ui/views/TIMUIKitChat/TIMUIKitTextField/tim_uikit_more_panel.dart';
export 'package:tim_ui_kit/ui/views/TIMUIKitSearch/tim_uikit_search.dart';
export 'package:tim_ui_kit/ui/views/TIMUIKitSearch/tim_uikit_search_msg_detail.dart';
export 'package:tim_ui_kit/ui/views/TIMUIKitChat/TIMUIKitTextField/tim_uikit_text_field_controller.dart';
export 'package:tim_ui_kit/ui/views/TIMUIKitChat/TIMUIKitAppBar/tim_uikit_appbar.dart';
export 'package:tim_ui_kit/ui/views/TIMUIKitChat/TIMUIKItMessageList/tim_uikit_chat_history_message_list.dart';
export 'package:tim_ui_kit/ui/views/TIMUIKitChat/TIMUIKItMessageList/tim_uikit_chat_history_message_list_item.dart';
export 'package:tim_ui_kit/ui/views/TIMUIKitChat/TIMUIKitTextField/tim_uikit_text_field.dart';
export 'package:tim_ui_kit/ui/views/TIMUIKitGroup/tim_uikit_group_application_list.dart';
export 'package:tencent_im_base/tencent_im_base.dart';
export 'package:tim_ui_kit/ui/widgets/link_preview/models/link_preview_content.dart';
export 'package:tim_ui_kit/ui/views/TIMUIKitProfile/widget/tim_uikit_profile_userinfo_card.dart';

// Enum

export 'package:tim_ui_kit/ui/theme/tim_uikit_message_theme.dart';

// Controller
export 'package:tim_ui_kit/ui/controller/tim_uikit_profile_controller.dart';

// Config
export 'package:tim_ui_kit/ui/views/TIMUIKitChat/tim_uikit_chat_config.dart';
export 'package:permission_handler/permission_handler.dart';

class TIMUIKitCore {
  static CoreServicesImpl getInstance() {
    setupServiceLocator();
    return serviceLocator<CoreServicesImpl>();
  }

  static V2TIMManager getSDKInstance() {
    return TencentImSDKPlugin.v2TIMManager;
  }
}
文件：/im-flutter-uikit/package_src/tim_ui_kit/lib/base_widgets/tim_ui_kit_base.dart
import 'package:tim_ui_kit/ui/utils/tui_theme.dart';

class TUIKitBuildValue {
  // 这里预留以后可以扩展全局通用能力
  TUITheme theme;

  TUIKitBuildValue({required this.theme});
}
文件：/im-flutter-uikit/package_src/tim_ui_kit/lib/base_widgets/tim_ui_kit_class.dart
import 'package:tencent_im_base/base_widgets/tim_callback.dart';
import 'package:tim_ui_kit/data_services/core/core_services_implements.dart';
import 'package:tim_ui_kit/data_services/services_locatar.dart';

class TIMUIKitClass {
  static final CoreServicesImpl _coreServices =
      serviceLocator<CoreServicesImpl>();

  static void onTIMCallback(TIMCallback callbackValue) {
    _coreServices.callOnCallback(callbackValue);
  }
}
文件：/im-flutter-uikit/package_src/tim_ui_kit/lib/base_widgets/tim_ui_kit_state.dart
import 'package:flutter/cupertino.dart';
import 'package:provider/provider.dart';
import 'package:tencent_im_base/tencent_im_base.dart';
import 'package:tim_ui_kit/base_widgets/tim_ui_kit_base.dart';
import 'package:tim_ui_kit/business_logic/view_models/tui_theme_view_model.dart';
import 'package:tim_ui_kit/data_services/core/core_services_implements.dart';
import 'package:tim_ui_kit/data_services/services_locatar.dart';

class TIMUIKitState<T extends StatefulWidget> extends TIMState<T> {
  final CoreServicesImpl _coreServices = serviceLocator<CoreServicesImpl>();

  @override
  initState() {
    super.initState();
  }

  @override
  void onTIMCallback(TIMCallback callbackValue) {
    super.onTIMCallback(callbackValue);
    _coreServices.callOnCallback(callbackValue);
  }

  @override
  Widget timBuild(BuildContext context) {
    return MultiProvider(
      providers: [
        ChangeNotifierProvider.value(
            value: serviceLocator<TUIThemeViewModel>()),
      ],
      builder: (BuildContext context, Widget? w) {
        final theme = Provider.of<TUIThemeViewModel>(context).theme;
        final value = TUIKitBuildValue(theme: theme);
        return tuiBuild(context, value);
      },
    );
  }

  @required
  Widget tuiBuild(BuildContext context, TUIKitBuildValue value) {
    return Container();
  }
}
文件：/im-flutter-uikit/package_src/tim_ui_kit/lib/base_widgets/tim_ui_kit_statelesswidget.dart
import 'package:flutter/cupertino.dart';
import 'package:provider/provider.dart';
import 'package:tencent_im_base/tencent_im_base.dart';
import 'package:tim_ui_kit/base_widgets/tim_ui_kit_base.dart';
import 'package:tim_ui_kit/business_logic/view_models/tui_theme_view_model.dart';
import 'package:tim_ui_kit/data_services/core/core_services_implements.dart';
import 'package:tim_ui_kit/data_services/services_locatar.dart';

class TIMUIKitStatelessWidget extends TIMStatelessWidget {
  final CoreServicesImpl _coreServices = serviceLocator<CoreServicesImpl>();

  TIMUIKitStatelessWidget({Key? key}) : super(key: key);

  @override
  void onTIMCallback(TIMCallback callbackValue) {
    super.onTIMCallback(callbackValue);
    _coreServices.callOnCallback(callbackValue);
  }

  @override
  Widget timBuild(BuildContext context) {
    return MultiProvider(
      providers: [
        ChangeNotifierProvider.value(
            value: serviceLocator<TUIThemeViewModel>()),
      ],
      builder: (BuildContext context, Widget? w) {
        final theme = Provider.of<TUIThemeViewModel>(context).theme;
        final value = TUIKitBuildValue(theme: theme);
        return tuiBuild(context, value);
      },
    );
  }

  @required
  Widget tuiBuild(BuildContext context, TUIKitBuildValue value) {
    return Container();
  }
}
文件：/im-flutter-uikit/package_src/tim_ui_kit/lib/business_logic/life_cycle/add_friend_life_cycle.dart
import 'package:tim_ui_kit/business_logic/life_cycle/base_life_cycle.dart';

class AddFriendLifeCycle {
  /// Before requesting to add a user as friend or a contact,
  /// `true` means can add continually, while `false` will not add.
  /// You can make a second confirmation here by a modal, etc.
  FutureBool Function(String userID, String? remark, String? friendGroup,
      String? addWording) shouldAddFriend;

  AddFriendLifeCycle({
    this.shouldAddFriend = DefaultLifeCycle.defaultAddFriend,
  });
}
文件：/im-flutter-uikit/package_src/tim_ui_kit/lib/business_logic/life_cycle/add_group_life_cycle.dart
import 'package:tim_ui_kit/business_logic/life_cycle/base_life_cycle.dart';

class AddGroupLifeCycle {
  /// Before requesting to add or join to a group,
  /// `true` means can add continually, while `false` will not add.
  /// You can make a second confirmation here by a modal, etc.
  FutureBool Function(String groupID, String message) shouldAddGroup;

  AddGroupLifeCycle({
    this.shouldAddGroup = DefaultLifeCycle.defaultAddGroup,
  });
}
文件：/im-flutter-uikit/package_src/tim_ui_kit/lib/business_logic/life_cycle/base_life_cycle.dart
import 'package:tencent_im_base/tencent_im_base.dart';
import 'package:tim_ui_kit/base_widgets/tim_ui_kit_class.dart';

typedef MessageFunction = Future<V2TimMessage> Function(V2TimMessage message);

typedef MessageFunctionOptional = Future<V2TimMessage?> Function(
    V2TimMessage message);

typedef MessageListFunction = Future<List<V2TimMessage>> Function(
    List<V2TimMessage> messageList);

typedef FutureBool = Future<bool>;

typedef AddFriendFunction = Function(
    String userID, String? remark, String? friendGroup, String? addWording);

typedef ConversationListFunction = Future<List<V2TimConversation?>> Function(
    List<V2TimConversation?> conversationList);

typedef FriendListFunction = Future<List<V2TimFriendInfo>> Function(
    List<V2TimFriendInfo> friendList);

typedef FriendInfoFunction = Future<V2TimFriendInfo?> Function(
    V2TimFriendInfo? friendInfo);

/// Here is the default life cycle hooks implementation for all the hooks in TUIKit.
abstract class DefaultLifeCycle {
  static Future<List<V2TimConversation?>> defaultConversationListSolution(
      List<V2TimConversation?> list) async {
    return list;
  }

  static Future<List<V2TimFriendInfo>> defaultFriendListSolution(
      List<V2TimFriendInfo> list) async {
    return list;
  }

  static Future<V2TimMessage> defaultMessageSolution(
      V2TimMessage message) async {
    return message;
  }

  static Future<List<V2TimMessage>> defaultMessageListSolution(
      List<V2TimMessage> list) async {
    return list;
  }

  static Future<bool> defaultBooleanSolution(dynamic) async {
    return true;
  }

  static Future<bool> defaultAddFriend(String userID, String? remark,
      String? friendGroup, String? addWording) async {
    return true;
  }

  static Future<bool> defaultAddGroup(String groupID, String message) async {
    return true;
  }

  static Future<V2TimFriendInfo?> defaultFriendInfoSolution(
      V2TimFriendInfo? friendInfo) async {
    return friendInfo;
  }

  static Future<void> defaultPopBackRemind() async {
    // You have to implement the exact life cycle hook in this case.
    TIMUIKitClass.onTIMCallback(TIMCallback(
        type: TIMCallbackType.INFO,
        infoRecommendText: TIM_t("请传入离开群组生命周期函数，提供返回首页或其他页面的导航方法。"),
        infoCode: 6661402));
    return;
  }
}
文件：/im-flutter-uikit/package_src/tim_ui_kit/lib/business_logic/life_cycle/block_list_life_cycle.dart
import 'package:tim_ui_kit/business_logic/life_cycle/base_life_cycle.dart';

class BlockListLifeCycle {
  /// Before requesting to delete a user from block list,
  /// `true` means can delete continually, while `false` will not delete.
  /// You can make a second confirmation here by a modal, etc.
  FutureBool Function(List<String> userIDList) shouldDeleteFromBlockList;

  BlockListLifeCycle({
    this.shouldDeleteFromBlockList = DefaultLifeCycle.defaultBooleanSolution,
  });
}
文件：/im-flutter-uikit/package_src/tim_ui_kit/lib/business_logic/life_cycle/chat_life_cycle.dart
import 'package:tim_ui_kit/business_logic/life_cycle/base_life_cycle.dart';

class ChatLifeCycle {
  /// Before a new message will be added to historical message list from long connection.
  /// You may not render this message by return null.
  MessageFunctionOptional newMessageWillMount;

  /// Before a modified message updated to historical message list UI.
  MessageFunction modifiedMessageWillMount;

  /// Before a new message will be sent.
  MessageFunction messageWillSend;

  /// After getting the latest message list from API,
  /// and before historical message list will be rendered.
  /// You may add or delete some messages here.
  MessageListFunction didGetHistoricalMessageList;

  /// Before deleting a message from historical message list,
  /// `true` means can delete continually, while `false` will not delete.
  /// You can make a second confirmation here by a modal, etc.
  FutureBool Function(String msgID) shouldDeleteMessage;

  /// Before clearing the historical message list,
  /// `true` means can clear continually, while `false` will not clear.
  /// You can make a second confirmation here by a modal, etc.
  FutureBool Function(String conversationID) shouldClearHistoricalMessageList;

  ChatLifeCycle({
    this.shouldClearHistoricalMessageList =
        DefaultLifeCycle.defaultBooleanSolution,
    this.shouldDeleteMessage = DefaultLifeCycle.defaultBooleanSolution,
    this.didGetHistoricalMessageList =
        DefaultLifeCycle.defaultMessageListSolution,
    this.messageWillSend = DefaultLifeCycle.defaultMessageSolution,
    this.modifiedMessageWillMount = DefaultLifeCycle.defaultMessageSolution,
    this.newMessageWillMount = DefaultLifeCycle.defaultMessageSolution,
  });
}
文件：/im-flutter-uikit/package_src/tim_ui_kit/lib/business_logic/life_cycle/conversation_life_cycle.dart
import 'package:tim_ui_kit/business_logic/life_cycle/base_life_cycle.dart';

class ConversationLifeCycle {
  /// Before deleting a conversation, or a channel, from the conversation list,
  /// `true` means can delete continually, while `false` will not delete.
  /// You can make a second confirmation here by a modal, etc.
  FutureBool Function(String conversationID) shouldDeleteConversation;

  /// Before clearing the historical message for a specific conversation, provided in parameter,
  /// `true` means can clear continually, while `false` will not clear.
  /// You can make a second confirmation here by a modal, etc.
  FutureBool Function(String conversationID)
      shouldClearHistoricalMessageForConversation;

  /// Before conversation list will mount or update to conversation page.
  ConversationListFunction conversationListWillMount;

  ConversationLifeCycle({
    this.conversationListWillMount =
        DefaultLifeCycle.defaultConversationListSolution,
    this.shouldClearHistoricalMessageForConversation =
        DefaultLifeCycle.defaultBooleanSolution,
    this.shouldDeleteConversation = DefaultLifeCycle.defaultBooleanSolution,
  });
}
文件：/im-flutter-uikit/package_src/tim_ui_kit/lib/business_logic/life_cycle/friend_list_life_cycle.dart
import 'package:tim_ui_kit/business_logic/life_cycle/base_life_cycle.dart';

class FriendListLifeCycle {
  /// Before friend list (contacts list) will mount or update to contacts page.
  FriendListFunction friendListWillMount;

  FriendListLifeCycle({
    this.friendListWillMount = DefaultLifeCycle.defaultFriendListSolution,
  });
}
文件：/im-flutter-uikit/package_src/tim_ui_kit/lib/business_logic/life_cycle/group_profile_life_cycle.dart
import 'package:tim_ui_kit/business_logic/life_cycle/base_life_cycle.dart';

class GroupProfileLifeCycle {
  /// In this case, you have better navigating to you home page or conversation list page,
  /// due to user request to leave the group, as quitting or disbanding.
  Future<void> Function() didLeaveGroup;

  GroupProfileLifeCycle({
    this.didLeaveGroup = DefaultLifeCycle.defaultPopBackRemind,
  });
}
文件：/im-flutter-uikit/package_src/tim_ui_kit/lib/business_logic/life_cycle/new_contact_life_cycle.dart
import 'package:tim_ui_kit/business_logic/life_cycle/base_life_cycle.dart';

class NewContactLifeCycle {
  /// Before accepting a friend or contact requirement from other user,
  /// `true` means can accept continually, while `false` will not accept.
  /// You can make a second confirmation here by a modal, etc.
  FutureBool Function(String userID) shouldAcceptContactApplication;

  /// Before refusing a friend or contact requirement from other user,
  /// `true` means can refuse continually, while `false` will not refuse.
  /// You can make a second confirmation here by a modal, etc.
  FutureBool Function(String userID) shouldRefuseContactApplication;

  NewContactLifeCycle({
    this.shouldAcceptContactApplication =
        DefaultLifeCycle.defaultBooleanSolution,
    this.shouldRefuseContactApplication =
        DefaultLifeCycle.defaultBooleanSolution,
  });
}
文件：/im-flutter-uikit/package_src/tim_ui_kit/lib/business_logic/life_cycle/profile_life_cycle.dart
import 'package:tim_ui_kit/business_logic/life_cycle/base_life_cycle.dart';

class ProfileLifeCycle {
  /// Before adding a contact to block list,
  /// `true` means can add continually, while `false` will not add.
  /// You can make a second confirmation here by a modal, etc.
  FutureBool Function(String userID) shouldAddToBlockList;

  /// Before deleting a contact or friend,
  /// `true` means can delete continually, while `false` will not delete.
  /// You can make a second confirmation here by a modal, etc.
  FutureBool Function(String userID) shouldDeleteFriend;

  /// Before requesting to add a user as friend or a contact,
  /// `true` means can add continually, while `false` will not add.
  /// You can make a second confirmation here by a modal, etc.
  FutureBool Function(String userID) shouldAddFriend;

  /// After getting the user info of friend or contact,
  /// and before rendering it to the profile page.
  FriendInfoFunction didGetFriendInfo;

  ProfileLifeCycle({
    this.didGetFriendInfo = DefaultLifeCycle.defaultFriendInfoSolution,
    this.shouldAddToBlockList = DefaultLifeCycle.defaultBooleanSolution,
    this.shouldAddFriend = DefaultLifeCycle.defaultBooleanSolution,
    this.shouldDeleteFriend = DefaultLifeCycle.defaultBooleanSolution,
  });
}
文件：/im-flutter-uikit/package_src/tim_ui_kit/lib/business_logic/model/profile_model.dart
import 'package:tim_ui_kit/tim_ui_kit.dart';

class UserProfile {
  late V2TimFriendInfo? friendInfo;
  late V2TimConversation? conversation;

  UserProfile({required this.friendInfo, required this.conversation});
}
文件：/im-flutter-uikit/package_src/tim_ui_kit/lib/business_logic/view_models/tui_add_friend_view_model.dart
import 'package:flutter/material.dart';
import 'package:tencent_im_base/tencent_im_base.dart';

import 'package:tim_ui_kit/business_logic/life_cycle/add_friend_life_cycle.dart';
import 'package:tim_ui_kit/data_services/core/core_services_implements.dart';
import 'package:tim_ui_kit/data_services/friendShip/friendship_services.dart';
import 'package:tim_ui_kit/data_services/services_locatar.dart';

class TUIAddFriendViewModel extends ChangeNotifier {
  final CoreServicesImpl _coreServicesImpl = serviceLocator<CoreServicesImpl>();
  final FriendshipServices _friendshipServices =
      serviceLocator<FriendshipServices>();
  V2TimUserFullInfo? loginUserInfo;
  List<V2TimUserFullInfo>? _friendInfoResult;
  AddFriendLifeCycle? _lifeCycle;

  set lifeCycle(AddFriendLifeCycle? value) {
    _lifeCycle = value;
  }

  List<V2TimUserFullInfo>? get friendInfoResult {
    return _friendInfoResult;
  }

  TUIAddFriendViewModel() {
    loginUserInfo = _coreServicesImpl.loginUserInfo;
  }

  searchFriend(String params) async {
    final response = await _coreServicesImpl.getUsersInfo(userIDList: [params]);
    if (response.code == 0) {
      _friendInfoResult = response.data;
    } else {
      _friendInfoResult = null;
    }
    notifyListeners();
  }

  Future<V2TimValueCallback<V2TimFriendOperationResult>?> addFriend(
      String userID,
      String? remark,
      String? friendGroup,
      String? addWording) async {
    if (_lifeCycle?.shouldAddFriend != null &&
        await _lifeCycle!
                .shouldAddFriend(userID, remark, friendGroup, addWording) ==
            false) {
      return null;
    }
    final res = _friendshipServices.addFriend(
        userID: userID,
        addType: FriendTypeEnum.V2TIM_FRIEND_TYPE_BOTH,
        remark: remark,
        addWording: addWording,
        friendGroup: friendGroup);
    return res;
  }
}
文件：/im-flutter-uikit/package_src/tim_ui_kit/lib/business_logic/view_models/tui_add_group_view_model.dart
import 'package:flutter/cupertino.dart';
import 'package:tencent_im_base/tencent_im_base.dart';
import 'package:tim_ui_kit/business_logic/life_cycle/add_group_life_cycle.dart';
import 'package:tim_ui_kit/data_services/core/core_services_implements.dart';
import 'package:tim_ui_kit/data_services/group/group_services.dart';
import 'package:tim_ui_kit/data_services/services_locatar.dart';

class TUIAddGroupViewModel extends ChangeNotifier {
  final GroupServices _groupServices = serviceLocator<GroupServices>();
  List<V2TimGroupInfo>? groupResult = [];
  final CoreServicesImpl _coreServicesImpl = serviceLocator<CoreServicesImpl>();
  AddGroupLifeCycle? _lifeCycle;

  set lifeCycle(AddGroupLifeCycle? value) {
    _lifeCycle = value;
  }

  V2TimUserFullInfo? loginUserInfo;

  TUIAddGroupViewModel() {
    loginUserInfo = _coreServicesImpl.loginUserInfo;
  }

  searchGroup(String params) async {
    final res = await _groupServices.getGroupsInfo(groupIDList: [params]);
    if (res != null) {
      groupResult =
          res.where((e) => e.resultCode == 0).map((e) => e.groupInfo!).toList();
    } else {
      groupResult = [];
    }
    notifyListeners();
  }

  Future<V2TimCallback?> addGroup(String groupID, String message) async {
    if (_lifeCycle?.shouldAddGroup != null &&
        await _lifeCycle!.shouldAddGroup(groupID, message) == false) {
      return null;
    }
    return _groupServices.joinGroup(groupID: groupID, message: message);
  }
}
文件：/im-flutter-uikit/package_src/tim_ui_kit/lib/business_logic/view_models/tui_block_list_view_model.dart
import 'package:flutter/material.dart';
import 'package:tim_ui_kit/business_logic/life_cycle/block_list_life_cycle.dart';
import 'package:tim_ui_kit/data_services/friendShip/friendship_services.dart';
import 'package:tim_ui_kit/data_services/services_locatar.dart';
import 'package:tim_ui_kit/tim_ui_kit.dart';

class TUIBlockListViewModel extends ChangeNotifier {
  List<V2TimFriendInfo> _blackList = [];
  final FriendshipServices _friendshipServices =
      serviceLocator<FriendshipServices>();
  late BlockListLifeCycle? _lifeCycle;

  set lifeCycle(BlockListLifeCycle? value) {
    _lifeCycle = value;
  }

  List<V2TimFriendInfo> get blackList {
    return _blackList;
  }

  loadData() async {
    final blackListRes = await _friendshipServices.getBlackList();
    _blackList = blackListRes ?? [];
    notifyListeners();
  }

  Future<List<V2TimFriendOperationResult>?> deleteFromBlackList(
      List<String> userIDList) async {
    if (_lifeCycle?.shouldDeleteFromBlockList != null &&
        await _lifeCycle!.shouldDeleteFromBlockList(userIDList) == false) {
      return null;
    }
    final res =
        await _friendshipServices.deleteFromBlackList(userIDList: userIDList);
    if (res != null) {
      return res;
    }
    return null;
  }
}
文件：/im-flutter-uikit/package_src/tim_ui_kit/lib/business_logic/view_models/tui_chat_view_model.dart
// ignore_for_file: avoid_print, unnecessary_getters_setters

import 'dart:convert';
import 'dart:io';
import 'dart:math';

import 'package:flutter/material.dart';
import 'package:shared_preferences/shared_preferences.dart';

import 'package:tim_ui_kit/business_logic/life_cycle/chat_life_cycle.dart';
import 'package:tim_ui_kit/data_services/group/group_services.dart';
import 'package:tim_ui_kit/data_services/message/message_services.dart';
import 'package:tim_ui_kit/data_services/services_locatar.dart';
import 'package:tim_ui_kit/tim_ui_kit.dart';
import 'package:tim_ui_kit/ui/constants/history_message_constant.dart';

import 'package:tim_ui_kit/ui/utils/message.dart';

enum ConvType { group, c2c }

enum HistoryMessagePosition { bottom, inTwoScreen, awayTwoScreen }

class TUIChatViewModel extends ChangeNotifier {
  final MessageService _messageService = serviceLocator<MessageService>();
  final CoreServicesImpl _coreServices = serviceLocator<CoreServicesImpl>();
  final GroupServices _groupServices = serviceLocator<GroupServices>();
  final Map<String, List<V2TimMessage>?> _messageListMap = {};
  final Map<String, V2TimMessageReceipt> _messageReadReceiptMap = {};
  final Map<String, int> _messageListProgressMap = {};
  final Map<String, dynamic> _preloadImageMap = {};

  Map<String, dynamic> get preloadImageMap => _preloadImageMap;

  ChatLifeCycle? _lifeCycle;
  bool _isDownloading = false;
  int _totalUnreadCount = 0;
  bool _isMultiSelect = false;
  String _currentSelectedConv = "";
  int? _currentSelectedConvType;
  bool _haveMoreData = true;
  String _currentSelectedMsgId = "";
  String _editRevokedMsg = "";
  GroupReceptAllowType? _groupType;
  final List<V2TimMessage> _multiSelectedMessageList = [];
  V2TimMessage? _repliedMessage;
  String localKeyPrefix = "TUIKit_conversation_stored_";
  String localMsgIDListKey = "TUIKit_conversation_list";
  String _jumpMsgID = "";
  V2TimAdvancedMsgListener? advancedMsgListener;
  HistoryMessagePosition _listPosition = HistoryMessagePosition.bottom;
  int _unreadCountForConversation = 0;
  List<V2TimMessage>? _tempMessageList = [];
  TIMUIKitChatConfig chatConfig = const TIMUIKitChatConfig();
  ValueChanged<String>? _setInputField;
  List<V2TimGroupApplication>? _groupApplicationList;
  String Function(V2TimMessage message)? _abstractMessageBuilder;

  TUIChatViewModel() {
    initAdvanceListener();
    initMessageMapFromLocal();
    // Future.delayed(const Duration(milliseconds: 200)).then((value) => initMessageMapFromLocal());
  }

  bool get isDownloading => _isDownloading;

  Map<String, int> get messageListProgressMap {
    return _messageListProgressMap;
  }

  Map<String, List<V2TimMessage>?> get messageListMap {
    return _messageListMap;
  }

  bool get haveMoreData {
    return _haveMoreData;
  }

  String get jumpMsgID {
    return _jumpMsgID;
  }

  bool get isMultiSelect {
    return _isMultiSelect;
  }

  int get totalUnReadCount {
    return _totalUnreadCount;
  }

  String get currentSelectedMsgId {
    return _currentSelectedMsgId;
  }

  int? get currentSelectedConvType {
    return _currentSelectedConvType;
  }

  String get editRevokedMsg {
    return _editRevokedMsg;
  }

  String get currentSelectedConv {
    return _currentSelectedConv;
  }

  V2TimMessage? get repliedMessage {
    return _repliedMessage;
  }

  HistoryMessagePosition get listPosition => _listPosition;

  int get unreadCountForConversation => _unreadCountForConversation;

  ValueChanged<String>? get setInputField => _setInputField;

  List<V2TimGroupApplication> get groupApplicationList =>
      _groupApplicationList ?? [];

  String Function(V2TimMessage message)? get abstractMessageBuilder =>
      _abstractMessageBuilder;

  set abstractMessageBuilder(String Function(V2TimMessage message)? value) {
    _abstractMessageBuilder = value;
  }

  set lifeCycle(ChatLifeCycle? value) {
    _lifeCycle = value;
  }

  set groupApplicationList(List<V2TimGroupApplication> value) {
    _groupApplicationList = value;
  }

  set setInputField(ValueChanged<String>? value) {
    _setInputField = value;
  }

  set unreadCountForConversation(int value) {
    _unreadCountForConversation = value;
  }

  set listPosition(HistoryMessagePosition value) {
    _listPosition = value;
    Future.delayed(const Duration(milliseconds: 1), () {
      notifyListeners();
    });
  }

  set currentSelectedMsgId(String msgID) {
    _currentSelectedMsgId = msgID;
    notifyListeners();
  }

  set totalUnReadCount(int newValue) {
    _totalUnreadCount = newValue;
    notifyListeners();
  }

  set editRevokedMsg(String msg) {
    _editRevokedMsg = msg;
    notifyListeners();
  }

  set jumpMsgID(String msgID) {
    _jumpMsgID = msgID;
    Future.delayed(const Duration(milliseconds: 1), () {
      notifyListeners();
    });
  }

  List<V2TimMessage> get multiSelectedMessageList {
    return _multiSelectedMessageList;
  }

  setChatConfig(TIMUIKitChatConfig config) {
    chatConfig = config;
  }

  initMessageMapFromLocal() async {
    final prefs = await SharedPreferences.getInstance();
    final List<String>? localMsgIDList = prefs.getStringList(localMsgIDListKey);

    int index = -1;

    if (localMsgIDList != null) {
      for (String convID in localMsgIDList) {
        index++;
        final List<String>? localMsgJson =
            prefs.getStringList("$localKeyPrefix$convID");
        if (localMsgJson != null) {
          List<V2TimMessage> localMsg = localMsgJson
              .map((item) => V2TimMessage.fromJson(jsonDecode(item)))
              .toList();
          final msgList =
              await _lifeCycle?.didGetHistoricalMessageList(localMsg) ??
                  localMsg;
          _messageListMap[convID] = msgList;
          if (index < 10) {
            Future.delayed(Duration.zero)
                .then((value) => _preLoadImage(msgList));
          }
        }
      }
      notifyListeners();
    }
  }

  _preLoadImage(List<V2TimMessage> msgList) {
    List<V2TimMessage> needPreViewList =
        msgList.sublist(0, max(0, min(5, msgList.length - 1)));
    for (var msgItem in needPreViewList) {
      V2TimImage? getImageFromList(V2_TIM_IMAGE_TYPES_ENUM imgType) {
        V2TimImage? img = MessageUtils.getImageFromImgList(
            msgItem.imageElem?.imageList,
            HistoryMessageDartConstant.imgPriorMap[imgType] ??
                HistoryMessageDartConstant.oriImgPrior);
        return img;
      }

      V2TimImage? originalImg = getImageFromList(V2_TIM_IMAGE_TYPES_ENUM.small);
      if (originalImg?.localUrl != null && originalImg!.localUrl != "") {
        try {
          ImageConfiguration configuration = const ImageConfiguration();
          final image = FileImage(File((originalImg.localUrl!)));

          image.resolve(configuration).addListener(
              ImageStreamListener((ImageInfo image, bool synchronousCall) {
            final tempImg = image.image;
            _preloadImageMap[msgItem.seq! +
                msgItem.timestamp.toString() +
                (msgItem.msgID ?? "")] = tempImg;
            print("cacheImage ${msgItem.msgID}");
          }));
        } catch (e) {
          print("cacheImage error ${msgItem.msgID}");
        }
      }
    }
  }

  int getMessageProgress(String? msgID) {
    return _messageListProgressMap[msgID] ?? 0;
  }

  setMessageProgress(String msgID, int progress) {
    _messageListProgressMap[msgID] = progress;
    if (progress > 0 && progress < 100) {
      _isDownloading = true;
    } else {
      _isDownloading = false;
    }
    notifyListeners();
  }

  List<V2TimMessage>? getMessageListByConvId(String? convID) {
    final list = _messageListMap[convID]?.reversed.toList() ?? [];
    List<V2TimMessage> listWithTimestamp = [];
    for (var item in list) {
      {
        if (listWithTimestamp.isEmpty ||
            item.timestamp! -
                    listWithTimestamp[listWithTimestamp.length - 1].timestamp! >
                300) {
          listWithTimestamp.add(V2TimMessage(
            userID: '',
            isSelf: false,
            elemType: 11,
            msgID: '${item.timestamp}',
            timestamp: item.timestamp,
          ));
        }
        listWithTimestamp.add(item);
      }
    }
    return listWithTimestamp.reversed.toList();
    // return list;
  }

  void initForEachConversation(ValueChanged<String> onChangeInputField) async {
    _jumpMsgID = "";
    listPosition = HistoryMessagePosition.bottom;
    _tempMessageList = [];
    unreadCountForConversation = 0;
    setInputField = onChangeInputField;
    if (_groupApplicationList == null) {
      refreshGroupApplicationList();
    }
  }

  void refreshGroupApplicationList() async {
    final res = await _groupServices.getGroupApplicationList();
    _groupApplicationList = res.data?.groupApplicationList?.map((item) {
          final V2TimGroupApplication applicationItem = item!;
          return applicationItem;
        }).toList() ??
        [];
    notifyListeners();
  }

  void loadDataFromController(
      {String? receiverID, String? groupID, ConvType? convType}) {
    if (convType != null) {
      final convID = convType == ConvType.c2c ? receiverID : groupID;
      if (convID != null && convID.isNotEmpty) {
        loadData(
          count: HistoryMessageDartConstant.getCount, //20
          userID: convType == ConvType.c2c ? convID : null,
          groupID: convType == ConvType.group ? convID : null,
        );
      } else {
        print("ID is empty");
        return;
      }
    } else {
      loadData(
        count: HistoryMessageDartConstant.getCount, //20
        userID: _currentSelectedConvType == 1 ? _currentSelectedConv : null,
        groupID: _currentSelectedConvType == 2 ? _currentSelectedConv : null,
      );
    }
  }

  Future<bool> loadData({
    HistoryMsgGetTypeEnum getType =
        HistoryMsgGetTypeEnum.V2TIM_GET_CLOUD_OLDER_MSG,
    String? userID,
    String? groupID,
    int lastMsgSeq = -1,
    required int count,
    String? lastMsgID,
  }) async {
    _currentSelectedConvType = userID != null ? 1 : 2;
    _haveMoreData = true;
    final convID = userID ?? groupID;
    final currentHistoryMsgList = _messageListMap[convID];
    final bool ifEmptyHistory =
        (currentHistoryMsgList == null || currentHistoryMsgList.isEmpty);

    final response = await _messageService.getHistoryMessageList(
        count: count,
        getType: getType,
        userID: userID,
        groupID: groupID,
        lastMsgID: lastMsgID,
        lastMsgSeq: lastMsgSeq);
    if (lastMsgID != null && currentHistoryMsgList != null) {
      final newList = [...currentHistoryMsgList, ...response];
      final List<V2TimMessage> msgList =
          await _lifeCycle?.didGetHistoricalMessageList(newList) ?? newList;
      _messageListMap[convID!] = msgList; // 拼接拉取更多历史
    } else {
      final List<V2TimMessage> msgList =
          await _lifeCycle?.didGetHistoricalMessageList(response) ?? response;
      _messageListMap[convID!] = msgList; // 首屏默认历史消息
      // put the last 20 messages to local
      storeMsgToLocal(msgList, convID, ifEmptyHistory);
    }
    if (response.isEmpty || response.length < 20) {
      _haveMoreData = false;
    }
    _currentSelectedConv = convID;
    _currentSelectedConvType = userID != null ? 1 : 2;
    notifyListeners();
    if (chatConfig.isShowGroupReadingStatus &&
        _currentSelectedConvType == 2 &&
        response.isNotEmpty) {
      _getMsgReadReceipt(response);
      _setMsgReadReceipt(response);
    }
    if (_groupType == null &&
        chatConfig.isShowGroupReadingStatus &&
        _currentSelectedConvType == 2 &&
        groupID != null) {
      _getGroupInfo(groupID);
    }
    return _haveMoreData;
  }

  _getGroupInfo(String groupID) async {
    final res = await _groupServices.getGroupsInfo(groupIDList: [groupID]);
    if (res != null) {
      final groupRes = res.first;
      if (groupRes.resultCode == 0) {
        const groupTypeMap = {
          "Meeting": GroupReceptAllowType.meeting,
          "Public": GroupReceptAllowType.public,
          "Work": GroupReceptAllowType.work
        };

        _groupType = groupTypeMap[groupRes.groupInfo?.groupType];
      }
    }
  }

  void storeMsgToLocal(List<V2TimMessage>? msgList, String convID,
      [bool? addToIDList]) async {
    final prefs = await SharedPreferences.getInstance();

    if (addToIDList == true) {
      final List<String>? localMsgIDList =
          prefs.getStringList(localMsgIDListKey);
      if (localMsgIDList == null) {
        await prefs.setStringList(localMsgIDListKey, [convID]);
      } else if (!localMsgIDList.contains(convID)) {
        await prefs
            .setStringList(localMsgIDListKey, [...localMsgIDList, convID]);
      }
    }

    late List<String> storedMsgJsonList;
    if (msgList != null && msgList.isNotEmpty) {
      final storedMsg = msgList.getRange(0, min(20, msgList.length - 1));
      storedMsgJsonList =
          storedMsg.map((item) => jsonEncode(item.toJson())).toList();
    } else {
      storedMsgJsonList = [];
    }
    await prefs.setStringList("$localKeyPrefix$convID", storedMsgJsonList);
  }

  V2TimMessageReceipt? getMessageReadReceipt(String msgID) {
    return _messageReadReceiptMap[msgID];
  }

  _getMsgReadReceipt(List<V2TimMessage> message) async {
    final msgID = message
        .where((e) => (e.isSelf ?? false) && (e.needReadReceipt ?? false))
        .map((e) => e.msgID ?? '')
        .toList();
    if (msgID.isNotEmpty) {
      final res = await getMessageReadReceipts(msgID);
      if (res.code == 0) {
        final receiptList = res.data;
        if (receiptList != null) {
          for (var item in receiptList) {
            _messageReadReceiptMap[item.msgID!] = item;
          }
        }
      }
      notifyListeners();
    }
  }

  _setMsgReadReceipt(List<V2TimMessage> message) async {
    final msgIDList = List<String>.empty(growable: true);
    for (var item in message) {
      final isSelf = item.isSelf ?? false;
      final needReadReceipt = item.needReadReceipt ?? false;
      if (!isSelf && needReadReceipt && item.msgID != null) {
        msgIDList.add(item.msgID!);
        item.needReadReceipt = false;
      }
    }
    if (msgIDList.isNotEmpty) {
      sendMessageReadReceipts(msgIDList);
    }
  }

  _onReceiveNewMsg(V2TimMessage msgComing) async {
    final V2TimMessage? newMsg = _lifeCycle?.newMessageWillMount != null
        ? await _lifeCycle?.newMessageWillMount(msgComing)
        : msgComing;
    if (newMsg == null) {
      return;
    }

    final convID = newMsg.userID ?? newMsg.groupID;
    if (listPosition == HistoryMessagePosition.bottom &&
        unreadCountForConversation == 0) {
      if (convID == _currentSelectedConv && convID != null) {
        markMessageAsRead(
          convID: convID,
          convType: _currentSelectedConvType!,
        );
      }
      if (convID != null) {
        final currentMsg = _messageListMap[convID] ?? [];
        _messageListMap[convID] = [newMsg, ...currentMsg];
        notifyListeners();
        storeMsgToLocal(_messageListMap[convID], convID);
        final messageID = newMsg.msgID;
        final needReadReceipt = newMsg.needReadReceipt ?? false;
        if (needReadReceipt && messageID != null) {
          sendMessageReadReceipts([messageID]);
        }
      }
    } else {
      unreadCountForConversation++;
      if (convID != null) {
        final currentTempMsg = _tempMessageList ?? [];
        _tempMessageList = [newMsg, ...currentTempMsg];
        notifyListeners();
      }
    }
  }

  showLatestUnread(String? convID) {
    if (convID != null) {
      final currentMsg = _messageListMap[convID] ?? [];
      _messageListMap[convID] = [...?_tempMessageList, ...currentMsg];
      unreadCountForConversation = 0;
      listPosition = HistoryMessagePosition.bottom;
      markMessageAsRead(
        convID: convID,
        convType: _currentSelectedConvType!,
      );
      _tempMessageList = [];
      notifyListeners();
      storeMsgToLocal(_messageListMap[convID], convID);
    }
  }

  getOneUnreadMessage(String? convID) {
    if (convID != null) {
      final currentMsg = _messageListMap[convID] ?? [];
      if (_tempMessageList!.length == 1) {
        showLatestUnread(convID);
        return;
      }
      _messageListMap[convID] = [
        _tempMessageList![_tempMessageList!.length - 1],
        ...currentMsg
      ];
      _tempMessageList!.removeAt(_tempMessageList!.length - 1);
      unreadCountForConversation--;
      notifyListeners();
    }
  }

  _onMessageRevoked(String msgID) {
    final activeMessageList = _messageListMap[_currentSelectedConv];
    if (activeMessageList != null) {
      _messageListMap[_currentSelectedConv] = activeMessageList.map((item) {
        if (item.msgID == msgID) {
          item.status = MessageStatus.V2TIM_MSG_STATUS_LOCAL_REVOKED;
        }
        return item;
      }).toList();
      notifyListeners();
    }
  }

  _onRecvC2CReadReceipt(List<V2TimMessageReceipt> receiptList) {
    for (var receipt in receiptList) {
      final convID = receipt.userID;
      final isNotEmpty = _messageListMap[convID]?.isNotEmpty;
      if (isNotEmpty != null && isNotEmpty) {
        _messageListMap[convID] = _messageListMap[convID]!.map((element) {
          final isSelf = element.isSelf ?? false;
          final isPeerRead = element.isPeerRead ?? false;
          if (isSelf && !isPeerRead) {
            element.isPeerRead = true;
          }
          return element;
        }).toList();
      }
    }
    notifyListeners();
  }

  _onRecvMessageReadReceipts(List<V2TimMessageReceipt> receiptList) {
    for (var receipt in receiptList) {
      final msgID = receipt.msgID;
      if (msgID != null) {
        _messageReadReceiptMap[msgID] = receipt;
      }
    }
    notifyListeners();
  }

  _onSendMessageProgress(V2TimMessage messagae, int progress) {
    print("message progress: $progress");
  }

  void initAdvanceListener({V2TimAdvancedMsgListener? listener}) async {
    advancedMsgListener = V2TimAdvancedMsgListener(
        onRecvC2CReadReceipt: (List<V2TimMessageReceipt> receiptList) {
      _onRecvC2CReadReceipt(receiptList);
      if (listener != null) {
        listener.onRecvC2CReadReceipt(receiptList);
      }
    }, onRecvMessageRevoked: (String msgID) {
      _onMessageRevoked(msgID);
      if (listener != null) {
        listener.onRecvMessageRevoked(msgID);
      }
    }, onRecvNewMessage: (V2TimMessage newMsg) {
      _onReceiveNewMsg(newMsg);
      if (listener != null) {
        listener.onRecvNewMessage(newMsg);
      }
    }, onSendMessageProgress: (V2TimMessage messagae, int progress) {
      _onSendMessageProgress(messagae, progress);
      if (listener != null) {
        listener.onSendMessageProgress(messagae, progress);
      }
    }, onRecvMessageReadReceipts: (List<V2TimMessageReceipt> receiptList) {
      _onRecvMessageReadReceipts(receiptList);
      if (listener != null) {
        listener.onRecvC2CReadReceipt(receiptList);
      }
    }, onRecvMessageModified: (V2TimMessage newMsg) {
      _onMessageModified(newMsg);
      if (listener != null) {
        listener.onRecvMessageModified(newMsg);
      }
    });

    await _messageService.addAdvancedMsgListener(
        listener: advancedMsgListener!);
  }

  Future<void> removeAdvanceListener() async {
    return _messageService.removeAdvancedMsgListener(
        listener: advancedMsgListener);
  }

  V2TimMessage _setUserInfoForMessage(V2TimMessage messageInfo, String? id) {
    final loginUserInfo = _coreServices.loginUserInfo;
    messageInfo.faceUrl = loginUserInfo!.faceUrl;
    messageInfo.nickName = loginUserInfo.nickName;
    messageInfo.sender = loginUserInfo.userID;
    messageInfo.status = MessageStatus.V2TIM_MSG_STATUS_SENDING;
    messageInfo.id = id;

    return messageInfo;
  }

  OfflinePushInfo buildMessagePushInfo(
      V2TimMessage message, String convID, ConvType convType) {
    String createJSON(String convID) {
      return "{\"conversationID\": \"$convID\"}";
    }

    String title = chatConfig.notificationTitle;
    String ext = chatConfig.notificationExt != null
        ? chatConfig.notificationExt!(message, convID, convType)
        : (convType == ConvType.c2c
            ? createJSON("c2c_${message.sender}")
            : createJSON("group_$convID"));

    String desc = message.userID ?? message.groupID ?? "";
    String messageSummary = "";
    switch (message.elemType) {
      case MessageElemType.V2TIM_ELEM_TYPE_CUSTOM:
        messageSummary = "自定义消息";
        break;
      case MessageElemType.V2TIM_ELEM_TYPE_FACE:
        messageSummary = "表情消息";
        break;
      case MessageElemType.V2TIM_ELEM_TYPE_FILE:
        messageSummary = "文件消息";
        break;
      case MessageElemType.V2TIM_ELEM_TYPE_GROUP_TIPS:
        messageSummary = "群提示消息";
        break;
      case MessageElemType.V2TIM_ELEM_TYPE_IMAGE:
        messageSummary = "图片消息";
        break;
      case MessageElemType.V2TIM_ELEM_TYPE_LOCATION:
        messageSummary = "位置消息";
        break;
      case MessageElemType.V2TIM_ELEM_TYPE_MERGER:
        messageSummary = "合并转发消息";
        break;
      case MessageElemType.V2TIM_ELEM_TYPE_SOUND:
        messageSummary = "语音消息";
        break;
      case MessageElemType.V2TIM_ELEM_TYPE_TEXT:
        messageSummary = message.textElem!.text!;
        break;
      case MessageElemType.V2TIM_ELEM_TYPE_VIDEO:
        messageSummary = "视频消息";
        break;
    }

    if (chatConfig.notificationBody != null) {
      desc = chatConfig.notificationBody!(message, convID, convType);
    } else {
      desc = messageSummary;
    }

    return OfflinePushInfo.fromJson({
      "title": title,
      "desc": desc,
      "disablePush": false,
      "ext": ext,
      "iOSSound": chatConfig.notificationIOSSound,
      "ignoreIOSBadge": false,
      "androidOPPOChannelID": chatConfig.notificationOPPOChannelID,
    });
  }

  Future<V2TimValueCallback<V2TimMessage>?> reSendMessage(
      {required String msgID,
      required String convID,
      bool? onlineUserOnly}) async {
    final res = await _messageService.reSendMessage(
        msgID: msgID, onlineUserOnly: onlineUserOnly ?? false);
    final messageInfo = res.data;
    final currentHistoryMsgList = _messageListMap[convID] ?? [];
    // final messageInfo = textMessageInfo!.messageInfo;
    if (messageInfo != null) {
      final messageInfoWithSender =
          _setUserInfoForMessage(messageInfo, messageInfo.id!);
      final lifeCycleMsg =
          await _lifeCycle?.messageWillSend(messageInfoWithSender) ??
              messageInfoWithSender;
      _messageListMap[convID] = [lifeCycleMsg, ...currentHistoryMsgList];
    }
    return res;
  }

  // 注意重发消息需要先删除之前发送失败的图
  Future<V2TimValueCallback<V2TimMessage>?> reSendFailMessage(
      {required V2TimMessage message,
      required String convID,
      required ConvType convType}) async {
    await deleteMsg(message.msgID ?? "", id: message.id);
    int messageType = message.elemType;
    V2TimValueCallback<V2TimMessage>? res;
    if (messageType == MessageElemType.V2TIM_ELEM_TYPE_TEXT) {
      String text = message.textElem!.text!;
      if (_repliedMessage != null) {
        res = await sendReplyMessage(
            text: text, convID: convID, convType: convType);
      } else {
        res = await sendTextMessage(
            text: text, convID: convID, convType: convType);
      }
    }
    if (messageType == MessageElemType.V2TIM_ELEM_TYPE_SOUND) {
      String soundPath = message.soundElem!.path!;
      int duration = message.soundElem!.duration!;
      res = await sendSoundMessage(
          soundPath: soundPath,
          duration: duration,
          convID: convID,
          convType: convType);
    }
    if (messageType == MessageElemType.V2TIM_ELEM_TYPE_IMAGE) {
      String imagePath = message.imageElem!.path!;
      res = await sendImageMessage(
          imagePath: imagePath, convID: convID, convType: convType);
    }
    if (messageType == MessageElemType.V2TIM_ELEM_TYPE_VIDEO) {
      String videoPath = message.videoElem?.videoPath ?? "";
      int duration = message.videoElem?.duration ?? 0;
      String snapshotPath = message.videoElem?.snapshotPath ?? "";
      res = await sendVideoMessage(
          videoPath: videoPath,
          duration: duration,
          snapshotPath: snapshotPath,
          convID: convID,
          convType: convType);
    }
    if (messageType == MessageElemType.V2TIM_ELEM_TYPE_FILE) {
      String filePath = message.fileElem?.path ?? "";
      int size = message.fileElem?.fileSize ?? 0;
      res = await sendFileMessage(
          filePath: filePath, size: size, convID: convID, convType: convType);
    }

    return res;
  }

  Future<V2TimValueCallback<V2TimMessage>?> sendTextMessage(
      {required String text,
      required String convID,
      required ConvType convType}) async {
    if (text.isEmpty) {
      return null;
    }
    final textMessageInfo = await _messageService.createTextMessage(text: text);
    final currentHistoryMsgList = _messageListMap[convID] ?? [];
    final messageInfo = textMessageInfo!.messageInfo;
    if (messageInfo != null) {
      final messageInfoWithSender =
          _setUserInfoForMessage(messageInfo, textMessageInfo.id!);
      final lifeCycleMsg =
          await _lifeCycle?.messageWillSend(messageInfoWithSender) ??
              messageInfoWithSender;
      _messageListMap[convID] = [lifeCycleMsg, ...currentHistoryMsgList];

      notifyListeners();
      return _sendMessage(
          convID: convID,
          id: textMessageInfo.id as String,
          convType: convType,
          offlinePushInfo: buildMessagePushInfo(
              textMessageInfo.messageInfo!, convID, convType));
    }
    return null;
  }

  Future<V2TimValueCallback<V2TimMessage>?>? sendMessageFromController(
      {required V2TimMessage? messageInfo,
      required String convID,
      required ConvType convType}) {
    final currentHistoryMsgList = _messageListMap[convID] ?? [];
    if (messageInfo != null) {
      _messageListMap[convID] = [messageInfo, ...currentHistoryMsgList];
      notifyListeners();
      return _sendMessage(
          convID: convID,
          id: messageInfo.id as String,
          convType: convType,
          offlinePushInfo: buildMessagePushInfo(messageInfo, convID, convType));
    }
    return null;
  }

  Future<V2TimValueCallback<V2TimMessage>?> sendTextAtMessage(
      {required String text,
      required String convID,
      required ConvType convType,
      required List<String> atUserList}) async {
    if (text.isEmpty) {
      return null;
    }
    final textATMessageInfo = await _messageService.createTextAtMessage(
        text: text, atUserList: atUserList);
    final currentHistoryMsgList = _messageListMap[convID] ?? [];
    final messageInfo = textATMessageInfo!.messageInfo;
    if (messageInfo != null) {
      final messageInfoWithSender =
          _setUserInfoForMessage(messageInfo, textATMessageInfo.id!);
      final lifeCycleMsg =
          await _lifeCycle?.messageWillSend(messageInfoWithSender) ??
              messageInfoWithSender;
      _messageListMap[convID] = [lifeCycleMsg, ...currentHistoryMsgList];

      notifyListeners();
      return _sendMessage(
          convID: convID,
          id: textATMessageInfo.id as String,
          convType: ConvType.group,
          offlinePushInfo: buildMessagePushInfo(
              textATMessageInfo.messageInfo!, convID, convType));
    }
    return null;
  }

  Future<V2TimValueCallback<V2TimMessage>?> sendCustomMessage(
      {required String data,
      required String convID,
      required ConvType convType}) async {
    final textATMessageInfo =
        await _messageService.createCustomMessage(data: data);
    final currentHistoryMsgList = _messageListMap[convID] ?? [];
    final messageInfo = textATMessageInfo!.messageInfo;
    if (messageInfo != null) {
      final messageInfoWithSender =
          _setUserInfoForMessage(messageInfo, textATMessageInfo.id!);
      final lifeCycleMsg =
          await _lifeCycle?.messageWillSend(messageInfoWithSender) ??
              messageInfoWithSender;
      _messageListMap[convID] = [lifeCycleMsg, ...currentHistoryMsgList];

      notifyListeners();
      return _sendMessage(
          convID: convID,
          id: textATMessageInfo.id as String,
          convType: convType,
          offlinePushInfo: buildMessagePushInfo(
              textATMessageInfo.messageInfo!, convID, convType));
    }
    return null;
  }

  Future<V2TimValueCallback<V2TimMessage>?> sendFaceMessage(
      {required int index,
      required String data,
      required String convID,
      required ConvType convType}) async {
    final textMessageInfo =
        await _messageService.createFaceMessage(index: index, data: data);
    final currentHistoryMsgList = _messageListMap[convID] ?? [];
    final messageInfo = textMessageInfo!.messageInfo;
    if (messageInfo != null) {
      final messageInfoWithSender =
          _setUserInfoForMessage(messageInfo, textMessageInfo.id!);
      final lifeCycleMsg =
          await _lifeCycle?.messageWillSend(messageInfoWithSender) ??
              messageInfoWithSender;
      _messageListMap[convID] = [lifeCycleMsg, ...currentHistoryMsgList];
      notifyListeners();
      return _sendMessage(
          convID: convID,
          id: textMessageInfo.id as String,
          convType: convType,
          offlinePushInfo: buildMessagePushInfo(
              textMessageInfo.messageInfo!, convID, convType));
    }
    return null;
  }

  Future<V2TimValueCallback<V2TimMessage>?> sendSoundMessage({
    required String soundPath,
    required int duration,
    required String convID,
    required ConvType convType,
  }) async {
    final soundMessageInfo = await _messageService.createSoundMessage(
        soundPath: soundPath, duration: duration);
    final currentHistoryMsgList = _messageListMap[convID] ?? [];
    final messageInfo = soundMessageInfo!.messageInfo;
    if (messageInfo != null) {
      final messageInfoWithSender =
          _setUserInfoForMessage(messageInfo, soundMessageInfo.id!);
      final lifeCycleMsg =
          await _lifeCycle?.messageWillSend(messageInfoWithSender) ??
              messageInfoWithSender;
      _messageListMap[convID] = [lifeCycleMsg, ...currentHistoryMsgList];

      notifyListeners();
      return _sendMessage(
        convID: convID,
        id: soundMessageInfo.id as String,
        convType: convType,
        offlinePushInfo: buildMessagePushInfo(
            soundMessageInfo.messageInfo!, convID, convType),
      );
    }
    return null;
  }

  Future<V2TimValueCallback<V2TimMessage>?> sendReplyMessage(
      {required String text,
      required String convID,
      required ConvType convType}) async {
    if (text.isEmpty) {
      return null;
    }
    if (_repliedMessage != null) {
      final textMessageInfo =
          await _messageService.createTextMessage(text: text);
      final messageInfo = textMessageInfo!.messageInfo;
      final receiver = convType == ConvType.c2c ? convID : '';
      final groupID = convType == ConvType.group ? convID : '';
      if (messageInfo != null) {
        final sendMsgRes = await _messageService.sendReplyMessage(
            id: textMessageInfo.id as String,
            replyMessage: _repliedMessage!,
            needReadReceipt: chatConfig.isShowGroupReadingStatus &&
                convType == ConvType.group &&
                chatConfig.groupReadReceiptPermisionList != null &&
                chatConfig.groupReadReceiptPermisionList!.contains(_groupType),
            groupID: groupID,
            receiver: receiver);
        _repliedMessage = null;
        _updateMessage(sendMsgRes, convID, textMessageInfo.id!, convType);

        notifyListeners();
        return sendMsgRes;
      }
    }
    return null;
  }

  Future<V2TimValueCallback<V2TimMessage>?> sendImageMessage(
      {required String imagePath,
      required String convID,
      required ConvType convType}) async {
    final imageMessageInfo =
        await _messageService.createImageMessage(imagePath: imagePath);
    final messageInfo = imageMessageInfo!.messageInfo;
    if (messageInfo != null) {
      final messageInfoWithSender =
          _setUserInfoForMessage(messageInfo, imageMessageInfo.id);
      final lifeCycleMsg =
          await _lifeCycle?.messageWillSend(messageInfoWithSender) ??
              messageInfoWithSender;
      _messageListMap[convID] = [lifeCycleMsg, ...?_messageListMap[convID]];

      notifyListeners();
      return _sendMessage(
        convID: convID,
        id: imageMessageInfo.id as String,
        convType: convType,
        offlinePushInfo: buildMessagePushInfo(
            imageMessageInfo.messageInfo!, convID, convType),
      );
    }
    return null;
  }

  Future<V2TimValueCallback<V2TimMessage>?> sendVideoMessage(
      {required String videoPath,
      required int duration,
      required String snapshotPath,
      required String convID,
      required ConvType convType}) async {
    final videoMessageInfo = await _messageService.createVideoMessage(
        videoPath: videoPath,
        type: 'mp4',
        duration: duration,
        snapshotPath: snapshotPath);
    final messageInfo = videoMessageInfo!.messageInfo;
    if (messageInfo != null) {
      final messageInfoWithSender =
          _setUserInfoForMessage(messageInfo, videoMessageInfo.id);
      final lifeCycleMsg =
          await _lifeCycle?.messageWillSend(messageInfoWithSender) ??
              messageInfoWithSender;
      _messageListMap[convID] = [lifeCycleMsg, ...?_messageListMap[convID]];

      notifyListeners();
      return _sendMessage(
        convID: convID,
        id: videoMessageInfo.id as String,
        convType: convType,
        offlinePushInfo: buildMessagePushInfo(
            videoMessageInfo.messageInfo!, convID, convType),
      );
    }
    return null;
  }

  Future<V2TimValueCallback<V2TimMessage>?> sendFileMessage(
      {required String filePath,
      required int size,
      required String convID,
      required ConvType convType}) async {
    final fileMessageInfo = await _messageService.createFileMessage(
        fileName: filePath.split('/').last, filePath: filePath);
    final messageInfo = fileMessageInfo!.messageInfo;
    if (messageInfo != null) {
      final messageInfoWithSender =
          _setUserInfoForMessage(messageInfo, fileMessageInfo.id);
      messageInfoWithSender.fileElem!.fileSize = size;
      final lifeCycleMsg =
          await _lifeCycle?.messageWillSend(messageInfoWithSender) ??
              messageInfoWithSender;
      _messageListMap[convID] = [lifeCycleMsg, ...?_messageListMap[convID]];

      notifyListeners();
      return _sendMessage(
        convID: convID,
        id: fileMessageInfo.id as String,
        convType: convType,
        offlinePushInfo: buildMessagePushInfo(
            fileMessageInfo.messageInfo!, convID, convType),
      );
    }
    return null;
  }

  Future<V2TimValueCallback<V2TimMessage>?> sendLocationMessage(
      {required String desc,
      required double longitude,
      required double latitude,
      required String convID,
      required ConvType convType}) async {
    final locationMessageInfo = await _messageService.createLocationMessage(
        desc: desc, longitude: longitude, latitude: latitude);
    final messageInfo = locationMessageInfo!.messageInfo;
    if (messageInfo != null) {
      final messageInfoWithSender =
          _setUserInfoForMessage(messageInfo, locationMessageInfo.id);
      final lifeCycleMsg =
          await _lifeCycle?.messageWillSend(messageInfoWithSender) ??
              messageInfoWithSender;
      _messageListMap[convID] = [lifeCycleMsg, ...?_messageListMap[convID]];

      notifyListeners();
      return _sendMessage(
        convID: convID,
        id: locationMessageInfo.id as String,
        convType: convType,
        offlinePushInfo: buildMessagePushInfo(
            locationMessageInfo.messageInfo!, convID, convType),
      );
    }
    return null;
  }

  /// 逐条转发
  sendForwardMessage({
    required List<V2TimConversation> conversationList,
  }) async {
    for (var conversation in conversationList) {
      final convID = conversation.groupID ?? conversation.userID ?? "";
      final convType = conversation.type;
      for (var message in _multiSelectedMessageList) {
        final forwardMessageInfo =
            await _messageService.createForwardMessage(msgID: message.msgID!);
        final messageInfo = forwardMessageInfo!.messageInfo;
        if (messageInfo != null) {
          final messageInfoWithSender =
              _setUserInfoForMessage(messageInfo, forwardMessageInfo.id);
          final lifeCycleMsg =
              await _lifeCycle?.messageWillSend(messageInfoWithSender) ??
                  messageInfoWithSender;
          _messageListMap[convID] = [lifeCycleMsg, ...?_messageListMap[convID]];
          notifyListeners();
          _sendMessage(
            id: forwardMessageInfo.id!,
            convID: convID,
            convType: convType == 1 ? ConvType.c2c : ConvType.group,
            offlinePushInfo: buildMessagePushInfo(
                forwardMessageInfo.messageInfo!,
                convID,
                convType == 1 ? ConvType.c2c : ConvType.group),
          );
        }
      }
    }
  }

  /// 合并转发
  Future<V2TimValueCallback<V2TimMessage>?> sendMergerMessage({
    required List<V2TimConversation> conversationList,
    required String title,
    required List<String> abstractList,
    required BuildContext context,
  }) async {
    for (var conversation in conversationList) {
      final convID = conversation.groupID ?? conversation.userID ?? "";
      final convType = conversation.type;
      final List<String> msgIDList = _multiSelectedMessageList
          .map((e) => e.msgID ?? "")
          .where((element) => element != "")
          .toList();
      final mergerMessageInfo = await _messageService.createMergerMessage(
          msgIDList: msgIDList,
          title: title,
          abstractList: abstractList,
          compatibleText: TIM_t("该版本不支持此消息"));
      final messageInfo = mergerMessageInfo!.messageInfo;
      if (messageInfo != null) {
        final messageInfoWithSender =
            _setUserInfoForMessage(messageInfo, mergerMessageInfo.id);
        final lifeCycleMsg =
            await _lifeCycle?.messageWillSend(messageInfoWithSender) ??
                messageInfoWithSender;
        if (_messageListMap[convID] != null) {
          _messageListMap[convID] = [lifeCycleMsg, ...?_messageListMap[convID]];
        } else {
          _messageListMap[convID] = [lifeCycleMsg, ...?_messageListMap[convID]];
        }
        notifyListeners();
        return _sendMessage(
          id: mergerMessageInfo.id!,
          convID: convID,
          convType: convType == 1 ? ConvType.c2c : ConvType.group,
          offlinePushInfo: buildMessagePushInfo(mergerMessageInfo.messageInfo!,
              convID, convType == 1 ? ConvType.c2c : ConvType.group),
        );
      }
    }
    return null;
  }

  _onMessageModified(V2TimMessage modifiedMessage, [String? convID]) async {
    final activeMessageList = _messageListMap[convID ?? _currentSelectedConv];
    final V2TimMessage newMsg =
        await _lifeCycle?.modifiedMessageWillMount(modifiedMessage) ??
            modifiedMessage;
    final msgID = newMsg.msgID;
    _messageListMap[_currentSelectedConv] = activeMessageList!.map((item) {
      if (item.msgID == msgID) {
        return newMsg;
      }
      return item;
    }).toList();
    notifyListeners();
    storeMsgToLocal(activeMessageList, _currentSelectedConv);
  }

  Future<V2TimValueCallback<V2TimMessageChangeInfo>?> modifyMessage(
      {required V2TimMessage message}) async {
    return _messageService.modifyMessage(message: message);
  }

  Future<void> updateMessageFromController(
      {required String msgID,
      String? receiverID,
      String? groupID,
      ConvType? convType}) async {
    String convID;
    if (convType == null) {
      convID = _currentSelectedConv;
    } else {
      convID = (convType == ConvType.c2c ? receiverID : groupID) ??
          _currentSelectedConv;
    }

    V2TimMessage? newMessage = await _getExistingMessageByID(
        msgID: msgID,
        convID: convID,
        convType: convType ??
            (_currentSelectedConvType == 1 ? ConvType.c2c : ConvType.group));
    if (newMessage != null) {
      _onMessageModified(newMessage, convID);
    } else {
      loadData(
        count: HistoryMessageDartConstant.getCount, //20
        userID: convType == ConvType.c2c ? convID : null,
        groupID: convType == ConvType.group ? convID : null,
      );
    }
  }

  Future<V2TimMessage?> _getExistingMessageByID(
      {required String msgID,
      required String convID,
      ConvType? convType}) async {
    final currentHistoryMsgList = _messageListMap[convID];
    final int? targetIndex = currentHistoryMsgList?.indexWhere((item) {
      return item.msgID == msgID;
    });

    if (targetIndex != null &&
        targetIndex != -1 &&
        currentHistoryMsgList != null &&
        currentHistoryMsgList.isNotEmpty) {
      List<V2TimMessage> response;
      if (currentHistoryMsgList.length > targetIndex + 2) {
        response = await _messageService.getHistoryMessageList(
            count: 1,
            getType: HistoryMsgGetTypeEnum.V2TIM_GET_LOCAL_NEWER_MSG,
            userID: convType == ConvType.c2c ? convID : null,
            groupID: convType == ConvType.group ? convID : null,
            lastMsgID: currentHistoryMsgList[targetIndex + 1].msgID);
      } else {
        response = await _messageService.getHistoryMessageList(
          count: 5,
          getType: HistoryMsgGetTypeEnum.V2TIM_GET_LOCAL_OLDER_MSG,
          userID: convType == ConvType.c2c ? convID : null,
          groupID: convType == ConvType.group ? convID : null,
          lastMsgID: currentHistoryMsgList.length - 3 < 0
              ? null
              : currentHistoryMsgList[currentHistoryMsgList.length - 3].msgID,
        );
      }

      return response.firstWhere((item) {
        return item.msgID == msgID;
      });
    } else {
      return null;
    }
  }

  _updateMessage(V2TimValueCallback<V2TimMessage> sendMsgRes, String convID,
      String id, ConvType convType) {
    final currentHistoryMsgList = _messageListMap[convID];
    final sendMsgResData = sendMsgRes.data as V2TimMessage;
    if ([80001, 80002].contains(sendMsgRes.code) &&
        sendMsgRes.data?.textElem?.text != null &&
        _setInputField != null) {
      _setInputField!(sendMsgRes.data!.textElem!.text ?? "");
    }
    if (currentHistoryMsgList != null) {
      final findIdIndex =
          currentHistoryMsgList.indexWhere((element) => element.id == id);
      final targetIndex = findIdIndex == -1
          ? currentHistoryMsgList
              .indexWhere((element) => element.msgID == sendMsgResData.msgID)
          : findIdIndex;
      if (targetIndex != -1) {
        _messageListMap[convID]![targetIndex] = sendMsgResData;
      } else {
        _messageListMap[convID] = [sendMsgResData, ...?_messageListMap[convID]];
      }
    } else {
      _messageListMap[convID] = [sendMsgRes.data!];
    }
    if (chatConfig.isShowGroupReadingStatus &&
        convType == ConvType.group &&
        chatConfig.groupReadReceiptPermisionList != null &&
        chatConfig.groupReadReceiptPermisionList!.contains(_groupType)) {
      _messageReadReceiptMap[sendMsgRes.data!.msgID!] =
          V2TimMessageReceipt(timestamp: 0, userID: "", readCount: 0);
    }

    notifyListeners();
    final latestMsgList = _messageListMap[convID];
    storeMsgToLocal(latestMsgList, convID);
  }

  Future<V2TimValueCallback<V2TimMessage>> _sendMessage({
    required String id,
    required String convID,
    required ConvType convType,
    required OfflinePushInfo offlinePushInfo,
  }) async {
    final receiver = convType == ConvType.c2c ? convID : '';
    final groupID = convType == ConvType.group ? convID : '';
    final sendMsgRes = await _messageService.sendMessage(
      id: id,
      receiver: receiver,
      needReadReceipt: chatConfig.isShowGroupReadingStatus &&
          convType == ConvType.group &&
          chatConfig.groupReadReceiptPermisionList != null &&
          chatConfig.groupReadReceiptPermisionList!.contains(_groupType),
      groupID: groupID,
      offlinePushInfo: offlinePushInfo,
    );

    _updateMessage(sendMsgRes, convID, id, convType);

    return sendMsgRes;
  }

  deleteMsg(String msgID, {String? id}) async {
    if (_lifeCycle?.shouldDeleteMessage != null &&
        await _lifeCycle!.shouldDeleteMessage(msgID) == false) {
      return;
    }
    final res =
        await _messageService.deleteMessageFromLocalStorage(msgID: msgID);
    if (res.code == 0) {
      _messageListMap[_currentSelectedConv]!.removeWhere((element) {
        return element.msgID == msgID || (id != null && element.id == id);
      });
      notifyListeners();
    }
    final latestMsgList = _messageListMap[_currentSelectedConv];
    storeMsgToLocal(latestMsgList, _currentSelectedConv);
  }

  Future<V2TimCallback> revokeMsg(String msgID) async {
    final res = await _messageService.revokeMessage(msgID: msgID);
    if (res.code == 0) {
      _onMessageRevoked(msgID);
    }
    final latestMsgList = _messageListMap[_currentSelectedConv];
    storeMsgToLocal(latestMsgList, _currentSelectedConv);
    return res;
  }

  markMessageAsRead({
    required String convID,
    required int convType,
  }) {
    _unreadCountForConversation = 0;
    if (convType == 1) {
      return _messageService.markC2CMessageAsRead(userID: convID);
    }

    _messageService.markGroupMessageAsRead(groupID: convID);
  }

  Future<List<V2TimMessage>?> downloadMergerMessage(String msgID) {
    return _messageService.downloadMergerMessage(msgID: msgID);
  }

  updateMultiSelectStatus(bool isSelect) {
    _isMultiSelect = isSelect;
    if (!isSelect) {
      _multiSelectedMessageList.clear();
    }
    notifyListeners();
  }

  setRepliedMessage(V2TimMessage? repliedMessage) {
    _repliedMessage = repliedMessage;
    notifyListeners();
  }

  addToMultiSelectedMessageList(V2TimMessage message) {
    _multiSelectedMessageList.add(message);
    notifyListeners();
  }

  removeFromMultiSelectedMessageList(V2TimMessage message) {
    _multiSelectedMessageList.remove(message);
    notifyListeners();
  }

  deleteSelectedMsg() async {
    final msgIDs = _multiSelectedMessageList
        .map((e) => e.msgID ?? "")
        .where((element) => element != "")
        .toList();
    final res = await _messageService.deleteMessages(msgIDs: msgIDs);
    if (res.code == 0) {
      for (var msgID in msgIDs) {
        _messageListMap[_currentSelectedConv]!
            .removeWhere((element) => element.msgID == msgID);
      }
      notifyListeners();

      final latestMsgList = _messageListMap[_currentSelectedConv];
      storeMsgToLocal(latestMsgList, _currentSelectedConv);
    }
  }

  Future<V2TimMessage?> findMessage(String msgID) async {
    final messageListMap = _messageListMap[_currentSelectedConv];
    if (messageListMap != null) {
      final repliedMessage =
          messageListMap.where((element) => element.msgID == msgID).toList();
      if (repliedMessage.isNotEmpty) {
        return repliedMessage.first;
      }
      final message =
          await _messageService.findMessages(messageIDList: [msgID]);
      if (message != null && message.isNotEmpty) {
        return message.first;
      }
    }
    return null;
  }

  setLocalCustomInt(String msgID, int localCustomInt) async {
    final res = await _messageService.setLocalCustomInt(
        msgID: msgID, localCustomInt: localCustomInt);
    if (res.code == 0) {
      _messageListMap[_currentSelectedConv]?.map((item) {
        if (item.msgID == msgID) {
          item.localCustomInt = HistoryMessageDartConstant.read;
        }
        return item;
      }).toList();
    }
    notifyListeners();
  }

  setLocalCustomData(String msgID, String localCustomData) async {
    final res = await _messageService.setLocalCustomData(
        msgID: msgID, localCustomData: localCustomData);
    if (res.code == 0) {
      _messageListMap[_currentSelectedConv]?.map((item) {
        if (item.msgID == msgID) {
          item.localCustomData = localCustomData;
        }
        return item;
      }).toList();
    }
    notifyListeners();
  }

  Future<V2TimValueCallback<List<V2TimMessageReceipt>>> getMessageReadReceipts(
      List<String> messageIDList) {
    return _messageService.getMessageReadReceipts(messageIDList: messageIDList);
  }

  Future<V2TimValueCallback<V2TimGroupMessageReadMemberList>>
      getGroupMessageReadMemberList(String messageID,
          GetGroupMessageReadMemberListFilter fileter, int nextSeq) async {
    final res = await _messageService.getGroupMessageReadMemberList(
        nextSeq: nextSeq, messageID: messageID, filter: fileter);
    return res;
  }

  sendMessageReadReceipts(List<String> messageIDList) async {
    final res = await _messageService.sendMessageReadReceipts(
        messageIDList: messageIDList);
    return res;
  }

  clearHistory() async {
    if (_lifeCycle?.shouldClearHistoricalMessageList != null &&
        await _lifeCycle!
                .shouldClearHistoricalMessageList(_currentSelectedConv) ==
            false) {
      return;
    }
    _messageListMap[_currentSelectedConv] = [];
    notifyListeners();
    storeMsgToLocal([], _currentSelectedConv);
  }

  clear() {
    _messageListMap.clear();
    _totalUnreadCount = 0;
    resetData();
  }

  resetData() {
    _isMultiSelect = false;
    _currentSelectedConv = "";
    _editRevokedMsg = "";
    _currentSelectedConvType = null;
    _haveMoreData = true;
    _multiSelectedMessageList.clear();
    _groupType = null;
    _setInputField = null;
    _lifeCycle = null;
  }
}
文件：/im-flutter-uikit/package_src/tim_ui_kit/lib/business_logic/view_models/tui_contact_view_model.dart
import 'package:flutter/material.dart';
import 'package:tim_ui_kit/business_logic/life_cycle/friend_list_life_cycle.dart';
import 'package:tim_ui_kit/data_services/friendShip/friendship_services.dart';
import 'package:tim_ui_kit/data_services/services_locatar.dart';
import 'package:tim_ui_kit/tim_ui_kit.dart';

class TUIContactViewModel extends ChangeNotifier {
  final FriendshipServices _friendshipServices =
      serviceLocator<FriendshipServices>();
  List<V2TimFriendInfo>? _friendList;
  FriendListLifeCycle? _lifeCycle;

  set lifeCycle(FriendListLifeCycle? value) {
    _lifeCycle = value;
  }

  V2TimFriendshipListener? _friendshipListener;

  List<V2TimFriendInfo>? get friendList {
    return _friendList;
  }

  loadData() async {
    final List<V2TimFriendInfo> res =
        await _friendshipServices.getFriendList() ?? [];
    final memberList = await _lifeCycle?.friendListWillMount(res) ?? res;
    _friendList = memberList;
    notifyListeners();
  }

  setFriendshipListener({V2TimFriendshipListener? listener}) {
    final friendListener = V2TimFriendshipListener(
      // onBlackListAdd: (infoList) {
      //   listener?.onBlackListAdd(infoList);
      //   loadData();
      // },
      // onBlackListDeleted: (userList) {
      //   listener?.onBlackListDeleted(userList);
      //   loadData();
      // },
      onFriendInfoChanged: (infoList) {
        listener?.onFriendInfoChanged(infoList);
        loadData();
      },
      onFriendListAdded: (users) {
        listener?.onFriendListAdded(users);
        loadData();
      },
      onFriendListDeleted: (userList) {
        listener?.onFriendListDeleted(userList);
        loadData();
      },
    );

    _friendshipListener = friendListener;
    if (_friendshipListener != null) {
      _friendshipServices.setFriendshipListener(listener: _friendshipListener!);
    }
  }

  removeFriendShipListener() {
    _friendshipServices.removeFriendListener(listener: _friendshipListener);
  }
}
文件：/im-flutter-uikit/package_src/tim_ui_kit/lib/business_logic/view_models/tui_conversation_view_model.dart
import 'package:flutter/material.dart';
import 'package:tencent_im_base/tencent_im_base.dart';
import 'package:tim_ui_kit/business_logic/life_cycle/conversation_life_cycle.dart';
import 'package:tim_ui_kit/business_logic/view_models/tui_chat_view_model.dart';
import 'package:tim_ui_kit/data_services/conversation/conversation_services.dart';
import 'package:tim_ui_kit/data_services/message/message_services.dart';
import 'package:tim_ui_kit/data_services/services_locatar.dart';
import 'package:tim_ui_kit/data_services/friendShip/friendship_services.dart';

List<T> removeDuplicates<T>(
    List<T> list, bool Function(T first, T second) isEqual) {
  List<T> output = [];
  for (var i = 0; i < list.length; i++) {
    bool found = false;
    for (var j = 0; j < output.length; j++) {
      if (isEqual(list[i], output[j])) {
        found = true;
      }
    }
    if (!found) {
      output.add(list[i]);
    }
  }

  return output;
}

class TUIConversationViewModel extends ChangeNotifier {
  final ConversationService _conversationService =
      serviceLocator<ConversationService>();
  final FriendshipServices _friendshipServices =
      serviceLocator<FriendshipServices>();
  final TUIChatViewModel _chatViewModel = serviceLocator<TUIChatViewModel>();
  final MessageService _messageService = serviceLocator<MessageService>();
  V2TimConversationListener? _conversationListener;
  List<V2TimConversation?> _conversationList = [];
  static V2TimConversation? _selectedConversation;
  bool _haveMoreData = true;
  String _nextSeq = "0";
  ConversationLifeCycle? _lifeCycle;

  List<V2TimConversation?> get conversationList {
    _conversationList.sort((a, b) => b!.orderkey!.compareTo(a!.orderkey!));
    return _conversationList;
  }

  bool get haveMoreData {
    return _haveMoreData;
  }

  set lifeCycle(ConversationLifeCycle? value) {
    _lifeCycle = value;
  }

  set conversationList(List<V2TimConversation?> conversationList) {
    _conversationList = conversationList;
    notifyListeners();
  }

  V2TimConversation? get selectedConversation {
    return _selectedConversation;
  }

  static V2TimConversation? of() {
    return _selectedConversation;
  }

  void loadData({required int count}) async {
    _haveMoreData = true;
    final conversationResult = await _conversationService.getConversationList(
        nextSeq: _nextSeq, count: count);
    _nextSeq = conversationResult!.nextSeq ?? "";
    final conversationList = conversationResult.conversationList;
    if (conversationList != null) {
      if (conversationList.isEmpty || conversationList.length < count) {
        _haveMoreData = false;
      }
      final List<V2TimConversation?> combinedConversationList = [
        ..._conversationList,
        ...conversationList
      ];
      final List<V2TimConversation?> finalConversationList = await _lifeCycle
              ?.conversationListWillMount(combinedConversationList) ??
          combinedConversationList;
      _conversationList = removeDuplicates<V2TimConversation?>(
          finalConversationList,
          (item1, item2) => item1?.conversationID == item2?.conversationID);
      notifyListeners();
    }
  }

  void setSelectedConversation(V2TimConversation conversation) {
    _selectedConversation = conversation;
  }

  pinConversation({
    required String conversationID,
    required bool isPinned,
  }) {
    return _conversationService.pinConversation(
        conversationID: conversationID, isPinned: isPinned);
  }

  clearHistoryMessage({required String convID, required int convType}) async {
    if (_lifeCycle?.shouldClearHistoricalMessageForConversation != null &&
        await _lifeCycle!.shouldClearHistoricalMessageForConversation(convID) ==
            false) {
      return null;
    }
    if (convType == 1) {
      _messageService.clearC2CHistoryMessage(userID: convID);
    } else {
      _messageService.clearGroupHistoryMessage(groupID: convID);
    }
  }

  searchFriends(String searchKey) async {
    final res = await _friendshipServices.searchFriends(
        searchParam: V2TimFriendSearchParam(keywordList: [searchKey]));
    return res;
  }

  Future<V2TimCallback?> deleteConversation(
      {required String conversationID}) async {
    if (_lifeCycle?.shouldDeleteConversation != null &&
        await _lifeCycle!.shouldDeleteConversation(conversationID) == false) {
      return null;
    }
    final res = await _conversationService.deleteConversation(
        conversationID: conversationID);
    if (res.code == 0) {
      _conversationList
          .removeWhere((element) => element?.conversationID == conversationID);
      notifyListeners();
    }
    return res;
  }

  _onConversationListChanged(List<V2TimConversation> list) {
    for (int element = 0; element < list.length; element++) {
      int index = _conversationList.indexWhere(
          (item) => item!.conversationID == list[element].conversationID);
      if (index > -1) {
        _conversationList.setAll(index, [list[element]]);
      } else {
        _conversationList.add(list[element]);
      }
      // ignore: todo
    } // TODO

    notifyListeners();
  }

  _addNewConversation(List<V2TimConversation> list) {
    _conversationList.addAll(list);
    _conversationList = removeDuplicates<V2TimConversation?>(_conversationList,
        (item1, item2) => item1?.conversationID == item2?.conversationID);
    notifyListeners();
  }

  setConversationListener({V2TimConversationListener? listener}) {
    _conversationListener = V2TimConversationListener(
      onConversationChanged: (conversationList) {
        _onConversationListChanged(conversationList);
        if (listener != null) {
          listener.onConversationChanged(conversationList);
        }
      },
      onNewConversation: (conversationList) {
        _addNewConversation(conversationList);
        if (listener != null) {
          listener.onNewConversation(conversationList);
        }
      },
      onSyncServerFailed: () {
        if (listener != null) {
          listener.onSyncServerFailed();
        }
      },
      onSyncServerFinish: () {
        if (listener != null) {
          listener.onSyncServerFinish();
        }
      },
      onSyncServerStart: () {
        if (listener != null) {
          listener.onSyncServerStart();
        }
      },
      onTotalUnreadMessageCountChanged: (totalunread) {
        if (listener != null) {
          listener.onTotalUnreadMessageCountChanged(totalunread);
        }
        _chatViewModel.totalUnReadCount = totalunread;
      },
    );

    if (_conversationListener != null) {
      _conversationService.setConversationListener(
          listener: _conversationListener!);
    }
  }

  removeConversationListener() {
    _conversationService.removeConversationListener(
        listener: _conversationListener);
  }

  setConversationDraft(
      {required String conversationID, String? draftText}) async {
    return _conversationService.setConversationDraft(
        conversationID: conversationID, draftText: draftText);
  }

  clear() {
    _conversationList = [];
    _selectedConversation = null;
    _nextSeq = "0";
    _haveMoreData = true;
  }
}
文件：/im-flutter-uikit/package_src/tim_ui_kit/lib/business_logic/view_models/tui_group_profile_view_model.dart
import 'package:flutter/material.dart';
import 'package:tim_ui_kit/business_logic/life_cycle/group_profile_life_cycle.dart';
import 'package:tim_ui_kit/business_logic/view_models/tui_chat_view_model.dart';
import 'package:tim_ui_kit/data_services/conversation/conversation_services.dart';
import 'package:tim_ui_kit/data_services/friendShip/friendship_services.dart';
import 'package:tim_ui_kit/data_services/group/group_services.dart';
import 'package:tim_ui_kit/data_services/message/message_services.dart';
import 'package:tim_ui_kit/data_services/services_locatar.dart';
import 'package:tim_ui_kit/tim_ui_kit.dart';

class TUIGroupProfileViewModel extends ChangeNotifier {
  final GroupServices _groupServices = serviceLocator<GroupServices>();
  final CoreServicesImpl _coreServices = serviceLocator<CoreServicesImpl>();
  final ConversationService _conversationService =
      serviceLocator<ConversationService>();
  final MessageService _messageService = serviceLocator<MessageService>();
  final FriendshipServices _friendshipServices =
      serviceLocator<FriendshipServices>();
  final TUIChatViewModel chatViewModel = serviceLocator<TUIChatViewModel>();

  V2TimGroupInfo? _groupInfo;
  String _groupMemberListSeq = "0";
  List<V2TimGroupMemberFullInfo?>? _groupMemberList = [];
  List<V2TimFriendInfo>? _contactList = [];
  String _groupID = "";
  bool? isDisturb;
  V2TimConversation? conversation;
  V2TimGroupListener? _groupListener;
  GroupProfileLifeCycle? _lifeCycle;

  set lifeCycle(GroupProfileLifeCycle? value) {
    _lifeCycle = value;
  }

  // ignore: unnecessary_getters_setters
  GroupProfileLifeCycle? get lifeCycle {
    return _lifeCycle;
  }

  V2TimGroupInfo? get groupInfo {
    return _groupInfo;
  }

  List<V2TimFriendInfo>? get contactList {
    return _contactList;
  }

  List<V2TimGroupMemberFullInfo?>? get groupMemberList {
    return _groupMemberList;
  }

  clearData() {
    _groupID = "";
    _groupInfo = null;
    _groupMemberList = [];
    _contactList = [];
    _groupMemberListSeq = "0";
  }

  loadData(String groupID) {
    clearData();
    _groupID = groupID;
    _loadGroupInfo(groupID);
    _loadContactList();
    _loadConversation();
    _loadGroupMemberList(count: 50, groupID: groupID);
  }

  _loadConversation() async {
    conversation = await _conversationService.getConversation(
        conversationID: "group_$_groupID");
    isDisturb = conversation?.recvOpt != 0;
  }

  _loadGroupInfo(String groupID) async {
    final groupInfo =
        await _groupServices.getGroupsInfo(groupIDList: [groupID]);
    if (groupInfo != null) {
      final groupRes = groupInfo.first;
      if (groupRes.resultCode == 0) {
        _groupInfo = groupRes.groupInfo;
      }
    }
    notifyListeners();
  }

  _loadContactList() async {
    final res = await _friendshipServices.getFriendList();
    _contactList = res;
  }

  Future<bool> getMemberMuteStatus(String userID) async {
    // Get the mute state of the members recursively
    if (_groupMemberList?.any((item) => (item?.userID == userID)) ?? false) {
      final int muteUntil = _groupMemberList!
              .firstWhere((item) => (item?.userID == userID))
              ?.muteUntil ??
          0;
      return muteUntil * 1000 > DateTime.now().millisecondsSinceEpoch;
    } else {
      return false;
    }
  }

  Future<void> _loadGroupMemberList(
      {required String groupID, int count = 100, String? seq}) async {
    if (seq == null || seq == "" || seq == "0") {
      _groupMemberList = [];
    }
    final String? nextSeq = await _loadGroupMemberListFunction(
        groupID: groupID, seq: seq, count: count);
    if (nextSeq != null && nextSeq != "0" && nextSeq != "") {
      return await _loadGroupMemberList(
          groupID: groupID, count: count, seq: nextSeq);
    }
  }

  Future<String?> _loadGroupMemberListFunction(
      {required String groupID, int count = 100, String? seq}) async {
    if (seq == "0") {
      _groupMemberList?.clear();
    }
    final groupMemberListRes = await _groupServices.getGroupMemberList(
        groupID: groupID,
        filter: GroupMemberFilterTypeEnum.V2TIM_GROUP_MEMBER_FILTER_ALL,
        count: count,
        nextSeq: seq ?? _groupMemberListSeq);
    if (groupMemberListRes != null) {
      final groupMemberList = groupMemberListRes.memberInfoList ?? [];
      _groupMemberList = [...?_groupMemberList, ...groupMemberList];
      _groupMemberListSeq = groupMemberListRes.nextSeq ?? "0";
      notifyListeners();
    }
    return groupMemberListRes?.nextSeq;
  }

  _reloadGroupMemberList({required String groupID, int count = 50}) async {
    final groupMemberListRes = await _groupServices.getGroupMemberList(
        groupID: groupID,
        filter: GroupMemberFilterTypeEnum.V2TIM_GROUP_MEMBER_FILTER_ALL,
        count: count,
        nextSeq: _groupMemberListSeq);
    if (groupMemberListRes != null) {
      final groupMemberList = groupMemberListRes.memberInfoList ?? [];
      _groupMemberList = groupMemberList;
      _groupMemberListSeq = groupMemberListRes.nextSeq ?? "0";
      notifyListeners();
    }
  }

  loadMoreData({required String groupID, int count = 50}) {
    if (_groupMemberListSeq != "0") {
      _loadGroupMemberList(groupID: groupID, count: count);
    }
  }

  setGroupNotification(String notification) async {
    if (_groupInfo != null) {
      _groupInfo?.notification = notification;
      final response = await _groupServices.setGroupInfo(
          info: V2TimGroupInfo.fromJson({
        "groupID": _groupInfo!.groupID,
        "groupType": _groupInfo!.groupType,
        "notification": notification
      }));
      if (response.code == 0) {
        notifyListeners();
      }
    }
  }

  Future<V2TimCallback?> setMuteAll(bool muteAll) async {
    if (_groupInfo != null) {
      _groupInfo?.isAllMuted = muteAll;
      final response = await _groupServices.setGroupInfo(
          info: V2TimGroupInfo.fromJson({
        "groupID": _groupInfo!.groupID,
        "groupType": _groupInfo!.groupType,
        "isAllMuted": muteAll
      }));
      if (response.code != 0) {
        _groupInfo?.isAllMuted = muteAll;
      }
      notifyListeners();
      return response;
    }
    return null;
  }

  Future<V2TimCallback?> setGroupName(String groupName) async {
    if (_groupInfo != null) {
      String? originalGroupName = _groupInfo?.groupName;
      _groupInfo?.groupName = groupName;
      final response = await _groupServices.setGroupInfo(
          info: V2TimGroupInfo.fromJson({
        "groupID": _groupInfo!.groupID,
        "groupType": _groupInfo!.groupType,
        "groupName": groupName
      }));
      if (response.code != 0) {
        _groupInfo?.groupName = originalGroupName;
      }
      notifyListeners();
      return response;
    }
    return null;
  }

  Future<V2TimCallback?> setGroupAddOpt(int addOpt) async {
    if (_groupInfo != null) {
      int? originalAddopt = _groupInfo?.groupAddOpt;
      _groupInfo?.groupAddOpt = addOpt;
      final response = await _groupServices.setGroupInfo(
          info: V2TimGroupInfo.fromJson({
        "groupID": _groupInfo!.groupID,
        "groupType": _groupInfo!.groupType,
        "groupAddOpt": addOpt
      }));
      if (response.code != 0) {
        _groupInfo?.groupAddOpt = originalAddopt;
      }
      notifyListeners();
      return response;
    }
    return null;
  }

  Future<V2TimCallback?> setGroupIntroduction(String introduction) async {
    if (_groupInfo != null) {
      String? originalIntroduction = _groupInfo?.introduction;
      _groupInfo?.introduction = introduction;
      final response = await _groupServices.setGroupInfo(
          info: V2TimGroupInfo.fromJson({
        "groupID": _groupInfo!.groupID,
        "groupType": _groupInfo!.groupType,
        "introduction": introduction
      }));
      if (response.code != 0) {
        _groupInfo?.introduction = originalIntroduction;
      }
      notifyListeners();
      return response;
    }
    return null;
  }

  Future<V2TimCallback> setMemberToNormal(String userID) async {
    final res = await _groupServices.setGroupMemberRole(
        groupID: _groupID,
        userID: userID,
        role: GroupMemberRoleTypeEnum.V2TIM_GROUP_MEMBER_ROLE_MEMBER);
    if (res.code == 0) {
      final targetIndex =
          _groupMemberList!.indexWhere((e) => e!.userID == userID);
      if (targetIndex != -1) {
        final targetElem = _groupMemberList![targetIndex];
        targetElem?.role = GroupMemberRoleType.V2TIM_GROUP_MEMBER_ROLE_MEMBER;
        _groupMemberList![targetIndex] = targetElem;
      }
      notifyListeners();
    }
    return res;
  }

  Future<V2TimCallback> setMemberToAdmin(String userID) async {
    final res = await _groupServices.setGroupMemberRole(
        groupID: _groupID,
        userID: userID,
        role: GroupMemberRoleTypeEnum.V2TIM_GROUP_MEMBER_ROLE_ADMIN);
    if (res.code == 0) {
      final targetIndex =
          _groupMemberList!.indexWhere((e) => e!.userID == userID);
      if (targetIndex != -1) {
        final targetElem = _groupMemberList![targetIndex];
        targetElem?.role = GroupMemberRoleType.V2TIM_GROUP_MEMBER_ROLE_ADMIN;
        _groupMemberList![targetIndex] = targetElem;
      }
      notifyListeners();
    }
    return res;
  }

  Future<V2TimCallback?> muteGroupMember(String userID, bool isMute) async {
    const muteTime = 31556926 * 10;
    final res = await _groupServices.muteGroupMember(
        groupID: _groupID, userID: userID, seconds: isMute ? muteTime : 0);
    if (res.code == 0) {
      final targetIndex =
          _groupMemberList!.indexWhere((e) => e!.userID == userID);
      if (targetIndex != -1) {
        final targetElem = _groupMemberList![targetIndex];
        targetElem?.muteUntil = isMute ? muteTime : 0;
        _groupMemberList![targetIndex] = targetElem;
      }
      notifyListeners();
    }
    return null;
  }

  String getSelfNameCard() {
    try {
      final loginUserID = _coreServices.loginUserInfo?.userID;
      String nameCard = "";
      if (_groupMemberList != null) {
        nameCard = groupMemberList!
                .firstWhere((element) => element?.userID == loginUserID)
                ?.nameCard ??
            "";
      }

      return nameCard;
    } catch (err) {
      return "";
    }
  }

  bool canInviteMember() {
    final groupType = _groupInfo?.groupType;
    return groupType == GroupType.Work;
  }

  bool canKickOffMember() {
    final isGroupOwner =
        _groupInfo?.role == GroupMemberRoleType.V2TIM_GROUP_MEMBER_ROLE_OWNER;
    final isAdmin =
        _groupInfo?.role == GroupMemberRoleType.V2TIM_GROUP_MEMBER_ROLE_ADMIN;
    if (_groupInfo?.groupType == GroupType.Work) {
      /// work 群主才能踢人
      return isGroupOwner;
    }

    if (_groupInfo?.groupType == GroupType.Public ||
        _groupInfo?.groupType == GroupType.Meeting) {
      /// public || meeting 群主和管理员可以踢人
      return isGroupOwner || isAdmin;
    }

    return false;
  }

  Future<V2TimCallback?> setNameCard(String nameCard) async {
    final loginUserID = _coreServices.loginUserInfo?.userID;
    if (loginUserID != null) {
      final res = await _groupServices.setGroupMemberInfo(
          groupID: _groupID, userID: loginUserID, nameCard: nameCard);
      if (res.code == 0) {
        final targetIndex = _groupMemberList
            ?.indexWhere((element) => element?.userID == loginUserID);
        if (targetIndex != -1) {
          _groupMemberList![targetIndex!]!.nameCard = nameCard;
          notifyListeners();
        }
      }
      return res;
    }
    return null;
  }

  Future<V2TimCallback> kickOffMember(List<String> userIDs) async {
    final res = await _groupServices.kickGroupMember(
        groupID: _groupID, memberList: userIDs);
    if (res.code == 0) {
      _groupMemberList?.removeWhere((e) => userIDs.contains(e?.userID));
      notifyListeners();
    }
    return res;
  }

  Future<V2TimValueCallback<List<V2TimGroupMemberOperationResult>>>
      inviteUserToGroup(List<String> userIDS) async {
    final res = await _groupServices.inviteUserToGroup(
        groupID: _groupID, userList: userIDS);
    if (res.code == 0) {
      _reloadGroupMemberList(count: 50, groupID: _groupID);
    }
    return res;
  }

  Future<V2TimValueCallback<V2GroupMemberInfoSearchResult>> searchGroupMember(
      V2TimGroupMemberSearchParam searchParam) async {
    final res =
        await _groupServices.searchGroupMembers(searchParam: searchParam);

    if (res.code == 0) {}
    return res;
  }

  setMessageDisturb(bool value) async {
    final res = await _messageService.setGroupReceiveMessageOpt(
        groupID: _groupID,
        opt: value
            ? ReceiveMsgOptEnum.V2TIM_RECEIVE_NOT_NOTIFY_MESSAGE
            : ReceiveMsgOptEnum.V2TIM_RECEIVE_MESSAGE);
    if (res.code == 0) {
      isDisturb = value;
    }
    notifyListeners();
  }

  pinedConversation(bool isPined) async {
    await _conversationService.pinConversation(
        conversationID: "group_$_groupID", isPinned: isPined);
    conversation?.isPinned = isPined;
    notifyListeners();
  }

  setGroupListener() {
    _groupListener = V2TimGroupListener(onMemberInvited:
        (groupID, opUser, memberList) {
      if (_groupID == groupID && _groupID.isNotEmpty) {
        _loadGroupInfo(groupID);
        _loadGroupMemberList(groupID: groupID, seq: "0");
      }
    }, onMemberKicked: (groupID, opUser, memberList) {
      if (_groupID == groupID && _groupID.isNotEmpty) {
        _loadGroupInfo(groupID);
        _loadGroupMemberList(groupID: groupID, seq: "0");
      }
    }, onGroupInfoChanged: (groupID, changeInfos) {
      if (_groupID == groupID && _groupID.isNotEmpty) {
        _loadGroupInfo(groupID);
        _loadGroupMemberList(groupID: groupID, seq: "0");
      }
    }, onReceiveJoinApplication:
        (String groupID, V2TimGroupMemberInfo member, String opReason) async {
      _onReceiveJoinApplication(groupID, member, opReason);
    }, onApplicationProcessed: (
      String groupID,
      V2TimGroupMemberInfo opUser,
      bool isAgreeJoin,
      String opReason,
    ) async {
      _onApplicationProcessed(groupID, opUser, isAgreeJoin, opReason);
    }, onMemberEnter: (String groupID, List<V2TimGroupMemberInfo> memberList) {
      _onMemberEnter(groupID, memberList);
    });
    _groupServices.addGroupListener(listener: _groupListener!);
  }

  _onReceiveJoinApplication(
      String groupID, V2TimGroupMemberInfo member, String opReason) {
    chatViewModel.refreshGroupApplicationList();
  }

  _onMemberEnter(String groupID, List<V2TimGroupMemberInfo> memberList) {
    // ignore: todo
    // TODO：Provide a callback call for developer
    // chatViewModel.refreshGroupApplicationList();
  }

  _onApplicationProcessed(String groupID, V2TimGroupMemberInfo opUser,
      bool isAgreeJoin, String opReason) {
    // ignore: todo
    // TODO：Provide a callback call for developer
    // print("_onApplicationProcessed $groupID ${opUser.toString()}");
  }

  removeGroupListener() {
    _groupServices.removeGroupListener(listener: _groupListener);
  }

  TUIGroupProfileViewModel() {
    setGroupListener();
  }
}
文件：/im-flutter-uikit/package_src/tim_ui_kit/lib/business_logic/view_models/tui_group_view_model.dart
import 'package:flutter/material.dart';
import 'package:tencent_im_base/tencent_im_base.dart';
import 'package:tim_ui_kit/data_services/group/group_services.dart';
import 'package:tim_ui_kit/data_services/services_locatar.dart';

class TUIGroupViewModel extends ChangeNotifier {
  List<V2TimGroupInfo> _groupList = [];
  final GroupServices _groupServices = serviceLocator<GroupServices>();

  List<V2TimGroupInfo> get groupList {
    return _groupList;
  }

  loadData() async {
    final groupListRes = await _groupServices.getJoinedGroupList();
    _groupList = groupListRes ?? [];
    if (_groupList.isNotEmpty) {
      notifyListeners();
    }
  }

  Future<List<V2TimGroupMemberFullInfo?>> getGroupMembersInfo(
      {required String groupID, required List<String> memberList}) async {
    final res = await _groupServices.getGroupMembersInfo(
        groupID: groupID, memberList: memberList);
    return res.data ?? [];
  }

  deleteGroup() async {}
}
文件：/im-flutter-uikit/package_src/tim_ui_kit/lib/business_logic/view_models/tui_new_contact_view_model.dart
import 'package:flutter/material.dart';
import 'package:tencent_im_base/tencent_im_base.dart';

import 'package:tim_ui_kit/business_logic/life_cycle/new_contact_life_cycle.dart';
import 'package:tim_ui_kit/data_services/friendShip/friendship_services.dart';
import 'package:tim_ui_kit/data_services/services_locatar.dart';

class TUINewContactViewModel extends ChangeNotifier {
  final FriendshipServices _friendshipServices =
      serviceLocator<FriendshipServices>();
  List<V2TimFriendApplication?>? _friendApplicationList;
  V2TimFriendshipListener? _friendshipListener;
  int _unReadCount = 0;
  NewContactLifeCycle? _lifeCycle;

  set lifeCycle(NewContactLifeCycle? value) {
    _lifeCycle = value;
  }

  int get unreadCount => _unReadCount;

  List<V2TimFriendApplication?>? get friendApplicationList =>
      _friendApplicationList;

  loadData() async {
    final newContactRes = await _friendshipServices.getFriendApplicationList();
    // Only Received Application
    _friendApplicationList = newContactRes?.friendApplicationList
        ?.where((item) =>
            item!.type ==
            FriendApplicationTypeEnum.V2TIM_FRIEND_APPLICATION_COME_IN.index)
        .toList();
    _unReadCount = _friendApplicationList?.length ?? 0;
    notifyListeners();
  }

  Future<V2TimFriendOperationResult?> acceptFriendApplication(
    String userID,
    int type,
  ) async {
    if (_lifeCycle?.shouldAcceptContactApplication != null &&
        await _lifeCycle!.shouldAcceptContactApplication(userID) == false) {
      return null;
    }
    final res = await _friendshipServices.acceptFriendApplication(
      responseType: FriendResponseTypeEnum.V2TIM_FRIEND_ACCEPT_AGREE_AND_ADD,
      type: FriendApplicationTypeEnum.values[type],
      userID: userID,
    );
    if (res != null) {
      return res;
    }
    return null;
  }

  Future<V2TimFriendOperationResult?> refuseFriendApplication(
    String userID,
    int type,
  ) async {
    if (_lifeCycle?.shouldRefuseContactApplication != null &&
        await _lifeCycle!.shouldRefuseContactApplication(userID) == false) {
      return null;
    }
    final res = await _friendshipServices.refuseFriendApplication(
      type: FriendApplicationTypeEnum.values[type],
      userID: userID,
    );
    if (res != null) {
      return res;
    }
    return null;
  }

  setFriendshipListener({V2TimFriendshipListener? listener}) {
    loadData();
    final convListener = V2TimFriendshipListener(
      onFriendApplicationListAdded: (applicationList) {
        listener?.onFriendApplicationListAdded(applicationList);
        loadData();
      },
      onFriendApplicationListDeleted: (userIDList) {
        listener?.onFriendApplicationListDeleted(userIDList);
        loadData();
      },
      onFriendApplicationListRead: () {
        listener?.onFriendApplicationListRead();
        loadData();
      },
    );

    _friendshipListener = convListener;
    if (_friendshipListener != null) {
      _friendshipServices.setFriendshipListener(listener: _friendshipListener!);
    }
  }

  removeFriendShipListener() {
    _friendshipServices.removeFriendListener(listener: _friendshipListener);
  }
}
文件：/im-flutter-uikit/package_src/tim_ui_kit/lib/business_logic/view_models/tui_personal_profile_view_model.dart
// ignore_for_file: avoid_print

import 'package:flutter/material.dart';
import 'package:tencent_im_base/tencent_im_base.dart';
import 'package:tim_ui_kit/business_logic/view_models/tui_self_info_view_model.dart';
import 'package:tim_ui_kit/data_services/core/core_services_implements.dart';
import 'package:tim_ui_kit/data_services/friendShip/friendship_services.dart';
import 'package:tim_ui_kit/data_services/services_locatar.dart';

class TUIPersonalProfileViewModel extends ChangeNotifier {
  final FriendshipServices _friendshipServices =
      serviceLocator<FriendshipServices>();
  final CoreServicesImpl _coreServices = serviceLocator<CoreServicesImpl>();
  final TUISelfInfoViewModel _selfInfoViewModel =
      serviceLocator<TUISelfInfoViewModel>();

  V2TimUserFullInfo? _userInfo;

  String? userID;

  V2TimUserFullInfo? get userInfo {
    return _userInfo ?? _selfInfoViewModel.loginInfo;
  }

  loadData({String? userID}) async {
    V2TimFriendInfo? friendUserInfo;
    if (userID != null) {
      final userInfoList =
          await _friendshipServices.getFriendsInfo(userIDList: [userID]);

      if (userInfoList != null) {
        friendUserInfo = userInfoList[0].friendInfo;
      }
    }

    _userInfo = friendUserInfo?.userProfile ??
        _selfInfoViewModel.loginInfo ??
        _coreServices.loginUserInfo;

    notifyListeners();
  }

  changeFriendVerificationMethod(int allowType) async {
    final res = await _coreServices.setSelfInfo(
      userFullInfo: V2TimUserFullInfo.fromJson(
        {"allowType": allowType},
      ),
    );

    if (res.code == 0) {
      _userInfo?.allowType = allowType;
      notifyListeners();
    } else {
      print("${res.code},${res.desc}");
    }
  }

  // 1：男 女：2
  updateGender(int gender) async {
    final res = await _coreServices.setSelfInfo(
      userFullInfo: V2TimUserFullInfo.fromJson(
        {"gender": gender},
      ),
    );
    if (res.code == 0) {
      _userInfo?.gender = gender;
      notifyListeners();
    } else {
      print("${res.code},${res.desc}");
    }
  }

  updateNickName(String nickName) async {
    final res = await _coreServices.setSelfInfo(
      userFullInfo: V2TimUserFullInfo.fromJson(
        {"nickName": nickName},
      ),
    );

    if (res.code == 0) {
      _userInfo?.nickName = nickName;
      notifyListeners();
    } else {
      print("${res.code},${res.desc}");
    }
  }

  updateSelfSignature(String selfSignature) async {
    final res = await _coreServices.setSelfInfo(
      userFullInfo: V2TimUserFullInfo.fromJson(
        {"selfSignature": selfSignature},
      ),
    );
    if (res.code == 0) {
      _userInfo?.selfSignature = selfSignature;
      notifyListeners();
    } else {
      print("${res.code},${res.desc}");
    }
  }

  updateUserInfo(String key, dynamic value) {
    if (key == "nickName") {
      userInfo?.nickName = value;
    }
    if (key == "faceUrl") {
      userInfo?.faceUrl = value;
    }
    if (key == "nickName") {
      userInfo?.nickName = value;
    }
    if (key == "selfSignature") {
      userInfo?.selfSignature = value;
    }
    if (key == "gender") {
      userInfo?.gender = value;
    }
    if (key == "allowType") {
      userInfo?.allowType = value;
    }
    if (key == "customInfo") {
      userInfo?.customInfo = value;
    }
    if (key == "role") {
      userInfo?.role = value;
    }
    if (key == "level") {
      userInfo?.level = value;
    }
    if (key == "birthday") {
      userInfo?.birthday = value;
    }
  }

  updateSelfInfo(Map<String, dynamic> newSelfInfo) async {
    final res = await _coreServices.setSelfInfo(
      userFullInfo: V2TimUserFullInfo.fromJson(
        newSelfInfo,
      ),
    );
    if (res.code == 0) {
      newSelfInfo.forEach((key, value) {
        updateUserInfo(key, value);
      });

      notifyListeners();
    } else {
      print("${res.code},${res.desc}");
    }
  }
}
文件：/im-flutter-uikit/package_src/tim_ui_kit/lib/business_logic/view_models/tui_profile_view_model.dart
// ignore_for_file: avoid_print

import 'package:flutter/material.dart';
import 'package:tencent_im_base/tencent_im_base.dart';
import 'package:tim_ui_kit/business_logic/life_cycle/profile_life_cycle.dart';
import 'package:tim_ui_kit/business_logic/model/profile_model.dart';
import 'package:tim_ui_kit/data_services/conversation/conversation_services.dart';
import 'package:tim_ui_kit/data_services/core/core_services_implements.dart';
import 'package:tim_ui_kit/data_services/friendShip/friendship_services.dart';
import 'package:tim_ui_kit/data_services/message/message_services.dart';
import 'package:tim_ui_kit/data_services/services_locatar.dart';

class TUIProfileViewModel extends ChangeNotifier {
  final ConversationService _conversationService =
      serviceLocator<ConversationService>();
  final FriendshipServices _friendshipServices =
      serviceLocator<FriendshipServices>();
  final CoreServicesImpl _coreServices = serviceLocator<CoreServicesImpl>();
  final MessageService _messageService = serviceLocator<MessageService>();

  UserProfile? _userProfile;
  ProfileLifeCycle? _lifeCycle;
  bool? _shouldAddToBlackList;
  int _friendType = 0;
  bool? _isDisturb;

  UserProfile? get userProfile {
    return _userProfile;
  }

  bool? get isDisturb {
    return _isDisturb;
  }

  bool? get isAddToBlackList {
    return _shouldAddToBlackList;
  }

  int get friendType {
    return _friendType;
  }

  set lifeCycle(ProfileLifeCycle? value) {
    _lifeCycle = value;
  }

  loadData({required String userID}) async {
    V2TimFriendInfo? friendUserInfo;
    final userInfoList =
        await _friendshipServices.getFriendsInfo(userIDList: [userID]);
    final conversation = await _conversationService.getConversation(
        conversationID: "c2c_$userID");
    final checkFriend = await _friendshipServices.checkFriend(
        userIDList: [userID],
        checkType: FriendTypeEnum.V2TIM_FRIEND_TYPE_SINGLE);

    if (checkFriend != null) {
      final res = checkFriend.first;
      if (res.resultCode == 0) {
        _friendType = res.resultType;
      }
    }

    if (userInfoList != null) {
      friendUserInfo = userInfoList[0].friendInfo;
    }

    final friendInfo =
        await _lifeCycle?.didGetFriendInfo(friendUserInfo) ?? friendUserInfo;

    _isDisturb = conversation?.recvOpt == 2;
    _userProfile =
        UserProfile(friendInfo: friendInfo, conversation: conversation);

    notifyListeners();
  }

  pinedConversation(bool isPined, String convID) async {
    await _conversationService.pinConversation(
        conversationID: convID, isPinned: isPined);
    _userProfile?.conversation!.isPinned = isPined;
    notifyListeners();
  }

  addToBlackList(bool shouldAdd, String userID) async {
    if (_lifeCycle?.shouldAddToBlockList != null &&
        await _lifeCycle!.shouldAddToBlockList(userID) == false) {
      return null;
    }
    if (shouldAdd) {
      final res =
          await _friendshipServices.addToBlackList(userIDList: [userID]);
      if (res != null) {
        final result = res.first;
        if (result.resultCode == 0) {
          _shouldAddToBlackList = true;
          _friendType = 0;
        }
      }
    } else {
      final res =
          await _friendshipServices.deleteFromBlackList(userIDList: [userID]);
      if (res != null) {
        final result = res.first;
        if (result.resultCode == 0) {
          _shouldAddToBlackList = false;
          _friendType = 1;
        }
      }
    }
    notifyListeners();
  }

  Future<V2TimFriendOperationResult?> deleteFriend(String userID) async {
    if (_lifeCycle?.shouldDeleteFriend != null &&
        await _lifeCycle!.shouldDeleteFriend(userID) == false) {
      return null;
    }
    final res = await _friendshipServices.deleteFromFriendList(
        userIDList: [userID],
        deleteType: FriendTypeEnum.V2TIM_FRIEND_TYPE_BOTH);
    if (res != null) {
      loadData(userID: userID);
      return res.first;
    }
    return null;
  }

  changeFriendVerificationMethod(int allowType) async {
    final res = await _coreServices.setSelfInfo(
      userFullInfo: V2TimUserFullInfo.fromJson(
        {"allowType": allowType},
      ),
    );
    if (res.code == 0) {
      _userProfile?.friendInfo!.userProfile!.allowType = allowType;
      notifyListeners();
    } else {
      print("${res.code},${res.desc}");
    }
  }

  // 1：男 女：2
  updateGender(int gender) async {
    final res = await _coreServices.setSelfInfo(
      userFullInfo: V2TimUserFullInfo.fromJson(
        {"gender": gender},
      ),
    );
    if (res.code == 0) {
      _userProfile?.friendInfo!.userProfile!.gender = gender;
      notifyListeners();
    } else {
      print("${res.code},${res.desc}");
    }
  }

  updateNickName(String nickName) async {
    final res = await _coreServices.setSelfInfo(
      userFullInfo: V2TimUserFullInfo.fromJson(
        {"nickName": nickName},
      ),
    );

    if (res.code == 0) {
      _userProfile?.friendInfo!.userProfile!.nickName = nickName;
      notifyListeners();
    } else {
      print("${res.code},${res.desc}");
    }
  }

  updateSelfSignature(String selfSignature) async {
    final res = await _coreServices.setSelfInfo(
      userFullInfo: V2TimUserFullInfo.fromJson(
        {"selfSignature": selfSignature},
      ),
    );
    if (res.code == 0) {
      _userProfile?.friendInfo!.userProfile!.selfSignature = selfSignature;
      notifyListeners();
    } else {
      print("${res.code},${res.desc}");
    }
  }

  Future<V2TimFriendOperationResult?> addFriend(String userID) async {
    if (_lifeCycle?.shouldAddFriend != null &&
        await _lifeCycle!.shouldAddFriend(userID) == false) {
      return null;
    }
    final res = await _friendshipServices.addFriend(
        userID: userID, addType: FriendTypeEnum.V2TIM_FRIEND_TYPE_BOTH);
    if (res.code == 0) {
      loadData(userID: userID);
      return res.data;
    }
    return null;
  }

  Future<V2TimCallback> updateRemarks(String userID, String remark) async {
    final res = await _friendshipServices.setFriendInfo(
        userID: userID, friendRemark: remark);

    if (res.code == 0) {
      _userProfile?.friendInfo!.friendRemark = remark;
      notifyListeners();
    }
    return res;
  }

  setMessageDisturb(String userID, bool isDisturb) async {
    final res = await _messageService.setC2CReceiveMessageOpt(
        userIDList: [userID],
        opt: isDisturb
            ? ReceiveMsgOptEnum.V2TIM_RECEIVE_NOT_NOTIFY_MESSAGE
            : ReceiveMsgOptEnum.V2TIM_RECEIVE_MESSAGE);
    if (res.code == 0) {
      _isDisturb = isDisturb;
    }
    notifyListeners();
  }
}
文件：/im-flutter-uikit/package_src/tim_ui_kit/lib/business_logic/view_models/tui_search_view_model.dart
// ignore_for_file: constant_identifier_names

import 'package:flutter/material.dart';
import 'package:fluttertoast/fluttertoast.dart';
import 'package:tencent_im_base/tencent_im_base.dart';
import 'package:tim_ui_kit/data_services/friendShip/friendship_services.dart';
import 'package:tim_ui_kit/data_services/services_locatar.dart';
import 'package:tim_ui_kit/data_services/message/message_services.dart';
import 'package:tim_ui_kit/data_services/conversation/conversation_services.dart';
import 'package:tim_ui_kit/data_services/group/group_services.dart';
import 'package:tim_ui_kit/tim_ui_kit.dart';

enum KeywordListMatchType {
  V2TIM_KEYWORD_LIST_MATCH_TYPE_OR,
  V2TIM_KEYWORD_LIST_MATCH_TYPE_AND
}

class TUISearchViewModel extends ChangeNotifier {
  final FriendshipServices _friendshipServices =
      serviceLocator<FriendshipServices>();
  final MessageService _messageService = serviceLocator<MessageService>();
  final ConversationService _conversationService =
      serviceLocator<ConversationService>();
  final GroupServices _groupServices = serviceLocator<GroupServices>();

  List<V2TimFriendInfoResult>? friendList = [];

  List<V2TimMessageSearchResultItem>? msgList = [];
  int msgPage = 0;
  int totalMsgCount = 0;

  int totalMsgInConversationCount = 0;
  List<V2TimMessage> currentMsgListForConversation = [];

  List<V2TimGroupInfo>? groupList = [];

  List<V2TimConversation?> conversationList = [];

  Future<List<V2TimConversation?>?> initConversationMsg() async {
    final conversationResult = await _conversationService.getConversationList(
        nextSeq: "0", count: 500);
    final conversationListData = conversationResult?.conversationList;
    conversationList = conversationListData ?? [];
    notifyListeners();
    return conversationListData;
  }

  void initSearch() {
    friendList = [];
    msgList = [];
    groupList = [];
    totalMsgCount = 0;
    notifyListeners();
  }

  void searchFriendByKey(String searchKey) async {
    final searchResult = await _friendshipServices.searchFriends(
        searchParam: V2TimFriendSearchParam(keywordList: [searchKey]));
    friendList = searchResult;
    notifyListeners();
  }

  void searchGroupByKey(String searchKey) async {
    final searchResult = await _groupServices.searchGroups(
        searchParam: V2TimGroupSearchParam(keywordList: [searchKey]));
    groupList = searchResult.data ?? [];
    notifyListeners();
  }

  void getMsgForConversation(
      String keyword, String conversationId, int page) async {
    void clearData() {
      currentMsgListForConversation = [];
      totalMsgInConversationCount = 0;
    }

    if (page == 0) {
      clearData();
    }
    if (keyword.isEmpty) {
      clearData();
      return;
    }
    final searchResult = await _messageService.searchLocalMessages(
        searchParam: V2TimMessageSearchParam(
      keywordList: [keyword],
      pageIndex: page,
      pageSize: 30,
      searchTimePeriod: 0,
      searchTimePosition: 0,
      conversationID: conversationId,
      type: KeywordListMatchType.V2TIM_KEYWORD_LIST_MATCH_TYPE_OR.index,
    ));
    if (searchResult.code == 0 && searchResult.data != null) {
      totalMsgInConversationCount = searchResult.data!.totalCount!;
      currentMsgListForConversation = [
        ...currentMsgListForConversation,
        ...(searchResult.data!.messageSearchResultItems?[0].messageList ?? [])
      ];
    }
    if (searchResult.code != 0) {
      Fluttertoast.showToast(
        msg: searchResult.desc,
        gravity: ToastGravity.BOTTOM,
        timeInSecForIosWeb: 1,
        textColor: Colors.white,
        backgroundColor: Colors.black,
      );
    }
    notifyListeners();
  }

  void searchMsgByKey(String searchKey, bool isFirst) async {
    if (isFirst == true) {
      msgPage = 0;
      msgList = [];
      totalMsgCount = 0;
    }
    final searchResult = await _messageService.searchLocalMessages(
        searchParam: V2TimMessageSearchParam(
      keywordList: [searchKey],
      pageIndex: msgPage,
      pageSize: 5,
      searchTimePeriod: 0,
      searchTimePosition: 0,
      type: KeywordListMatchType.V2TIM_KEYWORD_LIST_MATCH_TYPE_OR.index,
    ));
    if (searchResult.code == 0 && searchResult.data != null) {
      msgPage++;
      msgList = [...?msgList, ...?searchResult.data!.messageSearchResultItems];
      totalMsgCount = searchResult.data!.totalCount ?? 0;
    }
    if (searchResult.code != 0) {
      Fluttertoast.showToast(
        msg: searchResult.desc,
        gravity: ToastGravity.BOTTOM,
        timeInSecForIosWeb: 1,
        textColor: Colors.white,
        backgroundColor: Colors.black,
      );
    }
    notifyListeners();
  }

  void searchByKey(String? searchKey) async {
    if (searchKey == null || searchKey.isEmpty) {
      friendList = [];
      groupList = [];
      msgList = [];
      totalMsgCount = 0;
      notifyListeners();
    } else {
      searchFriendByKey(searchKey);
      searchMsgByKey(searchKey, true);
      searchGroupByKey(searchKey);
    }
  }
}
文件：/im-flutter-uikit/package_src/tim_ui_kit/lib/business_logic/view_models/tui_self_info_view_model.dart
import 'package:flutter/cupertino.dart';
import 'package:tencent_im_base/tencent_im_base.dart';

class TUISelfInfoViewModel extends ChangeNotifier {
  V2TimUserFullInfo? _loginInfo;

  V2TimUserFullInfo? get loginInfo {
    return _loginInfo;
  }

  setLoginInfo(V2TimUserFullInfo value) {
    _loginInfo = value;
    notifyListeners();
  }
}
文件：/im-flutter-uikit/package_src/tim_ui_kit/lib/business_logic/view_models/tui_theme_view_model.dart
import 'package:flutter/material.dart';
import 'package:tim_ui_kit/ui/utils/color.dart';
import 'package:tim_ui_kit/ui/utils/tui_theme.dart';

class TUIThemeViewModel extends ChangeNotifier {
  TUITheme _theme = CommonColor.defaultTheme;

  TUITheme get theme {
    return _theme;
  }

  set theme(TUITheme theme) {
    _theme = theme;
    notifyListeners();
  }
}
文件：/im-flutter-uikit/package_src/tim_ui_kit/lib/data_services/services_locatar.dart
import 'package:get_it/get_it.dart';
import 'package:tim_ui_kit/business_logic/view_models/tui_chat_view_model.dart';
import 'package:tim_ui_kit/business_logic/view_models/tui_contact_view_model.dart';
import 'package:tim_ui_kit/business_logic/view_models/tui_conversation_view_model.dart';
import 'package:tim_ui_kit/business_logic/view_models/tui_new_contact_view_model.dart';
import 'package:tim_ui_kit/business_logic/view_models/tui_profile_view_model.dart';
import 'package:tim_ui_kit/business_logic/view_models/tui_theme_view_model.dart';
import 'package:tim_ui_kit/data_services/conversation/conversation_services.dart';
import 'package:tim_ui_kit/data_services/conversation/conversation_services_implements.dart';
import 'package:tim_ui_kit/data_services/core/core_services_implements.dart';
import 'package:tim_ui_kit/data_services/friendShip/friendship_services.dart';
import 'package:tim_ui_kit/data_services/friendShip/friendship_services_implements.dart';
import 'package:tim_ui_kit/data_services/group/group_services.dart';
import 'package:tim_ui_kit/data_services/group/group_services_implement.dart';
import 'package:tim_ui_kit/data_services/message/message_service_implement.dart';
import 'package:tim_ui_kit/data_services/message/message_services.dart';
import 'package:tim_ui_kit/business_logic/view_models/tui_search_view_model.dart';
import 'package:tim_ui_kit/business_logic/view_models/tui_group_profile_view_model.dart';
import 'package:tim_ui_kit/business_logic/view_models/tui_self_info_view_model.dart';

final serviceLocator = GetIt.instance;
bool boolIsInitailized = false;

void setupServiceLocator() {
  if (!boolIsInitailized) {
    // services

    serviceLocator.registerSingleton<CoreServicesImpl>(CoreServicesImpl());
    serviceLocator
        .registerSingleton<TUISelfInfoViewModel>(TUISelfInfoViewModel());
    serviceLocator
        .registerSingleton<ConversationService>(ConversationServicesImpl());
    serviceLocator.registerSingleton<MessageService>(MessageServiceImpl());
    serviceLocator
        .registerSingleton<FriendshipServices>(FriendshipServicesImpl());
    serviceLocator.registerSingleton<GroupServices>(GroupServicesImpl());

    // view models
    serviceLocator.registerSingleton<TUIChatViewModel>(TUIChatViewModel());
    serviceLocator.registerSingleton<TUIConversationViewModel>(
        TUIConversationViewModel());
    serviceLocator
        .registerSingleton<TUIProfileViewModel>(TUIProfileViewModel());
    serviceLocator
        .registerSingleton<TUIContactViewModel>(TUIContactViewModel());
    serviceLocator
        .registerSingleton<TUINewContactViewModel>(TUINewContactViewModel());
    serviceLocator.registerSingleton<TUIThemeViewModel>(TUIThemeViewModel());
    serviceLocator.registerSingleton<TUISearchViewModel>(TUISearchViewModel());
    serviceLocator.registerSingleton<TUIGroupProfileViewModel>(
        TUIGroupProfileViewModel());
    boolIsInitailized = true;
  }
}
文件：/im-flutter-uikit/package_src/tim_ui_kit/lib/data_services/conversation/conversation_services.dart
import 'package:tencent_im_base/tencent_im_base.dart';

abstract class ConversationService {
  Future<V2TimConversationResult?> getConversationList({
    required String nextSeq,
    required int count,
  });

  Future<V2TimConversation?> getConversation({
    required String conversationID,
  });

  Future<V2TimCallback> pinConversation({
    required String conversationID,
    required bool isPinned,
  });

  Future<V2TimCallback> deleteConversation({
    required String conversationID,
  });

  Future<void> setConversationListener({
    required V2TimConversationListener listener,
  });

  Future<V2TimCallback> setConversationDraft(
      {required String conversationID, String? draftText});

  Future<void> removeConversationListener(
      {V2TimConversationListener? listener});
}
文件：/im-flutter-uikit/package_src/tim_ui_kit/lib/data_services/conversation/conversation_services_implements.dart
import 'package:tim_ui_kit/data_services/conversation/conversation_services.dart';
import 'package:tim_ui_kit/data_services/core/core_services_implements.dart';
import 'package:tim_ui_kit/data_services/services_locatar.dart';
import 'package:tencent_im_base/tencent_im_base.dart';

class ConversationServicesImpl extends ConversationService {
  final CoreServicesImpl _coreService = serviceLocator<CoreServicesImpl>();

  @override
  Future<V2TimConversationResult?> getConversationList({
    required String nextSeq,
    required int count,
  }) async {
    final result = await TencentImSDKPlugin.v2TIMManager
        .getConversationManager()
        .getConversationList(nextSeq: nextSeq, count: count);
    if (result.code == 0) {
      return result.data;
    } else {
      _coreService.callOnCallback(TIMCallback(
          type: TIMCallbackType.API_ERROR,
          errorMsg: result.desc,
          errorCode: result.code));
      return null;
    }
  }

  @override
  Future<V2TimCallback> pinConversation({
    required String conversationID,
    required bool isPinned,
  }) async {
    final result = await TencentImSDKPlugin.v2TIMManager
        .getConversationManager()
        .pinConversation(conversationID: conversationID, isPinned: isPinned);
    if (result.code != 0) {
      _coreService.callOnCallback(TIMCallback(
          type: TIMCallbackType.API_ERROR,
          errorMsg: result.desc,
          errorCode: result.code));
    }
    return result;
  }

  @override
  Future<V2TimCallback> deleteConversation({
    required String conversationID,
  }) async {
    final result = await TencentImSDKPlugin.v2TIMManager
        .getConversationManager()
        .deleteConversation(conversationID: conversationID);
    if (result.code != 0) {
      _coreService.callOnCallback(TIMCallback(
          type: TIMCallbackType.API_ERROR,
          errorMsg: result.desc,
          errorCode: result.code));
    }
    return result;
  }

  @override
  Future<void> setConversationListener({
    required V2TimConversationListener listener,
  }) {
    return TencentImSDKPlugin.v2TIMManager
        .getConversationManager()
        .addConversationListener(listener: listener);
  }

  @override
  Future<V2TimConversation?> getConversation({
    required String conversationID,
  }) async {
    final res = await TencentImSDKPlugin.v2TIMManager
        .getConversationManager()
        .getConversation(conversationID: conversationID);
    if (res.code == 0) {
      return res.data;
    } else {
      _coreService.callOnCallback(TIMCallback(
          type: TIMCallbackType.API_ERROR,
          errorMsg: res.desc,
          errorCode: res.code));
    }
    return null;
  }

  @override
  Future<V2TimCallback> setConversationDraft(
      {required String conversationID, String? draftText}) async {
    final result = await TencentImSDKPlugin.v2TIMManager
        .getConversationManager()
        .setConversationDraft(
            conversationID: conversationID, draftText: draftText);
    if (result.code != 0) {
      _coreService.callOnCallback(TIMCallback(
          type: TIMCallbackType.API_ERROR,
          errorMsg: result.desc,
          errorCode: result.code));
    }
    return result;
  }

  @override
  Future<void> removeConversationListener(
      {V2TimConversationListener? listener}) {
    return TencentImSDKPlugin.v2TIMManager
        .getConversationManager()
        .removeConversationListener(listener: listener);
  }
}
文件：/im-flutter-uikit/package_src/tim_ui_kit/lib/data_services/core/core_services.dart
import 'package:tencent_im_base/tencent_im_base.dart';
import 'package:tim_ui_kit/ui/utils/tui_theme.dart';

enum AppStatus { foreground, background }

abstract class CoreServices {
  Future<bool?> init({
    required int sdkAppID,
    required LogLevelEnum loglevel,
    required V2TimSDKListener listener,

    /// only support "en" and "zh" temporally
    LanguageEnum? language,
  });

  Future login({
    required String userID,
    required String userSig,
  });

  Future logout();

  Future unInit();

  Future<V2TimValueCallback<List<V2TimUserFullInfo>>> getUsersInfo({
    required List<String> userIDList,
  });

  // 注意：uikit的离线推送只支持tpns
  // Note: uikit's offline push only supports tpns
  //
  Future<V2TimCallback> setOfflinePushConfig({
    required bool isTPNSToken,
    int businessID,
    required String token,
  });

  Future<V2TimCallback> setSelfInfo({
    required V2TimUserFullInfo userFullInfo,
  });

  Future<V2TimCallback> setOfflinePushStatus({
    required AppStatus status,
    int? totalCount,
  });

  Future<void> setDataFromNative({required String userId});

  setTheme({required TUITheme theme});

  setDarkTheme();

  setLightTheme();
}
文件：/im-flutter-uikit/package_src/tim_ui_kit/lib/data_services/core/core_services_implements.dart
// ignore_for_file: avoid_print

import 'package:flutter/cupertino.dart';
import 'package:tencent_im_base/tencent_im_base.dart';
import 'package:tim_ui_kit/business_logic/view_models/tui_self_info_view_model.dart';
import 'package:tim_ui_kit/business_logic/view_models/tui_theme_view_model.dart';
import 'package:tim_ui_kit/data_services/core/core_services.dart';
import 'package:tim_ui_kit/data_services/services_locatar.dart';
import 'package:tim_ui_kit/ui/utils/color.dart';
import 'package:tim_ui_kit/ui/utils/tui_theme.dart';

typedef EmptyAvatarBuilder = Widget Function(BuildContext context);

class LoginInfo {
  final String userID;
  final String userSig;
  final int sdkAppID;
  final V2TimUserFullInfo? loginUser;

  LoginInfo(
      {this.sdkAppID = 0, this.userSig = "", this.userID = "", this.loginUser});
}

class CoreServicesImpl with CoreServices {
  V2TimUserFullInfo? _loginInfo;
  late int _sdkAppID;
  late String _userID;
  late String _userSig;
  ValueChanged<TIMCallback>? onCallback;

  V2TimUserFullInfo? get loginUserInfo {
    return _loginInfo;
  }

  LoginInfo get loginInfo {
    return LoginInfo(
        sdkAppID: _sdkAppID,
        userID: _userID,
        userSig: _userSig,
        loginUser: _loginInfo);
  }

  EmptyAvatarBuilder? _emptyAvatarBuilder;

  EmptyAvatarBuilder? get emptyAvatarBuilder {
    return _emptyAvatarBuilder;
  }

  setEmptyAvatarBuilder(EmptyAvatarBuilder builder) {
    _emptyAvatarBuilder = builder;
  }

  @override
  Future<bool?> init({
    /// Callback from TUIKit invoke, includes IM SDK API error, notify information, Flutter error.
    ValueChanged<TIMCallback>? onTUIKitCallbackListener,
    required int sdkAppID,
    required LogLevelEnum loglevel,
    required V2TimSDKListener listener,
    LanguageEnum? language,
  }) async {
    if (language != null) {
      Future.delayed(const Duration(milliseconds: 1), () {
        I18nUtils(null, language);
      });
    }
    if (onTUIKitCallbackListener != null) {
      onCallback = onTUIKitCallbackListener;
    }
    _sdkAppID = sdkAppID;
    final result = await TencentImSDKPlugin.v2TIMManager.initSDK(
        sdkAppID: sdkAppID,
        loglevel: loglevel,
        listener: V2TimSDKListener(
            onConnectFailed: listener.onConnectFailed,
            onConnectSuccess: listener.onConnectSuccess,
            onConnecting: listener.onConnecting,
            onKickedOffline: listener.onKickedOffline,
            onSelfInfoUpdated: (V2TimUserFullInfo info) {
              listener.onSelfInfoUpdated(info);
              serviceLocator<TUISelfInfoViewModel>().setLoginInfo(info);
              _loginInfo = info;
            },
            onUserSigExpired: listener.onUserSigExpired));

    // TencentImSDKPlugin.v2TIMManager.callExperimentalAPI(
    //     api: "internal_operation_set_ui_platform",
    //     param: {"request_set_ui_platform_param": "flutter_uikit"});
    return result.data;
  }

  callOnCallback(TIMCallback callbackValue) {
    if (onCallback != null) {
      Future.delayed(const Duration(milliseconds: 500), () {
        onCallback!(callbackValue);
      });
    } else {
      print("TUIKit Callback: ${callbackValue.type}");
    }
  }

  @override
  Future<V2TimCallback> login({
    required String userID,
    required String userSig,
  }) async {
    _userID = userID;
    _userSig = userSig;
    V2TimCallback result = await TencentImSDKPlugin.v2TIMManager
        .login(userID: userID, userSig: userSig);
    if (result.code == 0) {
      getUsersInfo(userIDList: [userID]).then((res) => {
            if (res.code == 0)
              {
                _loginInfo = res.data![0],
                serviceLocator<TUISelfInfoViewModel>().setLoginInfo(_loginInfo!)
              }
          });
    } else {
      callOnCallback(TIMCallback(
          type: TIMCallbackType.API_ERROR,
          errorCode: result.code,
          errorMsg: result.desc));
    }
    return result;
  }

  @override
  Future<void> setDataFromNative({
    required String userId,
  }) async {
    getUsersInfo(userIDList: [userId]).then((res) => {
          if (res.code == 0)
            {
              _loginInfo = res.data![0],
              serviceLocator<TUISelfInfoViewModel>().setLoginInfo(_loginInfo!)
            }
          else
            {
              callOnCallback(TIMCallback(
                  type: TIMCallbackType.API_ERROR,
                  errorCode: res.code,
                  errorMsg: res.desc))
            }
        });
  }

  @override
  Future<V2TimCallback> logout() async {
    final result = await TencentImSDKPlugin.v2TIMManager.logout();
    return result;
  }

  @override
  Future unInit() async {
    final result = await TencentImSDKPlugin.v2TIMManager.unInitSDK();
    return result;
  }

  @override
  Future<V2TimValueCallback<List<V2TimUserFullInfo>>> getUsersInfo({
    required List<String> userIDList,
  }) {
    return TencentImSDKPlugin.v2TIMManager.getUsersInfo(userIDList: userIDList);
  }

  @override
  Future<V2TimCallback> setOfflinePushConfig({
    // ignore: todo
    // TODO
    required String token,
    required bool isTPNSToken,
    int? businessID,
  }) {
    return TencentImSDKPlugin.v2TIMManager
        .getOfflinePushManager()
        .setOfflinePushConfig(
          businessID: businessID?.toDouble() ?? 0,
          token: token,
          isTPNSToken: isTPNSToken,
        );
  }

  @override
  Future<V2TimCallback> setSelfInfo({
    required V2TimUserFullInfo userFullInfo,
  }) {
    return TencentImSDKPlugin.v2TIMManager
        .setSelfInfo(userFullInfo: userFullInfo);
  }

  @override
  setTheme({required TUITheme theme}) {
    // 合并传入Theme和默认Theme
    final TUIThemeViewModel _theme = serviceLocator<TUIThemeViewModel>();
    Map<String, Color?> jsonMap = Map.from(CommonColor.defaultTheme.toJson());
    Map<String, Color?> jsonInputThemeMap = Map.from(theme.toJson());

    jsonInputThemeMap.forEach((key, value) {
      if (value != null) {
        jsonMap.update(key, (v) => value);
      }
    });
    _theme.theme = TUITheme.fromJson(jsonMap);
  }

  @override
  setDarkTheme() {
    final TUIThemeViewModel _theme = serviceLocator<TUIThemeViewModel>();
    _theme.theme = TUITheme.dark; //Dark
  }

  @override
  setLightTheme() {
    final TUIThemeViewModel _theme = serviceLocator<TUIThemeViewModel>();
    _theme.theme = TUITheme.light; //Light
  }

  @override
  Future<V2TimCallback> setOfflinePushStatus(
      {required AppStatus status, int? totalCount}) {
    if (status == AppStatus.foreground) {
      return TencentImSDKPlugin.v2TIMManager
          .getOfflinePushManager()
          .doForeground();
    } else {
      return TencentImSDKPlugin.v2TIMManager
          .getOfflinePushManager()
          .doBackground(unreadCount: totalCount ?? 0);
    }
  }
}
文件：/im-flutter-uikit/package_src/tim_ui_kit/lib/data_services/friendShip/friendship_services.dart
import 'package:tencent_im_base/tencent_im_base.dart';

abstract class FriendshipServices {
  Future<List<V2TimFriendInfoResult>?> getFriendsInfo({
    required List<String> userIDList,
  });

  Future<List<V2TimFriendOperationResult>?> addToBlackList({
    required List<String> userIDList,
  });

  Future<V2TimValueCallback<V2TimFriendOperationResult>> addFriend({
    required String userID,
    required FriendTypeEnum addType,
    String? remark,
    String? friendGroup,
    String? addSource,
    String? addWording,
  });

  Future<List<V2TimFriendOperationResult>?> deleteFromBlackList({
    required List<String> userIDList,
  });

  Future<List<V2TimFriendOperationResult>?> deleteFromFriendList({
    required List<String> userIDList,
    required FriendTypeEnum deleteType,
  });

  Future<List<V2TimFriendInfo>?> getFriendList();

  Future<List<V2TimFriendInfoResult>?> searchFriends({
    required V2TimFriendSearchParam searchParam,
  });

  Future<List<V2TimFriendInfo>?> getBlackList();

  Future<List<V2TimFriendCheckResult>?> checkFriend({
    required List<String> userIDList,
    required FriendTypeEnum checkType,
  });

  Future<void> setFriendshipListener({
    required V2TimFriendshipListener listener,
  });
  Future<void> removeFriendListener({
    V2TimFriendshipListener? listener,
  });

  Future<V2TimFriendApplicationResult?> getFriendApplicationList();

  Future<V2TimFriendOperationResult?> acceptFriendApplication(
      {required FriendResponseTypeEnum responseType,
      required FriendApplicationTypeEnum type,
      required String userID});

  Future<V2TimFriendOperationResult?> refuseFriendApplication(
      {required FriendApplicationTypeEnum type, required String userID});

  Future<V2TimCallback> setFriendInfo({
    required String userID,
    String? friendRemark,
    Map<String, String>? friendCustomInfo,
  });
}
文件：/im-flutter-uikit/package_src/tim_ui_kit/lib/data_services/friendShip/friendship_services_implements.dart
import 'package:tim_ui_kit/data_services/core/core_services_implements.dart';
import 'package:tim_ui_kit/data_services/friendShip/friendship_services.dart';
import 'package:tim_ui_kit/data_services/services_locatar.dart';
import 'package:tencent_im_base/tencent_im_base.dart';

class FriendshipServicesImpl with FriendshipServices {
  final CoreServicesImpl _coreService = serviceLocator<CoreServicesImpl>();

  @override
  Future<List<V2TimFriendInfoResult>?> getFriendsInfo({
    required List<String> userIDList,
  }) async {
    final res = await TencentImSDKPlugin.v2TIMManager
        .getFriendshipManager()
        .getFriendsInfo(userIDList: userIDList);
    if (res.code == 0) {
      return res.data;
    } else {
      _coreService.callOnCallback(TIMCallback(
          type: TIMCallbackType.API_ERROR,
          errorMsg: res.desc,
          errorCode: res.code));
      return null;
    }
  }

  @override
  Future<List<V2TimFriendOperationResult>?> addToBlackList({
    required List<String> userIDList,
  }) async {
    final res = await TencentImSDKPlugin.v2TIMManager
        .getFriendshipManager()
        .addToBlackList(userIDList: userIDList);
    if (res.code == 0) {
      return res.data;
    } else {
      _coreService.callOnCallback(TIMCallback(
          type: TIMCallbackType.API_ERROR,
          errorMsg: res.desc,
          errorCode: res.code));
      return null;
    }
  }

  @override
  Future<V2TimValueCallback<V2TimFriendOperationResult>> addFriend({
    required String userID,
    required FriendTypeEnum addType,
    String? remark,
    String? friendGroup,
    String? addSource,
    String? addWording,
  }) async {
    final result =
        await TencentImSDKPlugin.v2TIMManager.getFriendshipManager().addFriend(
              userID: userID,
              addType: addType,
              remark: remark,
              addWording: addWording,
              friendGroup: friendGroup,
              addSource: addSource,
            );
    if (result.code != 0) {
      _coreService.callOnCallback(TIMCallback(
          type: TIMCallbackType.API_ERROR,
          errorMsg: result.desc,
          errorCode: result.code));
    }
    return result;
  }

  @override
  Future<List<V2TimFriendOperationResult>?> deleteFromBlackList({
    required List<String> userIDList,
  }) async {
    final res = await TencentImSDKPlugin.v2TIMManager
        .getFriendshipManager()
        .deleteFromBlackList(userIDList: userIDList);
    if (res.code == 0) {
      return res.data;
    } else {
      _coreService.callOnCallback(TIMCallback(
          type: TIMCallbackType.API_ERROR,
          errorMsg: res.desc,
          errorCode: res.code));
      return null;
    }
  }

  @override
  Future<List<V2TimFriendOperationResult>?> deleteFromFriendList({
    required List<String> userIDList,
    required FriendTypeEnum deleteType,
  }) async {
    final res = await TencentImSDKPlugin.v2TIMManager
        .getFriendshipManager()
        .deleteFromFriendList(userIDList: userIDList, deleteType: deleteType);
    if (res.code == 0) {
      return res.data;
    } else {
      _coreService.callOnCallback(TIMCallback(
          type: TIMCallbackType.API_ERROR,
          errorMsg: res.desc,
          errorCode: res.code));
      return null;
    }
  }

  @override
  Future<List<V2TimFriendInfo>?> getFriendList() async {
    final res = await TencentImSDKPlugin.v2TIMManager
        .getFriendshipManager()
        .getFriendList();
    if (res.code == 0) {
      return res.data;
    } else {
      _coreService.callOnCallback(TIMCallback(
          type: TIMCallbackType.API_ERROR,
          errorMsg: res.desc,
          errorCode: res.code));
      return null;
    }
  }

  @override
  Future<List<V2TimFriendInfo>?> getBlackList() async {
    final res = await TencentImSDKPlugin.v2TIMManager
        .getFriendshipManager()
        .getBlackList();
    if (res.code == 0) {
      return res.data;
    } else {
      _coreService.callOnCallback(TIMCallback(
          type: TIMCallbackType.API_ERROR,
          errorMsg: res.desc,
          errorCode: res.code));
      return null;
    }
  }

  @override
  Future<List<V2TimFriendCheckResult>?> checkFriend({
    required List<String> userIDList,
    required FriendTypeEnum checkType,
  }) async {
    final res = await TencentImSDKPlugin.v2TIMManager
        .getFriendshipManager()
        .checkFriend(userIDList: userIDList, checkType: checkType);
    if (res.code == 0) {
      return res.data;
    } else {
      _coreService.callOnCallback(TIMCallback(
          type: TIMCallbackType.API_ERROR,
          errorMsg: res.desc,
          errorCode: res.code));
      return null;
    }
  }

  @override
  Future<void> setFriendshipListener({
    required V2TimFriendshipListener listener,
  }) {
    return TencentImSDKPlugin.v2TIMManager
        .getFriendshipManager()
        .addFriendListener(listener: listener);
  }

  @override
  Future<void> removeFriendListener({
    V2TimFriendshipListener? listener,
  }) {
    return TencentImSDKPlugin.v2TIMManager
        .getFriendshipManager()
        .removeFriendListener(listener: listener);
  }

  @override
  Future<V2TimFriendApplicationResult?> getFriendApplicationList() async {
    final res = await TencentImSDKPlugin.v2TIMManager
        .getFriendshipManager()
        .getFriendApplicationList();
    if (res.code == 0) {
      return res.data;
    } else {
      _coreService.callOnCallback(TIMCallback(
          type: TIMCallbackType.API_ERROR,
          errorMsg: res.desc,
          errorCode: res.code));
      return null;
    }
  }

  @override
  Future<V2TimFriendOperationResult?> acceptFriendApplication({
    required FriendResponseTypeEnum responseType,
    required FriendApplicationTypeEnum type,
    required String userID,
  }) async {
    final res = await TencentImSDKPlugin.v2TIMManager
        .getFriendshipManager()
        .acceptFriendApplication(
          responseType: responseType,
          type: type,
          userID: userID,
        );
    if (res.code == 0) {
      return res.data;
    } else {
      _coreService.callOnCallback(TIMCallback(
          type: TIMCallbackType.API_ERROR,
          errorMsg: res.desc,
          errorCode: res.code));
      return null;
    }
  }

  @override
  Future<V2TimFriendOperationResult?> refuseFriendApplication(
      {required FriendApplicationTypeEnum type, required String userID}) async {
    final res = await TencentImSDKPlugin.v2TIMManager
        .getFriendshipManager()
        .refuseFriendApplication(type: type, userID: userID);
    if (res.code == 0) {
      return res.data;
    } else {
      _coreService.callOnCallback(TIMCallback(
          type: TIMCallbackType.API_ERROR,
          errorMsg: res.desc,
          errorCode: res.code));
      return null;
    }
  }

  @override
  Future<V2TimCallback> setFriendInfo({
    required String userID,
    String? friendRemark,
    Map<String, String>? friendCustomInfo,
  }) async {
    final res = await TencentImSDKPlugin.v2TIMManager
        .getFriendshipManager()
        .setFriendInfo(
            friendRemark: friendRemark,
            friendCustomInfo: friendCustomInfo,
            userID: userID);
    if (res.code != 0) {
      _coreService.callOnCallback(TIMCallback(
          type: TIMCallbackType.API_ERROR,
          errorMsg: res.desc,
          errorCode: res.code));
    }
    return res;
  }

  @override
  Future<List<V2TimFriendInfoResult>?> searchFriends({
    required V2TimFriendSearchParam searchParam,
  }) async {
    final res = await TencentImSDKPlugin.v2TIMManager
        .getFriendshipManager()
        .searchFriends(searchParam: searchParam);
    if (res.code == 0) {
      return res.data;
    } else {
      _coreService.callOnCallback(TIMCallback(
          type: TIMCallbackType.API_ERROR,
          errorMsg: res.desc,
          errorCode: res.code));
      return null;
    }
  }
}
文件：/im-flutter-uikit/package_src/tim_ui_kit/lib/data_services/group/group_services.dart
import 'package:tencent_im_base/tencent_im_base.dart';

abstract class GroupServices {
  Future<List<V2TimGroupInfo>?> getJoinedGroupList();

  Future<List<V2TimGroupInfoResult>?> getGroupsInfo({
    required List<String> groupIDList,
  });

  Future<V2TimGroupMemberInfoResult?> getGroupMemberList({
    required String groupID,
    required GroupMemberFilterTypeEnum filter,
    required String nextSeq,
    int count = 15,
    int offset = 0,
  });

  Future<V2TimValueCallback<List<V2TimGroupMemberFullInfo>>>
      getGroupMembersInfo(
          {required String groupID, required List<String> memberList});

  Future<V2TimCallback> setGroupInfo({
    required V2TimGroupInfo info,
  });

  Future<V2TimCallback> setGroupMemberRole({
    required String groupID,
    required String userID,
    required GroupMemberRoleTypeEnum role,
  });

  getGroupMembersInfoThrottle(
      {required String groupID,
      required List<String> memberList,
      Function? callBack});

  Future<V2TimCallback> muteGroupMember({
    required String groupID,
    required String userID,
    required int seconds,
  });

  Future<V2TimCallback> setGroupMemberInfo({
    required String groupID,
    required String userID,
    String? nameCard,
    Map<String, String>? customInfo,
  });

  Future<V2TimCallback> kickGroupMember({
    required String groupID,
    required List<String> memberList,
    String? reason,
  });

  Future<V2TimValueCallback<List<V2TimGroupMemberOperationResult>>>
      inviteUserToGroup({
    required String groupID,
    required List<String> userList,
  });

  Future<V2TimValueCallback<List<V2TimGroupInfo>>> searchGroups({
    required V2TimGroupSearchParam searchParam,
  });

  Future<V2TimValueCallback<V2GroupMemberInfoSearchResult>> searchGroupMembers({
    required V2TimGroupMemberSearchParam searchParam,
  });

  Future<V2TimCallback> joinGroup({
    required String groupID,
    required String message,
  });

  Future<void> addGroupListener({
    required V2TimGroupListener listener,
  });

  Future<void> removeGroupListener({
    V2TimGroupListener? listener,
  });

  Future<V2TimValueCallback<V2TimGroupApplicationResult>>
      getGroupApplicationList();

  Future<V2TimCallback> acceptGroupApplication({
    required String groupID,
    required String fromUser,
    required String toUser,
    required int addTime,
    required int type,
    String? reason,
  });

  Future<V2TimCallback> refuseGroupApplication(
      {String? reason,
      required int addTime,
      required String groupID,
      required String fromUser,
      required String toUser,
      required GroupApplicationTypeEnum type});
}
文件：/im-flutter-uikit/package_src/tim_ui_kit/lib/data_services/group/group_services_implement.dart
import 'package:tim_ui_kit/data_services/core/core_services_implements.dart';
import 'package:tim_ui_kit/data_services/group/group_services.dart';
import 'package:tim_ui_kit/data_services/services_locatar.dart';
import 'package:tim_ui_kit/ui/utils/optimize_utils.dart';
import 'package:tencent_im_base/tencent_im_base.dart';

class GroupServicesImpl extends GroupServices {
  static List<Function?> groupInfoCallBackList = [];
  final CoreServicesImpl _coreService = serviceLocator<CoreServicesImpl>();
  final throttleGetGroupInfo = OptimizeUtils.throttle((val) async {
    String groupID = val["groupID"];
    List<String> memberList = val["memberList"];
    final res = await TencentImSDKPlugin.v2TIMManager
        .getGroupManager()
        .getGroupMembersInfo(groupID: groupID, memberList: memberList);
    emitGroupCbList(res.data ?? []);
    clearGroupCbList();
  }, 1000);

  static emitGroupCbList(List<V2TimGroupMemberFullInfo?> list) {
    for (var cb in groupInfoCallBackList) {
      cb!(list);
    }
  }

  static clearGroupCbList() {
    groupInfoCallBackList = [];
  }

  @override
  Future<List<V2TimGroupInfo>?> getJoinedGroupList() async {
    final res = await TencentImSDKPlugin.v2TIMManager
        .getGroupManager()
        .getJoinedGroupList();
    if (res.code == 0) {
      return res.data;
    } else {
      _coreService.callOnCallback(TIMCallback(
          type: TIMCallbackType.API_ERROR,
          errorMsg: res.desc,
          errorCode: res.code));
      return null;
    }
  }

  @override
  Future<List<V2TimGroupInfoResult>?> getGroupsInfo({
    required List<String> groupIDList,
  }) async {
    final res = await TencentImSDKPlugin.v2TIMManager
        .getGroupManager()
        .getGroupsInfo(groupIDList: groupIDList);
    if (res.code == 0) {
      return res.data;
    } else {
      _coreService.callOnCallback(TIMCallback(
          type: TIMCallbackType.API_ERROR,
          errorMsg: res.desc,
          errorCode: res.code));
      return null;
    }
  }

  @override
  void getGroupMembersInfoThrottle(
      {required String groupID,
      required List<String> memberList,
      Function? callBack}) async {
    if (callBack != null) {
      groupInfoCallBackList.add(callBack);
      throttleGetGroupInfo({"groupID": groupID, "memberList": memberList});
    }
  }

  @override
  Future<V2TimValueCallback<List<V2TimGroupMemberFullInfo>>>
      getGroupMembersInfo(
          {required String groupID, required List<String> memberList}) async {
    final res = await TencentImSDKPlugin.v2TIMManager
        .getGroupManager()
        .getGroupMembersInfo(groupID: groupID, memberList: memberList);
    if (res.code != 0) {
      _coreService.callOnCallback(TIMCallback(
          type: TIMCallbackType.API_ERROR,
          errorMsg: res.desc,
          errorCode: res.code));
    }
    return res;
  }

  @override
  Future<V2TimGroupMemberInfoResult?> getGroupMemberList({
    required String groupID,
    required GroupMemberFilterTypeEnum filter,
    required String nextSeq,
    int count = 15,
    int offset = 0,
  }) async {
    final res = await TencentImSDKPlugin.v2TIMManager
        .getGroupManager()
        .getGroupMemberList(
            groupID: groupID,
            filter: filter,
            nextSeq: nextSeq,
            count: count,
            offset: offset);
    if (res.code == 0) {
      return res.data;
    } else {
      _coreService.callOnCallback(TIMCallback(
          type: TIMCallbackType.API_ERROR,
          errorMsg: res.desc,
          errorCode: res.code));
      return null;
    }
  }

  @override
  Future<V2TimCallback> setGroupInfo({
    required V2TimGroupInfo info,
  }) async {
    final result = await TencentImSDKPlugin.v2TIMManager
        .getGroupManager()
        .setGroupInfo(info: info);
    if (result.code != 0) {
      _coreService.callOnCallback(TIMCallback(
          type: TIMCallbackType.API_ERROR,
          errorMsg: result.desc,
          errorCode: result.code));
    }
    return result;
  }

  @override
  Future<V2TimCallback> setGroupMemberRole({
    required String groupID,
    required String userID,
    required GroupMemberRoleTypeEnum role,
  }) async {
    final result = await TencentImSDKPlugin.v2TIMManager
        .getGroupManager()
        .setGroupMemberRole(groupID: groupID, userID: userID, role: role);
    if (result.code != 0) {
      _coreService.callOnCallback(TIMCallback(
          type: TIMCallbackType.API_ERROR,
          errorMsg: result.desc,
          errorCode: result.code));
    }
    return result;
  }

  @override
  Future<V2TimCallback> muteGroupMember({
    required String groupID,
    required String userID,
    required int seconds,
  }) async {
    final result = await TencentImSDKPlugin.v2TIMManager
        .getGroupManager()
        .muteGroupMember(groupID: groupID, userID: userID, seconds: seconds);
    if (result.code != 0) {
      _coreService.callOnCallback(TIMCallback(
          type: TIMCallbackType.API_ERROR,
          errorMsg: result.desc,
          errorCode: result.code));
    }
    return result;
  }

  @override
  Future<V2TimCallback> setGroupMemberInfo({
    required String groupID,
    required String userID,
    String? nameCard,
    Map<String, String>? customInfo,
  }) async {
    final result = await TencentImSDKPlugin.v2TIMManager
        .getGroupManager()
        .setGroupMemberInfo(
            groupID: groupID,
            userID: userID,
            nameCard: nameCard,
            customInfo: customInfo);
    if (result.code != 0) {
      _coreService.callOnCallback(TIMCallback(
          type: TIMCallbackType.API_ERROR,
          errorMsg: result.desc,
          errorCode: result.code));
    }
    return result;
  }

  @override
  Future<V2TimCallback> kickGroupMember({
    required String groupID,
    required List<String> memberList,
    String? reason,
  }) async {
    final result = await TencentImSDKPlugin.v2TIMManager
        .getGroupManager()
        .kickGroupMember(
            groupID: groupID, memberList: memberList, reason: reason);
    if (result.code != 0) {
      _coreService.callOnCallback(TIMCallback(
          type: TIMCallbackType.API_ERROR,
          errorMsg: result.desc,
          errorCode: result.code));
    }
    return result;
  }

  @override
  Future<V2TimValueCallback<List<V2TimGroupMemberOperationResult>>>
      inviteUserToGroup({
    required String groupID,
    required List<String> userList,
  }) async {
    final result = await TencentImSDKPlugin.v2TIMManager
        .getGroupManager()
        .inviteUserToGroup(groupID: groupID, userList: userList);
    if (result.code != 0) {
      _coreService.callOnCallback(TIMCallback(
          type: TIMCallbackType.API_ERROR,
          errorMsg: result.desc,
          errorCode: result.code));
    }
    return result;
  }

  @override
  Future<V2TimValueCallback<List<V2TimGroupInfo>>> searchGroups({
    required V2TimGroupSearchParam searchParam,
  }) async {
    final result = await TencentImSDKPlugin.v2TIMManager
        .getGroupManager()
        .searchGroups(searchParam: searchParam);
    if (result.code != 0) {
      _coreService.callOnCallback(TIMCallback(
          type: TIMCallbackType.API_ERROR,
          errorMsg: result.desc,
          errorCode: result.code));
    }
    return result;
  }

  @override
  Future<V2TimCallback> joinGroup({
    required String groupID,
    required String message,
  }) async {
    final result = await TencentImSDKPlugin.v2TIMManager
        .joinGroup(groupID: groupID, message: message);
    if (result.code != 0) {
      _coreService.callOnCallback(TIMCallback(
          type: TIMCallbackType.API_ERROR,
          errorMsg: result.desc,
          errorCode: result.code));
    }
    return result;
  }

  @override
  Future<V2TimValueCallback<V2GroupMemberInfoSearchResult>> searchGroupMembers({
    required V2TimGroupMemberSearchParam searchParam,
  }) async {
    final result = await TencentImSDKPlugin.v2TIMManager
        .getGroupManager()
        .searchGroupMembers(param: searchParam);
    if (result.code != 0) {
      _coreService.callOnCallback(TIMCallback(
          type: TIMCallbackType.API_ERROR,
          errorMsg: result.desc,
          errorCode: result.code));
    }
    return result;
  }

  @override
  Future<void> addGroupListener({
    required V2TimGroupListener listener,
  }) async {
    final result = await TencentImSDKPlugin.v2TIMManager
        .addGroupListener(listener: listener);
    return result;
  }

  @override
  Future<void> removeGroupListener({
    V2TimGroupListener? listener,
  }) async {
    final result = await TencentImSDKPlugin.v2TIMManager
        .removeGroupListener(listener: listener);
    return result;
  }

  @override
  Future<V2TimValueCallback<V2TimGroupApplicationResult>>
      getGroupApplicationList() async {
    final result = await TencentImSDKPlugin.v2TIMManager
        .getGroupManager()
        .getGroupApplicationList();
    if (result.code != 0) {
      _coreService.callOnCallback(TIMCallback(
          type: TIMCallbackType.API_ERROR,
          errorMsg: result.desc,
          errorCode: result.code));
    }
    return result;
  }

  @override
  Future<V2TimCallback> acceptGroupApplication(
      {required String groupID,
      required String fromUser,
      required String toUser,
      required int type,
      required int addTime,
      String? reason}) async {
    final result = await TencentImSDKPlugin.v2TIMManager
        .getGroupManager()
        .acceptGroupApplication(
          groupID: groupID,
          fromUser: fromUser,
          toUser: toUser,
          addTime: addTime,
          type: GroupApplicationTypeEnum.values[type],
          reason: reason ?? "",
        );
    if (result.code != 0) {
      _coreService.callOnCallback(TIMCallback(
          type: TIMCallbackType.API_ERROR,
          errorMsg: result.desc,
          errorCode: result.code));
    }
    return result;
  }

  @override
  Future<V2TimCallback> refuseGroupApplication(
      {String? reason,
      required int addTime,
      required String groupID,
      required String fromUser,
      required String toUser,
      required GroupApplicationTypeEnum type}) async {
    final result = await TencentImSDKPlugin.v2TIMManager
        .getGroupManager()
        .refuseGroupApplication(
            groupID: groupID,
            fromUser: fromUser,
            toUser: toUser,
            type: type,
            addTime: addTime,
            reason: reason);
    if (result.code != 0) {
      _coreService.callOnCallback(TIMCallback(
          type: TIMCallbackType.API_ERROR,
          errorMsg: result.desc,
          errorCode: result.code));
    }
    return result;
  }
}
文件：/im-flutter-uikit/package_src/tim_ui_kit/lib/data_services/message/message_service_implement.dart
// ignore_for_file: deprecated_member_use

import 'package:tencent_im_base/tencent_im_base.dart';
import 'package:tim_ui_kit/data_services/core/core_services_implements.dart';
import 'package:tim_ui_kit/data_services/message/message_services.dart';
import 'package:tim_ui_kit/data_services/services_locatar.dart';

class MessageServiceImpl extends MessageService {
  final CoreServicesImpl _coreService = serviceLocator<CoreServicesImpl>();

  @override
  Future<List<V2TimMessage>> getHistoryMessageList({
    HistoryMsgGetTypeEnum getType =
        HistoryMsgGetTypeEnum.V2TIM_GET_LOCAL_OLDER_MSG,
    String? userID,
    String? groupID,
    int lastMsgSeq = -1,
    required int count,
    String? lastMsgID,
  }) async {
    final res = await TencentImSDKPlugin.v2TIMManager
        .getMessageManager()
        .getHistoryMessageList(
            count: count,
            getType: getType,
            userID: userID,
            groupID: groupID,
            lastMsgID: lastMsgID,
            lastMsgSeq: lastMsgSeq);
    final List<V2TimMessage> messageList = res.data ?? [];
    if (res.code != 0) {
      _coreService.callOnCallback(TIMCallback(
          type: TIMCallbackType.API_ERROR,
          errorMsg: res.desc,
          errorCode: res.code));
    }
    return messageList;
  }

  @override
  Future addSimpleMsgListener({
    required V2TimSimpleMsgListener listener,
  }) async {
    return TencentImSDKPlugin.v2TIMManager
        .addSimpleMsgListener(listener: listener);
  }

  @override
  Future<void> removeSimpleMsgListener({V2TimSimpleMsgListener? listener}) {
    return TencentImSDKPlugin.v2TIMManager
        .removeSimpleMsgListener(listener: listener);
  }

  @override
  Future<void> addAdvancedMsgListener({
    required V2TimAdvancedMsgListener listener,
  }) {
    return TencentImSDKPlugin.v2TIMManager
        .getMessageManager()
        .addAdvancedMsgListener(listener: listener);
  }

  @override
  Future<V2TimValueCallback<V2TimGroupMessageReadMemberList>>
      getGroupMessageReadMemberList({
    required String messageID,
    required GetGroupMessageReadMemberListFilter filter,
    int nextSeq = 0,
    int count = 100,
  }) async {
    final result = await TencentImSDKPlugin.v2TIMManager
        .getMessageManager()
        .getGroupMessageReadMemberList(
            messageID: messageID,
            filter: filter,
            nextSeq: nextSeq,
            count: count);
    if (result.code != 0) {
      _coreService.callOnCallback(TIMCallback(
          type: TIMCallbackType.API_ERROR,
          errorMsg: result.desc,
          errorCode: result.code));
    }
    return result;
  }

  @override
  Future<V2TimValueCallback<List<V2TimMessageReceipt>>> getMessageReadReceipts({
    required List<String> messageIDList,
  }) async {
    final result = await TencentImSDKPlugin.v2TIMManager
        .getMessageManager()
        .getMessageReadReceipts(messageIDList: messageIDList);
    if (result.code != 0) {
      _coreService.callOnCallback(TIMCallback(
          type: TIMCallbackType.API_ERROR,
          errorMsg: result.desc,
          errorCode: result.code));
    }
    return result;
  }

  @override
  Future<V2TimCallback> sendMessageReadReceipts({
    required List<String> messageIDList,
  }) async {
    final result = await TencentImSDKPlugin.v2TIMManager
        .getMessageManager()
        .sendMessageReadReceipts(messageIDList: messageIDList);
    if (result.code != 0) {
      _coreService.callOnCallback(TIMCallback(
          type: TIMCallbackType.API_ERROR,
          errorMsg: result.desc,
          errorCode: result.code));
    }
    return result;
  }

  @override
  Future<V2TimMsgCreateInfoResult?> createTextMessage(
      {required String text}) async {
    final res = await TencentImSDKPlugin.v2TIMManager
        .getMessageManager()
        .createTextMessage(text: text);
    if (res.code == 0) {
      final messageResult = res.data;
      return messageResult;
    }
    _coreService.callOnCallback(TIMCallback(
        type: TIMCallbackType.API_ERROR,
        errorMsg: res.desc,
        errorCode: res.code));
    return null;
  }

  @override
  Future<V2TimMsgCreateInfoResult?> createCustomMessage(
      {required String data}) async {
    final res = await TencentImSDKPlugin.v2TIMManager
        .getMessageManager()
        .createCustomMessage(data: data);
    if (res.code == 0) {
      final messageResult = res.data;
      return messageResult;
    }
    _coreService.callOnCallback(TIMCallback(
        type: TIMCallbackType.API_ERROR,
        errorMsg: res.desc,
        errorCode: res.code));
    return null;
  }

  @override
  Future<V2TimMsgCreateInfoResult?> createFaceMessage(
      {required int index, required String data}) async {
    final res = await TencentImSDKPlugin.v2TIMManager
        .getMessageManager()
        .createFaceMessage(index: index, data: data);
    if (res.code == 0) {
      final messageResult = res.data;
      return messageResult;
    }
    _coreService.callOnCallback(TIMCallback(
        type: TIMCallbackType.API_ERROR,
        errorMsg: res.desc,
        errorCode: res.code));
    return null;
  }

  @override
  Future<V2TimValueCallback<V2TimMessage>> reSendMessage(
      {required String msgID, // 自己创建的ID
      bool? onlineUserOnly}) async {
    final res = await TencentImSDKPlugin.v2TIMManager
        .getMessageManager()
        .reSendMessage(msgID: msgID, onlineUserOnly: onlineUserOnly ?? false);
    if (res.code != 0) {
      _coreService.callOnCallback(TIMCallback(
          type: TIMCallbackType.API_ERROR,
          errorMsg: res.desc,
          errorCode: res.code));
    }
    return res;
  }

  @override
  Future<V2TimMsgCreateInfoResult?> createTextAtMessage(
      {required String text, required List<String> atUserList}) async {
    final res = await TencentImSDKPlugin.v2TIMManager
        .getMessageManager()
        .createTextAtMessage(text: text, atUserList: atUserList);
    if (res.code == 0) {
      final messageResult = res.data;
      return messageResult;
    }
    _coreService.callOnCallback(TIMCallback(
        type: TIMCallbackType.API_ERROR,
        errorMsg: res.desc,
        errorCode: res.code));
    return null;
  }

  @override
  Future<V2TimMsgCreateInfoResult?> createImageMessage({
    required String imagePath,
  }) async {
    final res = await TencentImSDKPlugin.v2TIMManager
        .getMessageManager()
        .createImageMessage(imagePath: imagePath);
    if (res.code == 0) {
      return res.data;
    }
    _coreService.callOnCallback(TIMCallback(
        type: TIMCallbackType.API_ERROR,
        errorMsg: res.desc,
        errorCode: res.code));
    return null;
  }

  @override
  Future<V2TimMsgCreateInfoResult?> createSoundMessage({
    required String soundPath,
    required int duration,
  }) async {
    final res = await TencentImSDKPlugin.v2TIMManager
        .getMessageManager()
        .createSoundMessage(soundPath: soundPath, duration: duration);
    if (res.code == 0) {
      return res.data;
    }
    _coreService.callOnCallback(TIMCallback(
        type: TIMCallbackType.API_ERROR,
        errorMsg: res.desc,
        errorCode: res.code));
    return null;
  }

  @override
  Future<V2TimValueCallback<V2TimMessage>> sendMessage({
    required String id, // 自己创建的ID
    required String receiver,
    required String groupID,
    MessagePriorityEnum priority = MessagePriorityEnum.V2TIM_PRIORITY_NORMAL,
    bool onlineUserOnly = false,
    bool isExcludedFromUnreadCount = false,
    bool needReadReceipt = false,
    OfflinePushInfo? offlinePushInfo,
    String? cloudCustomData, // 云自定义消息字段，只能在消息发送前添加
    String? localCustomData,
  }) async {
    final result =
        await TencentImSDKPlugin.v2TIMManager.getMessageManager().sendMessage(
              id: id,
              receiver: receiver,
              groupID: groupID,
              priority: priority,
              onlineUserOnly: onlineUserOnly,
              offlinePushInfo: offlinePushInfo,
              needReadReceipt: needReadReceipt,
            );
    if (result.code != 0) {
      _coreService.callOnCallback(TIMCallback(
          type: TIMCallbackType.API_ERROR,
          errorMsg: result.desc,
          errorCode: result.code));
    }
    return result;
  }

  @override
  Future<V2TimCallback> deleteMessageFromLocalStorage({
    required String msgID,
  }) async {
    final result = await TencentImSDKPlugin.v2TIMManager
        .getMessageManager()
        .deleteMessageFromLocalStorage(msgID: msgID);
    if (result.code != 0) {
      _coreService.callOnCallback(TIMCallback(
          type: TIMCallbackType.API_ERROR,
          errorMsg: result.desc,
          errorCode: result.code));
    }
    return result;
  }

  @override
  Future<V2TimCallback> revokeMessage({required String msgID}) async {
    final result = await TencentImSDKPlugin.v2TIMManager
        .getMessageManager()
        .revokeMessage(msgID: msgID);
    if (result.code != 0) {
      _coreService.callOnCallback(TIMCallback(
          type: TIMCallbackType.API_ERROR,
          errorMsg: result.desc,
          errorCode: result.code));
    }
    return result;
  }

  @override
  Future<V2TimCallback> clearC2CHistoryMessage({
    required String userID,
  }) async {
    final result = await TencentImSDKPlugin.v2TIMManager
        .getMessageManager()
        .clearC2CHistoryMessage(userID: userID);
    if (result.code != 0) {
      _coreService.callOnCallback(TIMCallback(
          type: TIMCallbackType.API_ERROR,
          errorMsg: result.desc,
          errorCode: result.code));
    }
    return result;
  }

  @override
  Future<V2TimCallback> clearGroupHistoryMessage({
    required String groupID,
  }) async {
    final result = await TencentImSDKPlugin.v2TIMManager
        .getMessageManager()
        .clearGroupHistoryMessage(groupID: groupID);
    if (result.code != 0) {
      _coreService.callOnCallback(TIMCallback(
          type: TIMCallbackType.API_ERROR,
          errorMsg: result.desc,
          errorCode: result.code));
    }
    return result;
  }

  @override
  Future<V2TimCallback> markC2CMessageAsRead({
    required String userID,
  }) async {
    final result = await TencentImSDKPlugin.v2TIMManager
        .getMessageManager()
        .markC2CMessageAsRead(userID: userID);
    if (result.code != 0) {
      _coreService.callOnCallback(TIMCallback(
          type: TIMCallbackType.API_ERROR,
          errorMsg: result.desc,
          errorCode: result.code));
    }
    return result;
  }

  @override
  Future<V2TimCallback> markGroupMessageAsRead({
    required String groupID,
  }) async {
    final result = await TencentImSDKPlugin.v2TIMManager
        .getMessageManager()
        .markGroupMessageAsRead(groupID: groupID);
    if (result.code != 0) {
      _coreService.callOnCallback(TIMCallback(
          type: TIMCallbackType.API_ERROR,
          errorMsg: result.desc,
          errorCode: result.code));
    }
    return result;
  }

  @override
  Future<void> removeAdvancedMsgListener(
      {V2TimAdvancedMsgListener? listener}) async {
    final result = await TencentImSDKPlugin.v2TIMManager
        .getMessageManager()
        .removeAdvancedMsgListener(listener: listener);
    return result;
  }

  @override
  Future<List<V2TimMessage>?> downloadMergerMessage({
    required String msgID,
  }) async {
    final res = await TencentImSDKPlugin.v2TIMManager
        .getMessageManager()
        .downloadMergerMessage(msgID: msgID);
    if (res.code == 0) {
      return res.data;
    }
    _coreService.callOnCallback(TIMCallback(
        type: TIMCallbackType.API_ERROR,
        errorMsg: res.desc,
        errorCode: res.code));
    return null;
  }

  @override
  Future<V2TimMsgCreateInfoResult?> createForwardMessage({
    required String msgID,
  }) async {
    final res = await TencentImSDKPlugin.v2TIMManager
        .getMessageManager()
        .createForwardMessage(msgID: msgID);
    if (res.code == 0) {
      return res.data;
    }
    _coreService.callOnCallback(TIMCallback(
        type: TIMCallbackType.API_ERROR,
        errorMsg: res.desc,
        errorCode: res.code));
    return null;
  }

  @override
  Future<V2TimMsgCreateInfoResult?> createMergerMessage({
    required List<String> msgIDList,
    required String title,
    required List<String> abstractList,
    required String compatibleText,
  }) async {
    final res = await TencentImSDKPlugin.v2TIMManager
        .getMessageManager()
        .createMergerMessage(
            msgIDList: msgIDList,
            title: title,
            abstractList: abstractList,
            compatibleText: compatibleText);
    if (res.code == 0) {
      return res.data;
    }
    _coreService.callOnCallback(TIMCallback(
        type: TIMCallbackType.API_ERROR,
        errorMsg: res.desc,
        errorCode: res.code));
    return null;
  }

  @override
  Future<V2TimCallback> deleteMessages(
      {required List<String> msgIDs,
      List<dynamic>? webMessageInstanceList}) async {
    final result = await TencentImSDKPlugin.v2TIMManager
        .getMessageManager()
        .deleteMessages(msgIDs: msgIDs);
    if (result.code != 0) {
      _coreService.callOnCallback(TIMCallback(
          type: TIMCallbackType.API_ERROR,
          errorMsg: result.desc,
          errorCode: result.code));
    }
    return result;
  }

  @override
  Future<V2TimMsgCreateInfoResult?> createVideoMessage(
      {required String videoPath,
      required String type,
      required int duration,
      required String snapshotPath}) async {
    final res = await TencentImSDKPlugin.v2TIMManager
        .getMessageManager()
        .createVideoMessage(
          videoFilePath: videoPath,
          type: type,
          duration: duration,
          snapshotPath: snapshotPath,
        );
    if (res.code == 0) {
      return res.data;
    }
    _coreService.callOnCallback(TIMCallback(
        type: TIMCallbackType.API_ERROR,
        errorMsg: res.desc,
        errorCode: res.code));
    return null;
  }

  @override
  Future<V2TimValueCallback<V2TimMessage>> sendReplyMessage({
    required String id, // 自己创建的ID
    required String receiver,
    required String groupID,
    bool needReadReceipt = false,
    required V2TimMessage replyMessage, // 被回复的消息
  }) async {
    final result = await TencentImSDKPlugin.v2TIMManager
        .getMessageManager()
        .sendReplyMessage(
            id: id,
            receiver: receiver,
            groupID: groupID,
            needReadReceipt: needReadReceipt,
            replyMessage: replyMessage);
    if (result.code != 0) {
      _coreService.callOnCallback(TIMCallback(
          type: TIMCallbackType.API_ERROR,
          errorMsg: result.desc,
          errorCode: result.code));
    }
    return result;
  }

  @override
  Future<V2TimMsgCreateInfoResult?> createFileMessage(
      {required String filePath, required String fileName}) async {
    final res = await TencentImSDKPlugin.v2TIMManager
        .getMessageManager()
        .createFileMessage(filePath: filePath, fileName: fileName);
    if (res.code == 0) {
      return res.data;
    }
    _coreService.callOnCallback(TIMCallback(
        type: TIMCallbackType.API_ERROR,
        errorMsg: res.desc,
        errorCode: res.code));
    return null;
  }

  @override
  Future<V2TimMsgCreateInfoResult?> createLocationMessage(
      {required String desc,
      required double longitude,
      required double latitude}) async {
    final res = await TencentImSDKPlugin.v2TIMManager
        .getMessageManager()
        .createLocationMessage(
            desc: desc, longitude: longitude, latitude: latitude);
    if (res.code == 0) {
      return res.data;
    }
    _coreService.callOnCallback(TIMCallback(
        type: TIMCallbackType.API_ERROR,
        errorMsg: res.desc,
        errorCode: res.code));
    return null;
  }

  @override
  Future<V2TimValueCallback<V2TimMessageSearchResult>> searchLocalMessages(
      {required V2TimMessageSearchParam searchParam}) async {
    final result = await TencentImSDKPlugin.v2TIMManager
        .getMessageManager()
        .searchLocalMessages(searchParam: searchParam);
    if (result.code != 0) {
      _coreService.callOnCallback(TIMCallback(
          type: TIMCallbackType.API_ERROR,
          errorMsg: result.desc,
          errorCode: result.code));
    }
    return result;
  }

  @override
  Future<List<V2TimMessage>?> findMessages({
    required List<String> messageIDList,
  }) async {
    final res = await TencentImSDKPlugin.v2TIMManager
        .getMessageManager()
        .findMessages(messageIDList: messageIDList);
    if (res.code == 0) {
      return res.data;
    }
    _coreService.callOnCallback(TIMCallback(
        type: TIMCallbackType.API_ERROR,
        errorMsg: res.desc,
        errorCode: res.code));
    return null;
  }

  @override
  Future<V2TimCallback> setLocalCustomInt(
      {required String msgID, required int localCustomInt}) async {
    final result = await TencentImSDKPlugin.v2TIMManager
        .getMessageManager()
        .setLocalCustomInt(msgID: msgID, localCustomInt: localCustomInt);
    if (result.code != 0) {
      _coreService.callOnCallback(TIMCallback(
          type: TIMCallbackType.API_ERROR,
          errorMsg: result.desc,
          errorCode: result.code));
    }
    return result;
  }

  @override
  Future<V2TimCallback> setC2CReceiveMessageOpt({
    required List<String> userIDList,
    required ReceiveMsgOptEnum opt,
  }) async {
    final result = await TencentImSDKPlugin.v2TIMManager
        .getMessageManager()
        .setC2CReceiveMessageOpt(userIDList: userIDList, opt: opt);
    if (result.code != 0) {
      _coreService.callOnCallback(TIMCallback(
          type: TIMCallbackType.API_ERROR,
          errorMsg: result.desc,
          errorCode: result.code));
    }
    return result;
  }

  @override
  Future<V2TimCallback> setGroupReceiveMessageOpt({
    required String groupID,
    required ReceiveMsgOptEnum opt,
  }) async {
    final result = await TencentImSDKPlugin.v2TIMManager
        .getMessageManager()
        .setGroupReceiveMessageOpt(groupID: groupID, opt: opt);
    if (result.code != 0) {
      _coreService.callOnCallback(TIMCallback(
          type: TIMCallbackType.API_ERROR,
          errorMsg: result.desc,
          errorCode: result.code));
    }
    return result;
  }

  @override
  Future<V2TimValueCallback<V2TimMessageChangeInfo>> modifyMessage(
      {required V2TimMessage message}) async {
    final result = await TencentImSDKPlugin.v2TIMManager
        .getMessageManager()
        .modifyMessage(message: message);
    if (result.code != 0) {
      _coreService.callOnCallback(TIMCallback(
          type: TIMCallbackType.API_ERROR,
          errorMsg: result.desc,
          errorCode: result.code));
    }
    return result;
  }

  @override
  Future<V2TimCallback> setLocalCustomData(
      {required String msgID, required String localCustomData}) async {
    final result = await TencentImSDKPlugin.v2TIMManager
        .getMessageManager()
        .setLocalCustomData(msgID: msgID, localCustomData: localCustomData);
    if (result.code != 0) {
      _coreService.callOnCallback(TIMCallback(
          type: TIMCallbackType.API_ERROR,
          errorMsg: result.desc,
          errorCode: result.code));
    }
    return result;
  }
}
文件：/im-flutter-uikit/package_src/tim_ui_kit/lib/data_services/message/message_services.dart
import 'package:tencent_im_base/tencent_im_base.dart';

abstract class MessageService {
  Future<List<V2TimMessage>> getHistoryMessageList({
    HistoryMsgGetTypeEnum getType =
        HistoryMsgGetTypeEnum.V2TIM_GET_LOCAL_OLDER_MSG,
    String? userID,
    String? groupID,
    int lastMsgSeq,
    required int count,
    String? lastMsgID,
  });

  Future addSimpleMsgListener({
    required V2TimSimpleMsgListener listener,
  });

  Future addAdvancedMsgListener({
    required V2TimAdvancedMsgListener listener,
  });

  Future<void> removeSimpleMsgListener({V2TimSimpleMsgListener? listener});

  Future<V2TimMsgCreateInfoResult?> createTextMessage({required String text});
  Future<V2TimMsgCreateInfoResult?> createFaceMessage(
      {required int index, required String data});

  Future<V2TimMsgCreateInfoResult?> createCustomMessage({required String data});

  Future<V2TimMsgCreateInfoResult?> createTextAtMessage(
      {required String text, required List<String> atUserList});

  Future<V2TimValueCallback<V2TimMessage>> sendMessage(
      {required String id, // 自己创建的ID
      required String receiver,
      required String groupID,
      MessagePriorityEnum priority = MessagePriorityEnum.V2TIM_PRIORITY_NORMAL,
      bool onlineUserOnly = false,
      bool isExcludedFromUnreadCount = false,
      bool needReadReceipt = false,
      OfflinePushInfo? offlinePushInfo,
      String? cloudCustomData, // 云自定义消息字段，只能在消息发送前添加
      String? localCustomData});

  Future<V2TimValueCallback<V2TimMessage>> sendReplyMessage({
    required String id, // 自己创建的ID
    required String receiver,
    required String groupID,
    bool needReadReceipt = false,
    required V2TimMessage replyMessage, // 被回复的消息
  });

  Future<V2TimValueCallback<V2TimMessage>> reSendMessage(
      {required String msgID, // 自己创建的ID
      bool onlineUserOnly});

  Future<V2TimValueCallback<V2TimMessageChangeInfo>> modifyMessage(
      {required V2TimMessage message});

  Future<V2TimMsgCreateInfoResult?> createImageMessage({
    required String imagePath,
  });

  Future<V2TimMsgCreateInfoResult?> createVideoMessage(
      {required String videoPath,
      required String type,
      required int duration,
      required String snapshotPath});

  Future<V2TimMsgCreateInfoResult?> createFileMessage({
    required String filePath,
    required String fileName,
  });

  Future<V2TimMsgCreateInfoResult?> createLocationMessage(
      {required String desc,
      required double longitude,
      required double latitude});

  Future<V2TimMsgCreateInfoResult?> createSoundMessage({
    required String soundPath,
    required int duration,
  });

  Future<V2TimMsgCreateInfoResult?> createForwardMessage({
    required String msgID,
  });

  Future<V2TimMsgCreateInfoResult?> createMergerMessage({
    required List<String> msgIDList,
    required String title,
    required List<String> abstractList,
    required String compatibleText,
  });

  Future<V2TimCallback> deleteMessageFromLocalStorage({
    required String msgID,
  });

  Future<V2TimCallback> revokeMessage({required String msgID});

  Future<V2TimCallback> clearC2CHistoryMessage({
    required String userID,
  });

  Future<V2TimCallback> clearGroupHistoryMessage({
    required String groupID,
  });

  Future<V2TimCallback> markC2CMessageAsRead({
    required String userID,
  });

  Future<V2TimCallback> markGroupMessageAsRead({
    required String groupID,
  });

  Future<void> removeAdvancedMsgListener({V2TimAdvancedMsgListener? listener});

  Future<List<V2TimMessage>?> downloadMergerMessage({
    required String msgID,
  });

  Future<V2TimCallback> deleteMessages(
      {required List<String> msgIDs, List<dynamic>? webMessageInstanceList});

  Future<List<V2TimMessage>?> findMessages({
    required List<String> messageIDList,
  });

  Future<V2TimValueCallback<V2TimMessageSearchResult>> searchLocalMessages({
    required V2TimMessageSearchParam searchParam,
  });

  Future<V2TimCallback> setLocalCustomInt(
      {required String msgID, required int localCustomInt});

  Future<V2TimCallback> setLocalCustomData(
      {required String msgID, required String localCustomData});

  Future<V2TimCallback> setC2CReceiveMessageOpt({
    required List<String> userIDList,
    required ReceiveMsgOptEnum opt,
  });

  Future<V2TimCallback> setGroupReceiveMessageOpt({
    required String groupID,
    required ReceiveMsgOptEnum opt,
  });

  Future<V2TimValueCallback<V2TimGroupMessageReadMemberList>>
      getGroupMessageReadMemberList({
    required String messageID,
    required GetGroupMessageReadMemberListFilter filter,
    int nextSeq = 0,
    int count = 100,
  });

  Future<V2TimValueCallback<List<V2TimMessageReceipt>>> getMessageReadReceipts({
    required List<String> messageIDList,
  });

  Future<V2TimCallback> sendMessageReadReceipts({
    required List<String> messageIDList,
  });
}
文件：/im-flutter-uikit/package_src/tim_ui_kit/lib/ui/constants/emoji.dart
List<Map<String, Object>> emojiData = [
  {"name": "GRINNING FACE WITH SMILING EYES", "unicode": 128513},
  {"name": "FACE WITH TEARS OF JOY", "unicode": 128514},
  {"name": "SMILING FACE WITH OPEN MOUTH", "unicode": 128515},
  {"name": "SMILING FACE WITH OPEN MOUTH AND SMILING EYES", "unicode": 128516},
  {"name": "SMILING FACE WITH OPEN MOUTH AND COLD SWEAT", "unicode": 128517},
  {
    "name": "SMILING FACE WITH OPEN MOUTH AND TIGHTLY-CLOSED EYES",
    "unicode": 128518
  },
  {"name": "WINKING FACE", "unicode": 128521},
  {"name": "SMILING FACE WITH SMILING EYES", "unicode": 128522},
  {"name": "FACE SAVOURING DELICIOUS FOOD", "unicode": 128523},
  {"name": "RELIEVED FACE", "unicode": 128524},
  {"name": "SMILING FACE WITH HEART-SHAPED EYES", "unicode": 128525},
  {"name": "SMIRKING FACE", "unicode": 128527},
  {"name": "UNAMUSED FACE", "unicode": 128530},
  {"name": "FACE WITH COLD SWEAT", "unicode": 128531},
  {"name": "PENSIVE FACE", "unicode": 128532},
  {"name": "CONFOUNDED FACE", "unicode": 128534},
  {"name": "FACE THROWING A KISS", "unicode": 128536},
  {"name": "KISSING FACE WITH CLOSED EYES", "unicode": 128538},
  {"name": "FACE WITH STUCK-OUT TONGUE AND WINKING EYE", "unicode": 128540},
  {
    "name": "FACE WITH STUCK-OUT TONGUE AND TIGHTLY-CLOSED EYES",
    "unicode": 128541
  },
  {"name": "DISAPPOINTED FACE", "unicode": 128542},
  {"name": "ANGRY FACE", "unicode": 128544},
  {"name": "POUTING FACE", "unicode": 128545},
  {"name": "CRYING FACE", "unicode": 128546},
  {"name": "PERSEVERING FACE", "unicode": 128547},
  {"name": "FACE WITH LOOK OF TRIUMPH", "unicode": 128548},
  {"name": "DISAPPOINTED BUT RELIEVED FACE", "unicode": 128549},
  {"name": "FEARFUL FACE", "unicode": 128552},
  {"name": "WEARY FACE", "unicode": 128553},
  {"name": "SLEEPY FACE", "unicode": 128554},
  {"name": "TIRED FACE", "unicode": 128555},
  {"name": "LOUDLY CRYING FACE", "unicode": 128557},
  {"name": "FACE WITH OPEN MOUTH AND COLD SWEAT", "unicode": 128560},
  {"name": "FACE SCREAMING IN FEAR", "unicode": 128561},
  {"name": "ASTONISHED FACE", "unicode": 128562},
  {"name": "FLUSHED FACE", "unicode": 128563},
  {"name": "DIZZY FACE", "unicode": 128565},
  {"name": "FACE WITH MEDICAL MASK", "unicode": 128567},
  {"name": "GRINNING CAT FACE WITH SMILING EYES", "unicode": 128568},
  {"name": "CAT FACE WITH TEARS OF JOY", "unicode": 128569},
  {"name": "SMILING CAT FACE WITH OPEN MOUTH", "unicode": 128570},
  {"name": "SMILING CAT FACE WITH HEART-SHAPED EYES", "unicode": 128571},
  {"name": "CAT FACE WITH WRY SMILE", "unicode": 128572},
  {"name": "KISSING CAT FACE WITH CLOSED EYES", "unicode": 128573},
  {"name": "POUTING CAT FACE", "unicode": 128574},
  {"name": "CRYING CAT FACE", "unicode": 128575},
  {"name": "WEARY CAT FACE", "unicode": 128576},
  {"name": "FACE WITH NO GOOD GESTURE", "unicode": 128581},
  {"name": "FACE WITH OK GESTURE", "unicode": 128582},
  {"name": "PERSON BOWING DEEPLY", "unicode": 128583},
  {"name": "SEE-NO-EVIL MONKEY", "unicode": 128584},
  {"name": "HEAR-NO-EVIL MONKEY", "unicode": 128585},
  {"name": "SPEAK-NO-EVIL MONKEY", "unicode": 128586},
  {"name": "HAPPY PERSON RAISING ONE HAND", "unicode": 128587},
  {"name": "PERSON RAISING BOTH HANDS IN CELEBRATION", "unicode": 128588},
  {"name": "PERSON FROWNING", "unicode": 128589},
  {"name": "PERSON WITH POUTING FACE", "unicode": 128590},
  {"name": "PERSON WITH FOLDED HANDS", "unicode": 128591},
  {"name": "BLACK SCISSORS", "unicode": 9986},
  {"name": "WHITE HEAVY CHECK MARK", "unicode": 9989},
  {"name": "AIRPLANE", "unicode": 9992},
  {"name": "ENVELOPE", "unicode": 9993},
  {"name": "RAISED FIST", "unicode": 9994},
  {"name": "RAISED HAND", "unicode": 9995},
  {"name": "VICTORY HAND", "unicode": 9996},
  {"name": "PENCIL", "unicode": 9999},
  {"name": "BLACK NIB", "unicode": 10002},
  {"name": "HEAVY CHECK MARK", "unicode": 10004},
  {"name": "HEAVY MULTIPLICATION X", "unicode": 10006},
  {"name": "SPARKLES", "unicode": 10024},
  {"name": "EIGHT SPOKED ASTERISK", "unicode": 10035},
  {"name": "EIGHT POINTED BLACK STAR", "unicode": 10036},
  {"name": "SNOWFLAKE", "unicode": 10052},
  {"name": "SPARKLE", "unicode": 10055},
  {"name": "CROSS MARK", "unicode": 10060},
  {"name": "NEGATIVE SQUARED CROSS MARK", "unicode": 10062},
  {"name": "BLACK QUESTION MARK ORNAMENT", "unicode": 10067},
  {"name": "WHITE QUESTION MARK ORNAMENT", "unicode": 10068},
  {"name": "WHITE EXCLAMATION MARK ORNAMENT", "unicode": 10069},
  {"name": "HEAVY EXCLAMATION MARK SYMBOL", "unicode": 10071},
  {"name": "HEAVY BLACK HEART", "unicode": 10084},
  {"name": "HEAVY PLUS SIGN", "unicode": 10133},
  {"name": "HEAVY MINUS SIGN", "unicode": 10134},
  {"name": "HEAVY DIVISION SIGN", "unicode": 10135},
  {"name": "BLACK RIGHTWARDS ARROW", "unicode": 10145},
  {"name": "CURLY LOOP", "unicode": 10160},
  {"name": "ROCKET", "unicode": 128640},
  {"name": "RAILWAY CAR", "unicode": 128643},
  {"name": "HIGH-SPEED TRAIN", "unicode": 128644},
  {"name": "HIGH-SPEED TRAIN WITH BULLET NOSE", "unicode": 128645},
  {"name": "METRO", "unicode": 128647},
  {"name": "STATION", "unicode": 128649},
  {"name": "BUS", "unicode": 128652},
  {"name": "BUS STOP", "unicode": 128655},
  {"name": "AMBULANCE", "unicode": 128657},
  {"name": "FIRE ENGINE", "unicode": 128658},
  {"name": "POLICE CAR", "unicode": 128659},
  {"name": "TAXI", "unicode": 128661},
  {"name": "AUTOMOBILE", "unicode": 128663},
  {"name": "RECREATIONAL VEHICLE", "unicode": 128665},
  {"name": "DELIVERY TRUCK", "unicode": 128666},
  {"name": "SHIP", "unicode": 128674},
  {"name": "SPEEDBOAT", "unicode": 128676},
  {"name": "HORIZONTAL TRAFFIC LIGHT", "unicode": 128677},
  {"name": "CONSTRUCTION SIGN", "unicode": 128679},
  {"name": "POLICE CARS REVOLVING LIGHT", "unicode": 128680},
  {"name": "TRIANGULAR FLAG ON POST", "unicode": 128681},
  {"name": "DOOR", "unicode": 128682},
  {"name": "NO ENTRY SIGN", "unicode": 128683},
  {"name": "SMOKING SYMBOL", "unicode": 128684},
  {"name": "NO SMOKING SYMBOL", "unicode": 128685},
  {"name": "BICYCLE", "unicode": 128690},
  {"name": "PEDESTRIAN", "unicode": 128694},
  {"name": "MENS SYMBOL", "unicode": 128697},
  {"name": "WOMENS SYMBOL", "unicode": 128698},
  {"name": "RESTROOM", "unicode": 128699},
  {"name": "BABY SYMBOL", "unicode": 128700},
  {"name": "TOILET", "unicode": 128701},
  {"name": "WATER CLOSET", "unicode": 128702},
  {"name": "BATH", "unicode": 128704},
  {"name": "CIRCLED LATIN CAPITAL LETTER M", "unicode": 9410},
  {"name": "NEGATIVE SQUARED LATIN CAPITAL LETTER A", "unicode": 127344},
  {"name": "NEGATIVE SQUARED LATIN CAPITAL LETTER B", "unicode": 127345},
  {"name": "NEGATIVE SQUARED LATIN CAPITAL LETTER O", "unicode": 127358},
  {"name": "NEGATIVE SQUARED LATIN CAPITAL LETTER P", "unicode": 127359},
  {"name": "NEGATIVE SQUARED AB", "unicode": 127374},
  {"name": "SQUARED CL", "unicode": 127377},
  {"name": "SQUARED COOL", "unicode": 127378},
  {"name": "SQUARED FREE", "unicode": 127379},
  {"name": "SQUARED ID", "unicode": 127380},
  {"name": "SQUARED NEW", "unicode": 127381},
];
文件：/im-flutter-uikit/package_src/tim_ui_kit/lib/ui/constants/history_message_constant.dart
enum V2_TIM_IMAGE_TYPES_ENUM {
  original,
  big,
  small,
}

class HistoryMessageDartConstant {
  static const getCount = 20;

  // ignore: constant_identifier_names
  static const V2_TIM_IMAGE_TYPES = {
    'ORIGINAL': 0,
    'BIG': 1,
    'SMALL': 2,
  };

  static Map<V2_TIM_IMAGE_TYPES_ENUM, List<String>> imgPriorMap = {
    V2_TIM_IMAGE_TYPES_ENUM.original: oriImgPrior,
    V2_TIM_IMAGE_TYPES_ENUM.big: bigImgPrior,
    V2_TIM_IMAGE_TYPES_ENUM.small: smallImgPrior,
  };

  // 缩略图优先，大图次之，最后是原图
  static const smallImgPrior = ['ORIGINAL', 'BIG', 'SMALL'];
  // 大图优先，原图次之，最后是缩略图
  static const bigImgPrior = ['SMALL', 'ORIGINAL', 'BIG'];
  // 原图优先，大图次之，最后是缩略图
  static const oriImgPrior = ['SMALL', 'BIG', 'ORIGINAL'];

  // 视频、音频已读状态
  static const int read = 1;
}
文件：/im-flutter-uikit/package_src/tim_ui_kit/lib/ui/constants/time.dart
// ignore_for_file: constant_identifier_names

class TimeConst {
  static const DAY_SEC = 86400;
  static const HOUR_SEC = 3600;
  static const MIN_SEC = 60;

  static const SEC_SERIES = [HOUR_SEC, MIN_SEC];
}
文件：/im-flutter-uikit/package_src/tim_ui_kit/lib/ui/controller/tim_uikit_chat_controller.dart
// ignore_for_file: avoid_print

import 'package:flutter/cupertino.dart';
import 'package:tim_ui_kit/business_logic/view_models/tui_chat_view_model.dart';
import 'package:tim_ui_kit/data_services/services_locatar.dart';
import 'package:tim_ui_kit/tim_ui_kit.dart';

class TIMUIKitChatController {
  final TUIChatViewModel model = serviceLocator<TUIChatViewModel>();

  Future<bool> loadHistoryMessageList({
    HistoryMsgGetTypeEnum getType =
        HistoryMsgGetTypeEnum.V2TIM_GET_CLOUD_OLDER_MSG,
    String? userID,
    String? groupID,
    int lastMsgSeq = -1,
    required int count,
    String? lastMsgID,
  }) {
    return model.loadData(
      count: count,
      getType: getType,
      userID: userID,
      groupID: groupID,
      lastMsgID: lastMsgID,
      lastMsgSeq: lastMsgSeq,
    );
  }

  /// clear the current conversation;
  /// 销毁
  dispose() {
    model.clear();
  }

  /// clear the history of current conversation;
  /// 清除历史记录
  clearHistory() {
    model.clearHistory();
  }

  /// refresh the history message list manually;
  /// 手动刷新会话历史消息列表
  refreshCurrentHistoryList(
      {

      /// if `convType` is missing, it will user current conversation on screen as default;
      /// 当不传convType时，默认使用当前页面视图的conversation
      ConvType? convType,

      /// `receiverID` is required only if `convType` is `ConvType.c2c`, it means the receiver user id of c2c conversation;
      /// 当convType为ConvType.c2c时，必传receiverID：单聊对方的ID
      String? receiverID,

      /// `groupID` is required only if `convType` is `ConvType.group`;
      /// 当convType为ConvType.group时，必传groupID：群聊ID
      String? groupID}) {
    return model.loadDataFromController(
        receiverID: receiverID, groupID: groupID, convType: convType);
  }

  /// update single message at UI model
  /// 更新单条消息
  Future<void> updateMessage(
      {

      /// message ID
      required String msgID,

      /// if `convType` is missing, it will user current conversation on screen as default;
      /// 当不传convType时，默认使用当前页面视图的conversation
      ConvType? convType,

      /// `receiverID` is required only if `convType` is `ConvType.c2c`, it means the receiver user id of c2c conversation;
      /// 当convType为ConvType.c2c时，必传receiverID：单聊对方的ID
      String? receiverID,

      /// `groupID` is required only if `convType` is `ConvType.group`;
      /// 当convType为ConvType.group时，必传groupID：群聊ID
      String? groupID}) async {
    return await model.updateMessageFromController(
        msgID: msgID,
        receiverID: receiverID,
        groupID: groupID,
        convType: convType);
  }

  /// Send message;
  /// 发送消息
  Future<V2TimValueCallback<V2TimMessage>?>? sendMessage(
      {required V2TimMessage? messageInfo,

      /// `receiverID` is required only if `convType` is `ConvType.c2c`, it means the receiver user id of c2c conversation;
      /// 当convType为ConvType.c2c时，必传receiverID：单聊对方的ID
      String? receiverID,

      /// `groupID` is required only if `convType` is `ConvType.group`;
      /// 当convType为ConvType.group时，必传groupID：群聊ID
      String? groupID,
      required ConvType convType}) {
    final convID = convType == ConvType.c2c ? receiverID : groupID;
    if (convID != null && convID.isNotEmpty) {
      return model.sendMessageFromController(
          messageInfo: messageInfo, convID: convID, convType: convType);
    } else {
      print("ID is empty");
      return null;
    }
  }

  /// Send forward message;
  /// 逐条转发
  sendForwardMessage({
    required List<V2TimConversation> conversationList,
  }) async {
    model.sendForwardMessage(conversationList: conversationList);
  }

  /// Send merger message;
  /// 合并转发
  Future<V2TimValueCallback<V2TimMessage>?> sendMergerMessage({
    required List<V2TimConversation> conversationList,
    required String title,
    required List<String> abstractList,
    required BuildContext context,
  }) async {
    return model.sendMergerMessage(
        conversationList: conversationList,
        title: title,
        abstractList: abstractList,
        context: context);
  }

  /// Set local custom data
  /// 为本地消息配置额外String字段
  setLocalCustomData(String msgID, String localCustomData) {
    return model.setLocalCustomData(msgID, localCustomData);
  }

  /// Set local custom int
  /// 为本地消息配置额外int字段
  setLocalCustomInt(String msgID, int localCustomInt) {
    return model.setLocalCustomInt(msgID, localCustomInt);
  }
}
文件：/im-flutter-uikit/package_src/tim_ui_kit/lib/ui/controller/tim_uikit_conversation_controller.dart
import 'package:tencent_im_base/tencent_im_base.dart';
import 'package:tim_ui_kit/business_logic/view_models/tui_conversation_view_model.dart';

class TIMUIKitConversationController {
  TUIConversationViewModel model = TUIConversationViewModel();

  /// 获取选中的会话
  V2TimConversation? get selectedConversation {
    return model.selectedConversation;
  }

  /// 获取会话列表
  List<V2TimConversation?> get conversationList {
    return model.conversationList;
  }

  /// 设置会话列表
  set conversationList(List<V2TimConversation?> conversationList) {
    model.conversationList = conversationList;
  }

  /// 加载会话列表数据
  loadData({int count = 100}) {
    model.loadData(count: count);
  }

  /// 重新加载会话列表数据
  reloadData({int count = 100}) {
    model.clear();
    model.loadData(count: count);
  }

  /// 设置会话置顶
  pinConversation({required String conversationID, required bool isPinned}) {
    return model.pinConversation(
        conversationID: conversationID, isPinned: isPinned);
  }

  /// 设置会话草稿
  setConversationDraft({required String conversationID, String? draftText}) {
    return model.setConversationDraft(
        conversationID: conversationID, draftText: draftText);
  }

  /// 清除指定会话消息
  clearHistoryMessage({required V2TimConversation conversation}) {
    final convType = conversation.type;
    final convID = convType == 1 ? conversation.userID : conversation.groupID;
    if (convType != null && convID != null) {
      model.clearHistoryMessage(convID: convID, convType: convType);
    }
  }

  /// 删除会话
  Future<V2TimCallback?> deleteConversation({required String conversationID}) {
    return model.deleteConversation(conversationID: conversationID);
  }

  /// 添加会话监听器
  setConversationListener({V2TimConversationListener? listener}) {
    model.setConversationListener(listener: listener);
  }

  /// 移除会话监听器
  removeConversationListener() {
    model.removeConversationListener();
  }

  /// 销毁
  dispose() {
    model.removeConversationListener();
    model.clear();
  }
}
文件：/im-flutter-uikit/package_src/tim_ui_kit/lib/ui/controller/tim_uikit_personal_profile_controller.dart
import 'package:flutter/cupertino.dart';
import 'package:tim_ui_kit/business_logic/view_models/tui_personal_profile_view_model.dart';
import 'package:tim_ui_kit/ui/widgets/text_input_bottom_sheet.dart';

class TIMUIKitPersonalProfileController {
  final TUIPersonalProfileViewModel model = TUIPersonalProfileViewModel();

  changeFriendVerificationMethod(int allowType) {
    model.changeFriendVerificationMethod(allowType);
  }

  showTextInputBottomSheet(
    BuildContext context,
    String title,
    String tips,
    dynamic Function(String) onSubmitted,
  ) {
    TextInputBottomSheet.showTextInputBottomSheet(
        context, title, tips, onSubmitted);
  }

  updateGender(int gender) {
    model.updateGender(gender);
  }

  updateNickName(String nickName) {
    model.updateNickName(nickName);
  }

  updateSelfSignature(String selfSignature) {
    model.updateSelfSignature(selfSignature);
  }

  loadData(String? userID) {
    model.loadData(userID: userID);
  }

  updateSelfInfo(Map<String, dynamic> newSelfInfo) {
    model.updateSelfInfo(newSelfInfo);
  }

  dispose() {
    model.dispose();
  }
}
文件：/im-flutter-uikit/package_src/tim_ui_kit/lib/ui/controller/tim_uikit_profile_controller.dart
import 'package:flutter/cupertino.dart';
import 'package:tencent_im_base/tencent_im_base.dart';
import 'package:tim_ui_kit/business_logic/view_models/tui_profile_view_model.dart';
import 'package:tim_ui_kit/ui/widgets/text_input_bottom_sheet.dart';

class TIMUIKitProfileController {
  final TUIProfileViewModel model = TUIProfileViewModel();

  /// Remove a user from friend or contact
  Future<V2TimFriendOperationResult?> deleteFriend(String userID) {
    return model.deleteFriend(userID);
  }

  /// pin the conversation to the top
  pinedConversation(bool isPined, String convID) {
    model.pinedConversation(isPined, convID);
  }

  /// add a user to block list
  addUserToBlackList(bool shouldAdd, String userID) {
    model.addToBlackList(shouldAdd, userID);
  }

  /// Change the friend adding request verification method,
  /// 0 represents "Accept all friend request",
  /// 1 represents "Require approval for friend requests",
  /// 2 represents "reject all friend requests".
  changeFriendVerificationMethod(int allowType) {
    model.changeFriendVerificationMethod(allowType);
  }

  /// update the remarks for other users,
  Future<V2TimCallback> updateRemarks(String userID, String remark) {
    return model.updateRemarks(userID, remark);
  }

  /// set the message from a specific user as not disturb, mute notification
  setMessageDisturb(String userID, bool isDisturb) {
    model.setMessageDisturb(userID, isDisturb);
  }

  /// Show the text input bottom sheet
  showTextInputBottomSheet(
    BuildContext context,
    String title,
    String tips,
    void Function(String) onSubmitted,
  ) {
    TextInputBottomSheet.showTextInputBottomSheet(
        context, title, tips, onSubmitted);
  }

  /// Load the profile data
  loadData(String userID) {
    model.loadData(userID: userID);
  }

  dispose() {
    model.dispose();
  }

  /// Add a user as friend or contact
  Future<V2TimFriendOperationResult?> addFriend(String userID) {
    return model.addFriend(userID);
  }
}
文件：/im-flutter-uikit/package_src/tim_ui_kit/lib/ui/theme/tim_uikit_avatar_theme.dart

文件：/im-flutter-uikit/package_src/tim_ui_kit/lib/ui/theme/tim_uikit_message_theme.dart
import 'package:flutter/material.dart';

class MessageThemeData {
  /// Text style for message text
  final TextStyle? messageTextStyle;

  /// Text style for user nick name
  final TextStyle? nickNameTextStyle;

  /// Text style for timeline
  final TextStyle? timelineTextStyle;

  /// Color for messageBackgroundColor
  final Color? messageBackgroundColor;

  /// border radius for text message
  final BorderRadius? messageBorderRadius;

  final BorderRadius? avatarBorderRadius;

  MessageThemeData({
    this.messageTextStyle,
    this.messageBackgroundColor,
    this.messageBorderRadius,
    this.nickNameTextStyle,
    this.timelineTextStyle,
    this.avatarBorderRadius,
  });
}
文件：/im-flutter-uikit/package_src/tim_ui_kit/lib/ui/utils/color.dart
import 'package:flutter/material.dart';
import 'package:tim_ui_kit/ui/utils/tui_theme.dart';

Color hexToColor(String hexString) {
  return Color(int.parse(hexString, radix: 16)).withAlpha(255);
}

class CommonColor {
  static const weakBackgroundColor = Color(0xFFEDEDED);
  static const weakDividerColor = Color(0xFFE5E6E9);
  static const primaryColor = Color(0xFF147AFF);
  static const lightPrimaryColor = Color(0xFFC0E1FF);
  static const secondaryColor = Color(0xFF147AFF);
  static const weakTextColor = Color(0xFF999999);
  static const infoColor = Color(0xFFFF9C19);
  static const cautionColor = Color(0xFFFF584C);
  static const ownerColor = Colors.orange;
  static const adminColor = Colors.blue;

  static const defaultTheme = TUITheme(
      weakBackgroundColor: Color(0xFFEDEDED),
      weakDividerColor: Color(0xFFE5E6E9),
      primaryColor: Color(0xFF147AFF),
      secondaryColor: Color(0xFF147AFF),
      infoColor: Color(0xFFFF9C19),
      lightPrimaryColor: Color(0xFFC0E1FF),
      weakTextColor: Color(0xFF999999),
      darkTextColor: Color(0xFF444444),
      cautionColor: Color(0xFFFF584C),
      ownerColor: Colors.orange,
      adminColor: Colors.blue);
}
文件：/im-flutter-uikit/package_src/tim_ui_kit/lib/ui/utils/frame.dart
// ignore_for_file: avoid_print, prefer_typing_uninitialized_variables

import 'dart:ui';

class Frame {
  static var orginalCallback;

  static init() {
    orginalCallback = window.onReportTimings;
    window.onReportTimings = onReportTimings;
  }

  // 仅缓存最近 25 帧绘制耗时
  static const maxframes = 25;
  static final List<FrameTiming> lastFrames = [];
  // 基准 VSync 信号周期
  static const frameInterval =
      Duration(microseconds: Duration.microsecondsPerSecond ~/ 60);

  static void onReportTimings(List<FrameTiming> timings) {
    lastFrames.addAll(timings);
    // 仅保留 25 帧
    if (lastFrames.length > maxframes) {
      lastFrames.removeRange(0, lastFrames.length - maxframes);
    }
    // 如果有原始帧回调函数，则执行
    if (orginalCallback != null) {
      orginalCallback(timings);
    }
    print("fps: $fps");
  }

  static double get fps {
    int sum = 0;
    for (FrameTiming timing in lastFrames) {
      // 计算渲染耗时
      int duration = timing.timestampInMicroseconds(FramePhase.rasterFinish) -
          timing.timestampInMicroseconds(FramePhase.buildStart);
      // 判断耗时是否在 Vsync 信号周期内
      if (duration < frameInterval.inMicroseconds) {
        sum += 1;
      } else {
        // 有丢帧，向上取整
        int count = (duration / frameInterval.inMicroseconds).ceil();
        sum += count;
      }
    }
    return lastFrames.length / sum * 60;
  }

  static destroy() {
    window.onReportTimings = null;
  }
}
文件：/im-flutter-uikit/package_src/tim_ui_kit/lib/ui/utils/message.dart
// ignore_for_file: unrelated_type_equality_checks, avoid_print

import 'dart:convert';

import 'package:flutter/cupertino.dart';
import 'package:tencent_im_base/tencent_im_base.dart';
import 'package:tim_ui_kit/ui/constants/history_message_constant.dart';
import 'package:tim_ui_kit/ui/constants/time.dart';
import 'package:tim_ui_kit/ui/utils/tui_theme.dart';
import 'package:tim_ui_kit/ui/views/TIMUIKitChat/TIMUIKitMessageItem/tim_uikit_chat_custom_elem.dart';

class CallingMessage {
  /// 发起邀请方
  String? inviter;

  /// 被邀请方
  List<String>? inviteeList;

  /// videoCall: 语音 audioCall: 视频
  int? callType;

  // 1: 邀请方发起邀请
  // 2: 邀请方取消邀请
  // 3: 被邀请方接受邀请
  // 4: 被邀请方拒绝邀请
  // 5: 邀请超时
  int? actionType;

  /// 邀请ID
  String? inviteID;

  /// 通话时间
  int? timeout;

  /// 通话房间
  int? roomID;

  // 通话时间：秒，大于0代表通话时间
  int? callEnd;
  // 是否是群组通话
  bool? isGroup;

  CallingMessage(
      {this.inviter,
      this.actionType,
      this.inviteID,
      this.inviteeList,
      this.timeout,
      this.roomID,
      this.callType,
      this.callEnd,
      this.isGroup});

  CallingMessage.fromJSON(json) {
    actionType = json["actionType"];
    timeout = json["timeout"];
    inviter = json["inviter"];
    inviteeList = List<String>.from(json["inviteeList"]);
    inviteID = json["inviteID"];
    callType = jsonDecode(json["data"])["cmd"] != null
        ? (jsonDecode(json["data"])["cmd"] == "audioCall" ? 1 : 2)
        : jsonDecode(json["data"])["call_type"];
    roomID = jsonDecode(json["data"])["room_id"];
    callEnd = jsonDecode(json["data"])["call_end"];
    isGroup = jsonDecode(json["data"])["is_group"];
  }
}

class MessageUtils {
  // 判断CallingData的方式和Trtc的方法一致
  static isCallingData(String data) {
    try {
      Map<String, dynamic> customMap = jsonDecode(data);

      if (customMap.containsKey('businessID') && customMap['businessID'] == 1) {
        return true;
      }
    } catch (e) {
      print("isCallingData json parse error");
      return false;
    }
    return false;
  }

  // 是否是群组TRTC信息
  static isGroupCallingMessage(V2TimMessage message) {
    final isGroup = message.groupID != null;
    final isCustomMessage =
        message.elemType == MessageElemType.V2TIM_ELEM_TYPE_CUSTOM;
    if (isCustomMessage) {
      final customElemData = message.customElem?.data ?? "";
      return isCallingData(customElemData) && isGroup;
    }
    return false;
  }

  static String _getGroupChangeType(V2TimGroupChangeInfo info) {
    int? type = info.type;
    var value = info.value;
    String s = '';
    switch (type) {
      case GroupChangeInfoType.V2TIM_GROUP_INFO_CHANGE_TYPE_CUSTOM:
        s = TIM_t("自定义字段");
        value = '';
        break;
      case GroupChangeInfoType.V2TIM_GROUP_INFO_CHANGE_TYPE_FACE_URL:
        s = TIM_t("群头像");
        value = '';
        break;
      case GroupChangeInfoType.V2TIM_GROUP_INFO_CHANGE_TYPE_INTRODUCTION:
        s = TIM_t("群简介");
        break;
      case GroupChangeInfoType.V2TIM_GROUP_INFO_CHANGE_TYPE_NAME:
        s = TIM_t("群名称");
        break;
      case GroupChangeInfoType.V2TIM_GROUP_INFO_CHANGE_TYPE_NOTIFICATION:
        s = TIM_t("群通知");
        break;
      case GroupChangeInfoType.V2TIM_GROUP_INFO_CHANGE_TYPE_OWNER:
        s = TIM_t("群主");
        break;
      case 8:
        s = TIM_t("全员禁言状态");
        break;
    }

    final String option8 = s;
    if (value != null) {
      return TIM_t_para("{{option8}}为 ", "$option8为 ")(option8: option8) +
          ' $value';
    } else {
      return option8;
    }
  }

  static String? _getOpUserNick(V2TimGroupMemberInfo opUser) {
    return opUser.friendRemark == null || opUser.friendRemark == ''
        ? opUser.nickName == null || opUser.nickName == ''
            ? opUser.userID
            : opUser.nickName
        : opUser.friendRemark;
  }

  static String? _getMemberNickName(V2TimGroupMemberInfo e) {
    final friendRemark = e.friendRemark;
    final nameCard = e.nameCard;
    final nickName = e.nickName;
    final userID = e.userID;

    if (friendRemark != null && friendRemark != "") {
      return friendRemark;
    } else if (nameCard != null && nameCard != "") {
      return nameCard;
    } else if (nickName != null && nickName != "") {
      return nickName;
    } else {
      return userID;
    }
  }

  static String groupTipsMessageAbstract(V2TimGroupTipsElem groupTipsElem) {
    String displayMessage;
    final operationType = groupTipsElem.type;
    final operationMember = groupTipsElem.opMember;
    final memberList = groupTipsElem.memberList;
    final opUserNickName = _getOpUserNick(operationMember);
    switch (operationType) {
      case GroupTipsElemType.V2TIM_GROUP_TIPS_TYPE_GROUP_INFO_CHANGE:
        final groupChangeInfoList = groupTipsElem.groupChangeInfoList;
        final String? option7 = opUserNickName ?? "";
        final changedInfoString =
            groupChangeInfoList!.map((e) => _getGroupChangeType(e!)).join("、");
        displayMessage =
            TIM_t_para("{{option7}}修改", "$option7修改")(option7: option7) +
                changedInfoString;
        break;
      case GroupTipsElemType.V2TIM_GROUP_TIPS_TYPE_QUIT:
        final String? option6 = opUserNickName ?? "";
        displayMessage =
            TIM_t_para("{{option6}}退出群聊", "$option6退出群聊")(option6: option6);
        break;
      case GroupTipsElemType.V2TIM_GROUP_TIPS_TYPE_INVITE:
        final option5 =
            memberList!.map((e) => _getMemberNickName(e!).toString()).join("、");
        final inviteUser = _getOpUserNick(operationMember);
        displayMessage = '$inviteUser' +
            TIM_t_para("邀请{{option5}}加入群组", "邀请$option5加入群组")(option5: option5);
        break;
      case GroupTipsElemType.V2TIM_GROUP_TIPS_TYPE_KICKED:
        final option4 =
            memberList!.map((e) => _getMemberNickName(e!).toString()).join("、");
        final kickUser = _getOpUserNick(operationMember);
        displayMessage = '$kickUser' +
            TIM_t_para("将{{option4}}踢出群组", "将$option4踢出群组")(option4: option4);
        break;
      case GroupTipsElemType.V2TIM_GROUP_TIPS_TYPE_JOIN:
        final option3 =
            memberList!.map((e) => _getMemberNickName(e!).toString()).join("、");
        displayMessage = TIM_t_para("用户{{option3}}加入了群聊", "用户$option3加入了群聊")(
            option3: option3);
        break;
      case GroupTipsElemType.V2TIM_GROUP_TIPS_TYPE_MEMBER_INFO_CHANGE:
        displayMessage = groupTipsElem.memberList!.map((e) {
          final changedMember = groupTipsElem.memberChangeInfoList!
              .firstWhere((element) => element!.userID == e!.userID);
          final isMute = changedMember!.muteTime != 0;
          final option2 = _getMemberNickName(e!);
          final displayMessage = isMute ? TIM_t("禁言") : TIM_t("解除禁言");
          return TIM_t_para("{{option2}} 被", "$option2 被")(option2: option2) +
              displayMessage;
        }).join("、");
        break;
      case GroupTipsElemType.V2TIM_GROUP_TIPS_TYPE_SET_ADMIN:
        final adminMember =
            memberList!.map((e) => _getMemberNickName(e!).toString()).join("、");
        final opMember = _getOpUserNick(operationMember);
        displayMessage = '$opMember' +
            TIM_t_para("将 {{adminMember}} 设置为管理员", "将 $adminMember 设置为管理员")(
                adminMember: adminMember);
        break;
      case GroupTipsElemType.V2TIM_GROUP_TIPS_TYPE_CANCEL_ADMIN:
        final adminMember =
            memberList!.map((e) => _getMemberNickName(e!).toString()).join("、");
        final opMember = _getOpUserNick(operationMember);
        displayMessage = '$opMember' +
            TIM_t_para("将 {{adminMember}} 取消管理员", "将 $adminMember 取消管理员")(
                adminMember: adminMember);
        break;
      default:
        final String option2 = operationType.toString();
        displayMessage =
            TIM_t_para("系统消息 {{option2}}", "系统消息 $option2")(option2: option2);
        break;
    }
    return displayMessage;
  }

  static String formatVideoTime(int time) {
    List<int> times = [];
    if (time <= 0) return '0:01';
    if (time >= TimeConst.DAY_SEC) return '1d+';
    for (int idx = 0; idx < TimeConst.SEC_SERIES.length; idx++) {
      int sec = TimeConst.SEC_SERIES[idx];
      if (time >= sec) {
        times.add((time / sec).floor());
        time = time % sec;
      } else if (idx > 0) {
        times.add(0);
      }
    }
    times.add(time);
    String formatTime = times[0].toString();
    for (int idx = 1; idx < times.length; idx++) {
      if (times[idx] < 10) {
        formatTime += ':0${times[idx].toString()}';
      } else {
        formatTime += ':${times[idx].toString()}';
      }
    }
    return formatTime;
  }

  static String handleCustomMessageString(V2TimMessage message) {
    final customElem = message.customElem;
    final callingMessage = TIMUIKitCustomElem.getCallMessage(customElem);
    if (callingMessage != null) {
      // 如果是结束消息
      final isCallEnd = TIMUIKitCustomElem.isCallEndExist(callingMessage);
      String? option2 = "";
      if (isCallEnd) {
        option2 = TIMUIKitCustomElem.getShowTime(callingMessage.callEnd!);
      }
      return isCallEnd
          ? (TIM_t_para("通话时间：{{option2}}", "通话时间：$option2")(option2: option2))
          : (TIMUIKitCustomElem.getActionType(callingMessage.actionType!));
    } else {
      return TIM_t("自定义消息");
    }
  }

  static handleCustomMessage(V2TimMessage message, context) {
    // 这个函数应该返回String，目前已经切走用不上了，但是不敢删QAQ，就这么留着吧。
    final customElem = message.customElem;
    final callingMessage = TIMUIKitCustomElem.getCallMessage(customElem);
    if (callingMessage != null) {
      // 如果是结束消息
      final isCallEnd = TIMUIKitCustomElem.isCallEndExist(callingMessage);

      final isVoiceCall = callingMessage.callType == 1;

      String? option2 = "";
      if (isCallEnd) {
        option2 = TIMUIKitCustomElem.getShowTime(callingMessage.callEnd!);
      }

      return Row(
        mainAxisSize: MainAxisSize.min,
        children: [
          Padding(
            padding: const EdgeInsets.only(right: 4),
            child: Image.asset(
              isVoiceCall ? "images/voice_call.png" : "images/video_call.png",
              package: 'tim_ui_kit',
              height: 16,
              width: 16,
            ),
          ),
          isCallEnd
              ? Text(TIM_t_para("通话时间：{{option2}}", "通话时间：$option2")(
                  option2: option2))
              : Text(
                  TIMUIKitCustomElem.getActionType(callingMessage.actionType!)),
          // if (isFromSelf)
          //   Padding(
          //     padding: const EdgeInsets.only(left: 4),
          //     child: Image.asset(
          //       isVoiceCall
          //           ? "images/voice_call.png"
          //           : "images/video_call_self.png",
          //       package: 'tim_ui_kit',
          //       height: 16,
          //       width: 16,
          //     ),
          //   ),
        ],
      );
    } else {
      return const Text("[自定义]");
    }
  }

  static Widget wrapMessageTips(Widget child, TUITheme? theme) {
    return Container(
        margin: const EdgeInsets.symmetric(vertical: 10), child: child);
  }

  static String getAbstractMessage(V2TimMessage message) {
    final msgType = message.elemType;
    switch (msgType) {
      case MessageElemType.V2TIM_ELEM_TYPE_CUSTOM:
        return handleCustomMessageString(message);
      case MessageElemType.V2TIM_ELEM_TYPE_SOUND:
        return TIM_t("[语音]");
      case MessageElemType.V2TIM_ELEM_TYPE_TEXT:
        return message.textElem!.text as String;
      case MessageElemType.V2TIM_ELEM_TYPE_FACE:
        return TIM_t("[表情]");
      case MessageElemType.V2TIM_ELEM_TYPE_FILE:
        final String? option2 = message.fileElem!.fileName ?? "";
        return TIM_t_para("[文件] {{option2}}", "[文件] $option2")(
            option2: option2);
      case MessageElemType.V2TIM_ELEM_TYPE_GROUP_TIPS:
        return MessageUtils.groupTipsMessageAbstract(message.groupTipsElem!);
      case MessageElemType.V2TIM_ELEM_TYPE_IMAGE:
        return TIM_t("[图片]");
      case MessageElemType.V2TIM_ELEM_TYPE_VIDEO:
        return TIM_t("[视频]");
      case MessageElemType.V2TIM_ELEM_TYPE_LOCATION:
        return TIM_t("[位置]");
      case MessageElemType.V2TIM_ELEM_TYPE_MERGER:
        return TIM_t("[聊天记录]");
      default:
        return TIM_t("未知消息");
    }
  }

  static V2TimImage? getImageFromImgList(
      List<V2TimImage?>? list, List<String> order) {
    V2TimImage? img;
    try {
      for (String type in order) {
        img = list?.firstWhere(
            (e) =>
                e?.type == HistoryMessageDartConstant.V2_TIM_IMAGE_TYPES[type],
            orElse: () => null);
      }
    } catch (e) {
      print('getImageFromImgList error ${e.toString()}');
    }
    return img;
  }

  static String getDisplayName(V2TimMessage message) {
    final friendRemark = message.friendRemark ?? "";
    final nameCard = message.nameCard ?? "";
    final nickName = message.nickName ?? "";
    final sender = message.sender ?? "";
    final displayName = friendRemark.isNotEmpty
        ? friendRemark
        : nameCard.isNotEmpty
            ? nameCard
            : nickName.isNotEmpty
                ? nickName
                : sender;
    return displayName.toString();
  }

  static Future<V2TimValueCallback<V2TimMessage>?> handleMessageError(
      Future<V2TimValueCallback<V2TimMessage>?> fun,
      BuildContext context) async {
    final res = await fun;
    return handleMessageErrorCode(res, context);
  }

  static V2TimValueCallback<V2TimMessage>? handleMessageErrorCode(
      V2TimValueCallback<V2TimMessage>? sendMsgRes, BuildContext context) {
    if (sendMsgRes == null) return null;

    return sendMsgRes;
  }
}
文件：/im-flutter-uikit/package_src/tim_ui_kit/lib/ui/utils/optimize_utils.dart
import 'dart:async';

class OptimizeUtils {
  static throttle(Function func, int milliseconds) {
    bool enable = true;
    return (val) {
      if (enable == true) {
        enable = false;
        Future.delayed(Duration(milliseconds: milliseconds), () {
          enable = true;
          func(val);
        });
      }
    };
  }

  static debounce(
    Function func, [
    Duration delay = const Duration(milliseconds: 100),
  ]) {
    Timer? timer;
    return (val) {
      if (timer != null) {
        timer?.cancel();
      }

      timer = Timer(delay, () {
        func(val);
      });
    };
  }
}
文件：/im-flutter-uikit/package_src/tim_ui_kit/lib/ui/utils/permission.dart
// ignore_for_file: unused_import

import 'dart:io';

import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:package_info_plus/package_info_plus.dart';
import 'package:permission_handler/permission_handler.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:tencent_im_base/tencent_im_base.dart';
import 'package:tim_ui_kit/base_widgets/tim_ui_kit_base.dart';
import 'package:tim_ui_kit/base_widgets/tim_ui_kit_state.dart';
import 'package:tim_ui_kit/ui/utils/platform.dart';
import 'package:tim_ui_kit/ui/utils/tui_theme.dart';

class PermissionRequestInfo extends StatefulWidget {
  final Function removeOverLay;
  final int permissionType;
  final String appName;

  const PermissionRequestInfo(
      {Key? key,
      required this.removeOverLay,
      required this.permissionType,
      required this.appName})
      : super(key: key);

  @override
  State<StatefulWidget> createState() => _PermissionRequestInfo();
}

class _PermissionRequestInfo extends TIMUIKitState<PermissionRequestInfo>
    with WidgetsBindingObserver {
  @override
  void initState() {
    super.initState();
    WidgetsBinding.instance?.addObserver(this);
  }

  @override
  void dispose() {
    super.dispose();
    WidgetsBinding.instance?.removeObserver(this);
  }

  @override
  void didChangeAppLifecycleState(AppLifecycleState state) {
    super.didChangeAppLifecycleState(state);
    if (state == AppLifecycleState.resumed) {
      widget.removeOverLay();
    }
  }

  @override
  Widget tuiBuild(BuildContext context, TUIKitBuildValue value) {
    final permission = {
      1: {
        "name": TIM_t("相机"),
        "icon": "images/chat_permission_icon_camera.png",
        "text": TIM_t("为方便您将所拍摄的照片或视频发送给朋友，以及进行视频通话，请允许我们访问摄像头进行拍摄照片和视频。")
      },
      7: {
        "name": TIM_t("麦克风"),
        "icon": "images/chat_permission_icon_mic.png",
        "text": TIM_t("为方便您发送语音消息、拍摄视频以及音视频通话，请允许我们使用麦克风进行录音。")
      },
      15: {
        "name": TIM_t("存储"),
        "icon": "images/chat_permission_icon_file.png",
        "text": TIM_t("为方便您查看和选择相册里的图片视频发送给朋友，以及保存内容到设备，请允许我们访问您设备上的照片、媒体内容。")
      },
    }[widget.permissionType];
    final option2 = permission?["name"] ?? "";
    return Stack(
      children: [
        Positioned(
          child: SafeArea(
            child: Opacity(
              opacity: 0.7,
              child: Container(
                color: Colors.black,
                padding: const EdgeInsets.symmetric(horizontal: 40),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.center,
                  children: [
                    SizedBox(
                      height: 50,
                      width: 50,
                      child: Image.asset(
                        permission?["icon"] ?? "",
                        package: "tim_ui_kit",
                      ),
                    ),
                    const SizedBox(
                      height: 10,
                    ),
                    Text(
                      TIM_t(widget.appName) +
                          TIM_t_para(" 申请获取{{option2}}", " 申请获取$option2")(
                              option2: option2) +
                          TIM_t("权限"),
                      style: const TextStyle(color: Colors.white, fontSize: 18),
                    ),
                    const SizedBox(
                      height: 20,
                    ),
                    Text(
                      permission?["text"] ?? "",
                      style:
                          const TextStyle(color: Colors.white70, fontSize: 16),
                    )
                  ],
                ),
              ),
            ),
          ),
          left: 0,
          right: 0,
          bottom: 0,
          top: 0,
        )
      ],
    );
  }
}

class Permissions {
  static List<String> _names(BuildContext context) {
    return <String>[
      TIM_t("日历"),
      TIM_t("相机"),
      TIM_t("联系人"),
      TIM_t("位置"),
      'locationAlways',
      'locationWhenInUse',
      'mediaLibrary',
      TIM_t("麦克风"),
      'phone',
      TIM_t("照片"),
      TIM_t("相册写入"),
      'reminders',
      'sensors',
      'sms',
      'speech',
      TIM_t("文件"),
      'ignoreBatteryOptimizations',
      'notification',
      'access_media_location',
      'activity_recognition',
      'unknown',
      'bluetooth',
      'manageExternalStorage',
      'systemAlertWindow',
      'requestInstallPackages',
      'appTrackingTransparency',
      'criticalAlerts',
      'accessNotificationPolicy',
      'bluetoothScan',
      'bluetoothAdvertise',
      'bluetoothConnect',
    ];
  }

  static String _permissionText(
      BuildContext context, String appName, int value) {
    final _prefix = TIM_t("需要授予");
    final _postfixList = <String>[
      TIM_t("日历"),
      TIM_t(" 相机权限，以正常使用拍摄图片视频、视频通话等功能。"),
      TIM_t("联系人"),
      TIM_t("位置"),
      'locationAlways',
      'locationWhenInUse',
      'mediaLibrary',
      TIM_t(" 麦克风权限，以正常使用发送语音消息、拍摄视频、音视频通话等功能。"),
      'phone',
      TIM_t(" 访问照片权限，以正常使用发送图片、视频等功能。"),
      TIM_t(" 访问相册写入权限，以正常使用存储图片、视频等功能。"),
      'reminders',
      'sensors',
      'sms',
      'speech',
      TIM_t(" 文件读写权限，以正常使用在聊天功能中的图片查看、选择能力和发送文件的能力。"),
      'ignoreBatteryOptimizations',
      'notification',
      'access_media_location',
      'activity_recognition',
      'unknown',
      'bluetooth',
      'manageExternalStorage',
      'systemAlertWindow',
      'requestInstallPackages',
      'appTrackingTransparency',
      'criticalAlerts',
      'accessNotificationPolicy',
      'bluetoothScan',
      'bluetoothAdvertise',
      'bluetoothConnect',
    ];
    return _prefix + appName + _postfixList[value];
  }

  static Future<bool> checkPermission(BuildContext context, int value) async {
    final status = await Permission.byValue(value).status;
    if (status.isGranted) {
      return true;
    }
    final bool? shouldRequestPermission =
        await showPermissionConfirmDialog(context, value);
    if (shouldRequestPermission != null && shouldRequestPermission) {
      return await Permission.byValue(value).request().isGranted;
    }
    return shouldRequestPermission ?? false;
  }

  static Future<bool> checkPermissionSetBefore(int value) async {
    Future<SharedPreferences> _prefs = SharedPreferences.getInstance();
    SharedPreferences prefs = await _prefs;
    final _hasPermissionSetBefore = prefs.getBool("permission$value");
    return _hasPermissionSetBefore ?? false;
  }

  static Future<bool> setLocalPermission(int value) async {
    Future<SharedPreferences> _prefs = SharedPreferences.getInstance();
    SharedPreferences prefs = await _prefs;
    return await prefs.setBool("permission$value", true);
  }

  static showPermissionRequestInfoDialog(BuildContext context, value) async {
    PackageInfo packageInfo = await PackageInfo.fromPlatform();
    String appName = packageInfo.appName;
    OverlayEntry? _entry;
    final entry = OverlayEntry(builder: (context) {
      return PermissionRequestInfo(
        appName: appName,
        removeOverLay: () => _entry?.remove(),
        permissionType: value,
      );
    });
    _entry = entry;
    Overlay.of(context)?.insert(entry);
  }

  static Future<bool?> showPermissionConfirmDialog(
      BuildContext context, value) async {
    final platformUtils = PlatformUtils();
    // 第一次直接走系统文案
    if (!await checkPermissionSetBefore(value)) {
      await setLocalPermission(value);
      if (platformUtils.isAndroid) {
        showPermissionRequestInfoDialog(context, value);
      }
      return true;
    }

    PackageInfo packageInfo = await PackageInfo.fromPlatform();
    String appName = packageInfo.appName;
    final option2 = _names(context)[value];
    final permissionText = _permissionText(context, appName, value);
    void closeDialog() {
      Navigator.of(context).pop(false);
    }

    void getPermission() async {
      Navigator.of(context).pop(false);
      openAppSettings();
    }

    return showDialog<bool>(
      context: context,
      builder: (context) {
        return platformUtils.isIOS
            ? CupertinoAlertDialog(
                title: Text("“$appName”" +
                    TIM_t_para(" 想访问您的{{option2}}", " 想访问您的$option2")(
                        option2: option2)),
                content: Text(permissionText),
                actions: <Widget>[
                  CupertinoDialogAction(
                    child: Text(TIM_t("以后再说")),
                    onPressed: closeDialog, // 关闭对话框
                  ),
                  CupertinoDialogAction(
                    child: Text(TIM_t("去开启")),
                    onPressed: getPermission,
                  ),
                ],
              )
            : AlertDialog(
                content: Text(permissionText),
                actions: <Widget>[
                  const Divider(),
                  SizedBox(
                    height: 48,
                    child: Row(
                      mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                      children: [
                        Expanded(
                          child: TextButton(
                            child: Text(TIM_t("以后再说"),
                                style: const TextStyle(color: Colors.black)),
                            onPressed: closeDialog, // 关闭对话框
                          ),
                        ),
                        const VerticalDivider(),
                        Expanded(
                          child: TextButton(
                            child: Text(TIM_t("去开启")),
                            onPressed: getPermission,
                          ),
                        )
                      ],
                    ),
                  )
                ],
              );
      },
    );
  }
}
文件：/im-flutter-uikit/package_src/tim_ui_kit/lib/ui/utils/platform.dart
import 'dart:io';

class PlatformUtils {
  PlatformUtils._internal();
  static late bool _isAndroid;
  static late bool _isIos;
  static bool _isInstantiation = false;

  factory PlatformUtils() {
    if (!_isInstantiation) {
      _isAndroid = Platform.isAndroid;
      _isIos = Platform.isIOS;
      _isInstantiation = true;
    }

    return _instance;
  }

  static late final PlatformUtils _instance = PlatformUtils._internal();

  get isAndroid {
    return _isAndroid;
  }

  get isIOS {
    return _isIos;
  }
}
文件：/im-flutter-uikit/package_src/tim_ui_kit/lib/ui/utils/route.dart
import 'package:flutter/cupertino.dart';

class FadeRoute extends PageRouteBuilder {
  final Widget page;
  FadeRoute({required this.page})
      : super(
          pageBuilder: (
            BuildContext context,
            Animation<double> animation,
            Animation<double> secondaryAnimation,
          ) =>
              page,
          transitionsBuilder: (
            BuildContext context,
            Animation<double> animation,
            Animation<double> secondaryAnimation,
            Widget child,
          ) =>
              FadeTransition(
            opacity: animation,
            child: child,
          ),
        );
}
文件：/im-flutter-uikit/package_src/tim_ui_kit/lib/ui/utils/shared_theme.dart
// ignore_for_file: unused_import

import 'package:flutter/material.dart';
import 'package:tim_ui_kit/tim_ui_kit.dart';

// class SharedThemeWidget extends InheritedWidget {
//   final TUITheme theme;

//   const SharedThemeWidget(
//       {Key? key, required Widget child, required this.theme})
//       : super(key: key, child: child);

//   //定义一个便捷方法，方便子树中的widget获取共享数据
//   static SharedThemeWidget? of(BuildContext context) {
//     return context.dependOnInheritedWidgetOfExactType<SharedThemeWidget>();
//   }

//   @override
//   bool updateShouldNotify(covariant SharedThemeWidget oldWidget) {
//     return oldWidget.theme != theme;
//   }
// }
文件：/im-flutter-uikit/package_src/tim_ui_kit/lib/ui/utils/sound_record.dart
import 'dart:async';

import 'package:flutter_plugin_record_plus/const/play_state.dart';
import 'package:flutter_plugin_record_plus/const/response.dart';
import 'package:flutter_plugin_record_plus/index.dart';

typedef PlayStateListener = void Function(PlayState playState);
typedef SoundInterruptListener = void Function();
typedef ResponseListener = void Function(RecordResponse recordResponse);

class SoundPlayer {
  static final FlutterPluginRecord _recorder = FlutterPluginRecord();
  static SoundInterruptListener? _soundInterruptListener;
  static bool isInited = false;

  static initSoundPlayer() {
    if (!isInited) {
      _recorder.init();
      isInited = true;
    }
  }

  static play({required String url}) {
    _recorder.stopPlay();
    if (_soundInterruptListener != null) {
      _soundInterruptListener!();
    }
    _recorder.playByPath(url, 'url');
  }

  static stop() {
    _recorder.stopPlay();
  }

  static dispose() {
    _recorder.dispose();
  }

  static StreamSubscription<PlayState> playStateListener(
          {required PlayStateListener listener}) =>
      _recorder.responsePlayStateController.listen(listener);

  static setSoundInterruptListener(SoundInterruptListener listener) {
    _soundInterruptListener = listener;
  }

  static removeSoundInterruptListener() {
    _soundInterruptListener = null;
  }

  static StreamSubscription<RecordResponse> responseListener(
          ResponseListener listener) =>
      _recorder.response.listen(listener);

  static StreamSubscription<RecordResponse> responseFromAmplitudeListener(
          ResponseListener listener) =>
      _recorder.responseFromAmplitude.listen(listener);

  static startRecord() {
    _recorder.start();
  }

  static stopRecord() {
    _recorder.stop();
  }
}
文件：/im-flutter-uikit/package_src/tim_ui_kit/lib/ui/utils/time_ago.dart
// ignore_for_file: prefer_typing_uninitialized_variables

import 'package:intl/intl.dart';
import 'package:tencent_im_base/i18n/i18n_utils.dart';

class TimeAgo {
  List<String> dayMap() {
    return [
      TIM_t("昨天"),
      TIM_t("前天"),
    ];
  }

  List<String> daysMap() {
    return [
      TIM_t("星期天"),
      TIM_t("星期一"),
      TIM_t("星期二"),
      TIM_t("星期三"),
      TIM_t("星期四"),
      TIM_t("星期五"),
      TIM_t("星期六")
    ];
  }

  List<String> weekdayMap() {
    return [
      '',
      TIM_t("星期一"),
      TIM_t("星期二"),
      TIM_t("星期三"),
      TIM_t("星期四"),
      TIM_t("星期五"),
      TIM_t("星期六"),
      TIM_t("星期天")
    ];
  }

  String getYearMounthDate(DateTime dateTime) {
    String month = dateTime.month.toString();
    String date = dateTime.day.toString();
    return dateTime.year.toString() +
        '/' +
        (month.length == 1 ? '0' : '') +
        month +
        '/' +
        (date.length == 1 ? '0' : '') +
        date;
  }

  String getMounthDate(DateTime dateTime) {
    String month = dateTime.month.toString();
    String date = dateTime.day.toString();
    return (month.length == 1 ? '0' : '') +
        month +
        '/' +
        (date.length == 1 ? '0' : '') +
        date;
  }

  String getTimeStringForChat(int timeStamp) {
    final formatedTimeStamp = timeStamp * 1000;
    final DateTime date =
        DateTime.fromMillisecondsSinceEpoch(formatedTimeStamp);
    final Duration duration = DateTime.now().difference(date);

    final diffDays = duration.inDays;
    final diffMinutes = duration.inMinutes;
    var res;
    // 一个礼拜之内
    if (diffDays > 0 && diffDays < 7) {
      if (diffDays <= 2) {
        res = dayMap()[diffDays - 1];
      } else {
        res = daysMap()[date.weekday];
      }
    } else if (diffDays > 7) {
      //当年内
      if (date.year == DateTime.now().year) {
        res = getMounthDate(date);
      } else {
        res = getYearMounthDate(date);
      }
    } else {
      if (diffMinutes > 1) {
        if (diffMinutes < 60) {
          final String option2 = diffMinutes.toString();
          res = TIM_t_para("{{option2}} 分钟前", "$option2 分钟前")(option2: option2);
        } else {
          final prefix = date.hour > 12 ? TIM_t("下午") : TIM_t("上午");
          final timeStr = DateFormat('hh:mm').format(date);
          res = "$prefix $timeStr";
        }
      } else {
        res = TIM_t("现在");
      }
    }

    return res;
  }

  String getTimeForMessage(int timeStamp) {
    var nowTime = DateTime.now();
    nowTime = DateTime(nowTime.year, nowTime.month, nowTime.day);
    var ftime = DateTime.fromMillisecondsSinceEpoch(timeStamp * 1000);
    var preFix = ftime.hour >= 12 ? TIM_t("下午") : TIM_t("上午");
    final timeStr = DateFormat('hh:mm').format(ftime);
    // 一年外 年月日 + 上/下午 + 时间 (12小时制)
    if (nowTime.year != ftime.year) {
      return '${DateFormat('yyyy-MM-dd').format(ftime)} $preFix $timeStr';
    }
    // 一年内一周外 月日 + 上/下午 + 时间 (12小时制）
    if (ftime.isBefore(nowTime.subtract(const Duration(days: 7)))) {
      return '${DateFormat('MM-dd').format(ftime)} $preFix $timeStr';
    }
    // 一周内一天外 星期 + 上/下午 + 时间 (12小时制）
    if (ftime.isBefore(nowTime.subtract(const Duration(days: 1)))) {
      return '${weekdayMap()[ftime.weekday]} $preFix $timeStr';
    }
    // 昨日 昨天 + 上/下午 + 时间 (12小时制)
    if (nowTime.day != ftime.day) {
      String option2 = '$preFix $timeStr';
      return TIM_t_para("昨天 {{option2}}", "昨天 $option2")(option2: option2);
    }
    // 同年月日 上/下午 + 时间 (12小时制)
    return '$preFix $timeStr';
  }
}
文件：/im-flutter-uikit/package_src/tim_ui_kit/lib/ui/utils/tui_theme.dart
import 'package:flutter/material.dart';

class TUITheme {
  const TUITheme({
    this.primaryColor = const Color(0xFF00449E),
    this.secondaryColor = const Color(0xFF147AFF),
    this.infoColor = const Color(0xFFFF9C19),
    this.weakBackgroundColor = const Color(0xFFEDEDED),
    this.weakDividerColor = const Color(0xFFE5E6E9),
    this.weakTextColor = const Color(0xFF999999),
    this.darkTextColor = const Color(0xFF444444),
    this.lightPrimaryColor = const Color(0xFF3371CD),
    this.textColor,
    this.cautionColor = const Color(0xFFFF584C),
    this.ownerColor = Colors.orange,
    this.adminColor = Colors.blue,
  });

  // 应用主色
  // Primary Color For The App
  final Color? primaryColor;
  // 应用次色
  // Secondary Color For The App
  final Color? secondaryColor;
  // 提示颜色，用于次级操作或提示
  // Info Color, Used For Secondary Action Or Info
  final Color? infoColor;
  // 浅背景颜色，比主背景颜色浅，用于填充缝隙或阴影
  // Weak Background Color, Lighter Than Main Background, Used For Marginal Space Or Shadowy Space
  final Color? weakBackgroundColor;
  // 浅分割线颜色，用于分割线或边框
  // Weak Divider Color, Used For Divider Or Border
  final Color? weakDividerColor;
  // 浅字色
  // Weak Text Color
  final Color? weakTextColor;
  // 深字色
  // Dark Text Color
  final Color? darkTextColor;
  // 浅主色，用于AppBar或Panels
  // Light Primary Color, Used For AppBar Or Several Panels
  final Color? lightPrimaryColor;
  // 字色
  // TextColor
  final Color? textColor;
  // 警示色，用于危险操作
  // Caution Color, Used For Warning Actions
  final Color? cautionColor;
  // 群主标识色
  // Group Owner Identification Color
  final Color? ownerColor;
  // 群管理员标识色
  // Group Admin Identification Color
  final Color? adminColor;

  static const TUITheme light = TUITheme();
  static const TUITheme dark = TUITheme();

  MaterialColor get primaryMaterialColor => createMaterialColor(primaryColor!);
  MaterialColor get lightPrimaryMaterialColor =>
      createMaterialColor(lightPrimaryColor!);

  TUITheme.fromJson(Map<String, dynamic> json)
      : primaryColor = json['primaryColor'] as Color?,
        secondaryColor = json['secondaryColor'] as Color?,
        infoColor = json['infoColor'] as Color?,
        weakBackgroundColor = json['weakBackgroundColor'] as Color?,
        weakDividerColor = json['weakDividerColor'] as Color?,
        weakTextColor = json['weakTextColor'] as Color?,
        darkTextColor = json['darkTextColor'] as Color?,
        lightPrimaryColor = json['lightPrimaryColor'] as Color?,
        textColor = json['textColor'] as Color?,
        cautionColor = json['cautionColor'] as Color?,
        ownerColor = json['ownerColor'] as Color?,
        adminColor = json['adminColor'] as Color?;

  toJson() => <String, dynamic>{
        'primaryColor': primaryColor,
        'secondaryColor': secondaryColor,
        'infoColor': infoColor,
        'weakBackgroundColor': weakBackgroundColor,
        'weakDividerColor': weakDividerColor,
        'weakTextColor': weakTextColor,
        'darkTextColor': darkTextColor,
        'lightPrimaryColor': lightPrimaryColor,
        'textColor': textColor,
        'cautionColor': cautionColor,
        'ownerColor': ownerColor,
        'adminColor': adminColor
      };

  MaterialColor createMaterialColor(Color color) {
    List strengths = <double>[.05];
    Map<int, Color> swatch = <int, Color>{};
    final int r = color.red, g = color.green, b = color.blue;

    for (int i = 1; i < 10; i++) {
      strengths.add(0.1 * i);
    }
    for (var strength in strengths) {
      final double ds = 0.5 - strength;
      swatch[(strength * 1000).round()] = Color.fromRGBO(
        r + ((ds < 0 ? r : (255 - r)) * ds).round(),
        g + ((ds < 0 ? g : (255 - g)) * ds).round(),
        b + ((ds < 0 ? b : (255 - b)) * ds).round(),
        1,
      );
    }
    return MaterialColor(color.value, swatch);
  }
}
文件：/im-flutter-uikit/package_src/tim_ui_kit/lib/ui/views/TIMUIKitAddFriend/tim_uikit_add_friend.dart
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:tencent_im_base/tencent_im_base.dart';
import 'package:tim_ui_kit/base_widgets/tim_ui_kit_base.dart';
import 'package:tim_ui_kit/base_widgets/tim_ui_kit_state.dart';
import 'package:tim_ui_kit/business_logic/life_cycle/add_friend_life_cycle.dart';
import 'package:tim_ui_kit/business_logic/view_models/tui_add_friend_view_model.dart';
import 'package:tim_ui_kit/ui/utils/tui_theme.dart';
import 'package:tim_ui_kit/ui/views/TIMUIKitAddFriend/tim_uikit_send_application.dart';
import 'package:tim_ui_kit/ui/widgets/avatar.dart';

class TIMUIKitAddFriend extends StatefulWidget {
  final bool? isShowDefaultGroup;

  /// The life cycle hooks for adding friends and contact business logic
  final AddFriendLifeCycle? lifeCycle;
  const TIMUIKitAddFriend(
      {Key? key, this.isShowDefaultGroup = false, this.lifeCycle})
      : super(key: key);

  @override
  State<StatefulWidget> createState() => _TIMUIKitAddFriendState();
}

class _TIMUIKitAddFriendState extends TIMUIKitState<TIMUIKitAddFriend> {
  final TextEditingController _controller = TextEditingController();
  final TUIAddFriendViewModel _addFriendViewModel = TUIAddFriendViewModel();
  final FocusNode _focusNode = FocusNode();
  bool isFocused = false;
  bool showResult = false;

  Widget _searchResultItemBuilder(
      V2TimUserFullInfo friendInfo, TUITheme theme) {
    final faceUrl = friendInfo.faceUrl ?? "";
    final userID = friendInfo.userID ?? "";
    final showName = friendInfo.nickName ?? userID;
    return InkWell(
      onTap: () {
        Navigator.pushReplacement(
            context,
            MaterialPageRoute(
                builder: (context) => SendApplication(
                    isShowDefaultGroup: widget.isShowDefaultGroup ?? false,
                    friendInfo: friendInfo,
                    model: _addFriendViewModel)));
      },
      child: Container(
        color: Colors.white,
        padding: const EdgeInsets.all(12),
        child: Row(
          // crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Container(
              width: 48,
              height: 48,
              margin: const EdgeInsets.only(right: 12),
              child: Avatar(faceUrl: faceUrl, showName: showName),
            ),
            Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  showName,
                  style: TextStyle(color: theme.darkTextColor, fontSize: 18),
                ),
                const SizedBox(
                  height: 4,
                ),
                Text(
                  "ID: $userID",
                  style: TextStyle(fontSize: 12, color: theme.weakTextColor),
                )
              ],
            ),
          ],
        ),
      ),
    );
  }

  List<Widget> _searchResultBuilder(
      List<V2TimUserFullInfo>? searchResult, TUITheme theme) {
    final noResult = searchResult == null || searchResult.isEmpty;
    if (noResult) {
      return [
        Center(
          child: Text(TIM_t("用户不存在")),
        )
      ];
    }
    return searchResult.map((e) => _searchResultItemBuilder(e, theme)).toList();
  }

  @override
  void initState() {
    super.initState();
    _focusNode.addListener(() {
      final _isFocused = _focusNode.hasFocus;
      isFocused = _isFocused;
      setState(() {});
    });
  }

  @override
  void dispose() {
    super.dispose();
  }

  @override
  Widget tuiBuild(BuildContext context, TUIKitBuildValue value) {
    final TUITheme theme = value.theme;

    return MultiProvider(
      providers: [
        ChangeNotifierProvider.value(value: _addFriendViewModel),
      ],
      builder: (BuildContext context, Widget? w) {
        final model = Provider.of<TUIAddFriendViewModel>(context);
        final userID = model.loginUserInfo?.userID ?? "";
        String option2 = userID;
        final searchResult = model.friendInfoResult;
        model.lifeCycle = widget.lifeCycle;
        return Column(
          children: [
            Padding(
              padding: const EdgeInsets.symmetric(vertical: 10, horizontal: 10),
              child: Row(
                children: [
                  Expanded(
                      child: TextField(
                    focusNode: _focusNode,
                    controller: _controller,
                    onChanged: (value) {
                      if (value.trim().isEmpty) {
                        setState(() {
                          showResult = false;
                        });
                      }
                    },
                    textInputAction: TextInputAction.search,
                    onSubmitted: (_) {
                      final searchParams = _controller.text;
                      if (searchParams.trim().isNotEmpty) {
                        model.searchFriend(searchParams);
                        showResult = true;
                        _focusNode.requestFocus();
                        setState(() {});
                      }
                    },
                    decoration: InputDecoration(
                        prefixIcon: Icon(
                          Icons.search_outlined,
                          color: theme.weakTextColor,
                        ),
                        border: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(8),
                          borderSide: const BorderSide(
                            width: 0,
                            style: BorderStyle.none,
                          ),
                        ),
                        contentPadding: EdgeInsets.zero,
                        hintStyle: const TextStyle(
                          color: Color(0xffAEA4A3),
                        ),
                        fillColor: Colors.white,
                        filled: true,
                        hintText: TIM_t("搜索用户 ID")),
                  )),
                  AnimatedContainer(
                    duration: const Duration(milliseconds: 200),
                    width: isFocused ? 50 : 0,
                    child: TextButton(
                        onPressed: () {
                          final searchParams = _controller.text;
                          if (searchParams.trim().isNotEmpty) {
                            model.searchFriend(searchParams);
                            showResult = true;
                            setState(() {});
                          }
                        },
                        child: Text(
                          TIM_t("搜索"),
                          softWrap: false,
                          style: const TextStyle(color: Colors.black),
                        )),
                  )
                ],
              ),
            ),
            if (!isFocused)
              Center(
                child: Text(
                    TIM_t_para("我的用户ID: {{option2}}", "我的用户ID: $option2")(
                        option2: option2)),
              ),
            if (showResult)
              Expanded(
                child: SingleChildScrollView(
                  child: Column(
                    children: _searchResultBuilder(searchResult, theme),
                  ),
                ),
              )
          ],
        );
      },
    );
  }
}
文件：/im-flutter-uikit/package_src/tim_ui_kit/lib/ui/views/TIMUIKitAddFriend/tim_uikit_send_application.dart
import 'package:flutter/material.dart';
import 'package:tencent_im_base/tencent_im_base.dart';
import 'package:tim_ui_kit/base_widgets/tim_ui_kit_state.dart';
import 'package:tim_ui_kit/business_logic/view_models/tui_add_friend_view_model.dart';
import 'package:tim_ui_kit/ui/utils/color.dart';
import 'package:tim_ui_kit/ui/utils/tui_theme.dart';
import 'package:tim_ui_kit/ui/widgets/avatar.dart';
import 'package:tim_ui_kit/base_widgets/tim_ui_kit_base.dart';

class SendApplication extends StatefulWidget {
  final V2TimUserFullInfo friendInfo;
  final TUIAddFriendViewModel model;
  final bool? isShowDefaultGroup;
  const SendApplication(
      {Key? key,
      required this.friendInfo,
      required this.model,
      this.isShowDefaultGroup = false})
      : super(key: key);

  @override
  State<StatefulWidget> createState() => _SendApplicationState();
}

class _SendApplicationState extends TIMUIKitState<SendApplication> {
  final TextEditingController _verficationController = TextEditingController();
  final TextEditingController _nickNameController = TextEditingController();

  @override
  void initState() {
    super.initState();
    final showName = widget.model.loginUserInfo?.nickName ??
        widget.model.loginUserInfo?.userID;
    _verficationController.text = "我是: $showName";
  }

  @override
  Widget tuiBuild(BuildContext context, TUIKitBuildValue value) {
    final TUITheme theme = value.theme;

    final faceUrl = widget.friendInfo.faceUrl ?? "";
    final userID = widget.friendInfo.userID ?? "";
    final showName = widget.friendInfo.nickName ?? userID;
    final option2 = widget.friendInfo.selfSignature ?? "";
    return Scaffold(
      appBar: AppBar(
        title: Text(
          TIM_t("添加好友"),
          style: const TextStyle(color: Colors.white, fontSize: 17),
        ),
        shadowColor: Colors.white,
        flexibleSpace: Container(
          decoration: BoxDecoration(
            gradient: LinearGradient(colors: [
              theme.lightPrimaryColor ?? CommonColor.lightPrimaryColor,
              theme.primaryColor ?? CommonColor.primaryColor
            ]),
          ),
        ),
        iconTheme: const IconThemeData(
          color: Colors.white,
        ),
      ),
      body: SingleChildScrollView(
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Container(
              color: Colors.white,
              padding: const EdgeInsets.symmetric(vertical: 12, horizontal: 16),
              margin: const EdgeInsets.only(bottom: 12),
              child: Row(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Container(
                    width: 48,
                    height: 48,
                    margin: const EdgeInsets.only(right: 12),
                    child: Avatar(faceUrl: faceUrl, showName: showName),
                  ),
                  Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(
                        showName,
                        style:
                            TextStyle(color: theme.darkTextColor, fontSize: 18),
                      ),
                      const SizedBox(
                        height: 4,
                      ),
                      Text(
                        "ID: $userID",
                        style:
                            TextStyle(fontSize: 13, color: theme.weakTextColor),
                      ),
                      const SizedBox(
                        height: 4,
                      ),
                      Text(
                        TIM_t_para("个性签名: {{option2}}", "个性签名: $option2")(
                            option2: option2),
                        style:
                            TextStyle(fontSize: 13, color: theme.weakTextColor),
                      ),
                    ],
                  )
                ],
              ),
            ),
            Padding(
              padding: const EdgeInsets.only(left: 16.0),
              child: Text(
                TIM_t("填写验证信息"),
                style: TextStyle(fontSize: 16, color: theme.weakTextColor),
              ),
            ),
            Container(
              margin: const EdgeInsets.only(top: 6, bottom: 12),
              padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 12),
              color: Colors.white,
              child: TextField(
                  // minLines: 1,
                  maxLines: 4,
                  controller: _verficationController,
                  keyboardType: TextInputType.multiline,
                  decoration: const InputDecoration(
                      border: InputBorder.none,
                      hintStyle: TextStyle(
                        color: Color(0xFFAEA4A3),
                      ),
                      hintText: '')),
            ),
            Padding(
              padding: const EdgeInsets.only(left: 16.0),
              child: Text(
                TIM_t("请填写备注"),
                style: TextStyle(fontSize: 16, color: theme.weakTextColor),
              ),
            ),
            Container(
              color: Colors.white,
              padding: const EdgeInsets.symmetric(horizontal: 16),
              margin: const EdgeInsets.only(top: 6),
              child: Row(
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                children: [
                  Text(
                    TIM_t("备注"),
                    style: TextStyle(color: theme.darkTextColor, fontSize: 16),
                  ),
                  SizedBox(
                    width: 50,
                    child: TextField(
                        controller: _nickNameController,
                        decoration: const InputDecoration(
                            contentPadding: EdgeInsets.zero,
                            border: InputBorder.none,
                            hintStyle: TextStyle(
                              color: Color(0xFFAEA4A3),
                            ),
                            hintText: '')),
                  )
                ],
              ),
            ),
            const Divider(
              height: 1,
            ),
            if (widget.isShowDefaultGroup == true)
              Container(
                color: Colors.white,
                padding:
                    const EdgeInsets.symmetric(horizontal: 16, vertical: 12),
                child: Row(
                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                  children: [
                    Text(
                      TIM_t("分组"),
                      style:
                          TextStyle(color: theme.darkTextColor, fontSize: 16),
                    ),
                    Text(
                      TIM_t("我的好友"),
                      style:
                          TextStyle(color: theme.darkTextColor, fontSize: 16),
                    )
                  ],
                ),
              ),
            Container(
              color: Colors.white,
              width: double.infinity,
              margin: const EdgeInsets.only(top: 10),
              child: TextButton(
                  onPressed: () async {
                    final remark = _nickNameController.text;
                    final addWording = _verficationController.text;
                    final friendGroup = TIM_t("我的好友");
                    final res = await widget.model
                        .addFriend(userID, remark, friendGroup, addWording);
                    if (res?.code == 0) {
                      onTIMCallback(TIMCallback(
                          type: TIMCallbackType.INFO,
                          infoRecommendText: TIM_t("好友申请已发送"),
                          infoCode: 6660101));
                    }
                  },
                  child: Text(TIM_t("发送"))),
            )
          ],
        ),
      ),
    );
  }
}
文件：/im-flutter-uikit/package_src/tim_ui_kit/lib/ui/views/TIMUIKitAddGroup/tim_uikit_add_group.dart
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:tencent_im_base/tencent_im_base.dart';
import 'package:tim_ui_kit/base_widgets/tim_ui_kit_state.dart';
import 'package:tim_ui_kit/business_logic/life_cycle/add_group_life_cycle.dart';
import 'package:tim_ui_kit/business_logic/view_models/tui_add_group_view_model.dart';
import 'package:tim_ui_kit/ui/utils/tui_theme.dart';
import 'package:tim_ui_kit/ui/views/TIMUIKitAddGroup/tim_uikit_send_application.dart';
import 'package:tim_ui_kit/ui/widgets/avatar.dart';
import 'package:tim_ui_kit/base_widgets/tim_ui_kit_base.dart';

class TIMUIKitAddGroup extends StatefulWidget {
  /// The life cycle hooks for adding group business logic
  final AddGroupLifeCycle? lifeCycle;
  const TIMUIKitAddGroup({Key? key, this.lifeCycle}) : super(key: key);

  @override
  State<StatefulWidget> createState() => _TIMUIKitAddGroupState();
}

class _TIMUIKitAddGroupState extends TIMUIKitState<TIMUIKitAddGroup> {
  final TextEditingController _controller = TextEditingController();
  final TUIAddGroupViewModel _addGroupViewModel = TUIAddGroupViewModel();
  final FocusNode _focusNode = FocusNode();
  bool isFocused = false;
  bool showResult = false;

  String _getGroupType(String type) {
    String groupType;
    switch (type) {
      case GroupType.AVChatRoom:
        groupType = TIM_t("聊天室");
        break;
      case GroupType.Meeting:
        groupType = TIM_t("会议群");
        break;
      case GroupType.Public:
        groupType = TIM_t("公开群");
        break;
      case GroupType.Work:
        groupType = TIM_t("工作群");
        break;
      default:
        groupType = TIM_t("未知群");
        break;
    }
    return groupType;
  }

  Widget _searchResultItemBuilder(V2TimGroupInfo groupInfo, TUITheme theme) {
    final faceUrl = groupInfo.faceUrl ?? "";
    final groupID = groupInfo.groupID;
    final showName = groupInfo.groupName ?? groupID;
    final groupType = _getGroupType(groupInfo.groupType);
    return InkWell(
      onTap: () {
        Navigator.pushReplacement(
            context,
            MaterialPageRoute(
                builder: (context) => SendJoinGroupApplication(
                    groupInfo: groupInfo, model: _addGroupViewModel)));
      },
      child: Container(
        color: Colors.white,
        padding: const EdgeInsets.all(12),
        child: Row(
          // crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Container(
              width: 48,
              height: 48,
              margin: const EdgeInsets.only(right: 12),
              child: Avatar(faceUrl: faceUrl, showName: showName),
            ),
            Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  showName,
                  style: const TextStyle(fontSize: 18),
                ),
                // const SizedBox(
                //   height: 4,
                // ),
                Text(
                  "ID: $groupID",
                  style: TextStyle(fontSize: 12, color: theme.weakTextColor),
                ),
                Text(
                  "群类型: $groupType",
                  style: TextStyle(fontSize: 12, color: theme.weakTextColor),
                )
              ],
            )
          ],
        ),
      ),
    );
  }

  List<Widget> _searchResultBuilder(
      List<V2TimGroupInfo>? searchResult, TUITheme theme) {
    final noResult = searchResult != null && searchResult.isEmpty;
    if (noResult) {
      return [
        Center(
          child: Text(TIM_t("该群聊不存在")),
        )
      ];
    }
    return searchResult
            ?.map((e) => _searchResultItemBuilder(e, theme))
            .toList() ??
        [];
  }

  @override
  void initState() {
    super.initState();
    _focusNode.addListener(() {
      final _isFocused = _focusNode.hasFocus;
      isFocused = _isFocused;
      setState(() {});
    });
    _addGroupViewModel.lifeCycle = widget.lifeCycle;
  }

  @override
  void dispose() {
    super.dispose();
  }

  @override
  Widget tuiBuild(BuildContext context, TUIKitBuildValue value) {
    final TUITheme theme = value.theme;

    return MultiProvider(
      providers: [
        ChangeNotifierProvider.value(value: _addGroupViewModel),
      ],
      builder: (BuildContext context, Widget? w) {
        final model = Provider.of<TUIAddGroupViewModel>(context);
        final searchResult = model.groupResult;
        return Column(
          children: [
            Padding(
              padding: const EdgeInsets.symmetric(vertical: 10, horizontal: 10),
              child: Row(
                children: [
                  Expanded(
                      child: TextField(
                    focusNode: _focusNode,
                    controller: _controller,
                    onChanged: (value) {
                      if (value.trim().isEmpty) {
                        setState(() {
                          showResult = false;
                        });
                      }
                    },
                    textInputAction: TextInputAction.search,
                    onSubmitted: (_) {
                      final searchParams = _controller.text;
                      if (searchParams.trim().isNotEmpty) {
                        model.searchGroup(searchParams);
                        showResult = true;
                        _focusNode.requestFocus();
                        setState(() {});
                      }
                    },
                    decoration: InputDecoration(
                        prefixIcon: Icon(
                          Icons.search_outlined,
                          color: theme.weakTextColor,
                        ),
                        border: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(8),
                          borderSide: const BorderSide(
                            width: 0,
                            style: BorderStyle.none,
                          ),
                        ),
                        contentPadding: EdgeInsets.zero,
                        hintStyle: const TextStyle(
                          color: Color(0xffAEA4A3),
                        ),
                        fillColor: Colors.white,
                        filled: true,
                        hintText: TIM_t("搜索群ID")),
                  )),
                  AnimatedContainer(
                    duration: const Duration(milliseconds: 200),
                    width: isFocused ? 50 : 0,
                    child: TextButton(
                        onPressed: () {
                          final searchParams = _controller.text;
                          if (searchParams.trim().isNotEmpty) {
                            model.searchGroup(searchParams);
                            showResult = true;
                            setState(() {});
                          }
                        },
                        child: Text(
                          TIM_t("搜索"),
                          softWrap: false,
                          style: const TextStyle(color: Colors.black),
                        )),
                  )
                ],
              ),
            ),
            if (showResult)
              Expanded(
                child: SingleChildScrollView(
                  child: Column(
                    children: _searchResultBuilder(searchResult, theme),
                  ),
                ),
              )
          ],
        );
      },
    );
  }
}
文件：/im-flutter-uikit/package_src/tim_ui_kit/lib/ui/views/TIMUIKitAddGroup/tim_uikit_send_application.dart
import 'package:flutter/material.dart';
import 'package:tencent_im_base/tencent_im_base.dart';
import 'package:tim_ui_kit/base_widgets/tim_ui_kit_state.dart';
import 'package:tim_ui_kit/business_logic/view_models/tui_add_group_view_model.dart';
import 'package:tim_ui_kit/ui/utils/color.dart';
import 'package:tim_ui_kit/ui/utils/tui_theme.dart';
import 'package:tim_ui_kit/ui/widgets/avatar.dart';
import 'package:tim_ui_kit/base_widgets/tim_ui_kit_base.dart';

class SendJoinGroupApplication extends StatefulWidget {
  final V2TimGroupInfo groupInfo;
  final TUIAddGroupViewModel model;
  const SendJoinGroupApplication(
      {Key? key, required this.groupInfo, required this.model})
      : super(key: key);

  @override
  State<StatefulWidget> createState() => _SendJoinGroupApplicationState();
}

class _SendJoinGroupApplicationState
    extends TIMUIKitState<SendJoinGroupApplication> {
  final TextEditingController _verficationController = TextEditingController();

  @override
  void initState() {
    super.initState();
    final option1 = widget.model.loginUserInfo?.nickName ??
        widget.model.loginUserInfo?.userID;
    _verficationController.text =
        TIM_t_para("我是: {{option1}}", "我是: $option1")(option1: option1);
  }

  String _getGroupType(String type) {
    String groupType;
    switch (type) {
      case GroupType.AVChatRoom:
        groupType = TIM_t("聊天室");
        break;
      case GroupType.Meeting:
        groupType = TIM_t("会议群");
        break;
      case GroupType.Public:
        groupType = TIM_t("公开群");
        break;
      case GroupType.Work:
        groupType = TIM_t("工作群");
        break;
      default:
        groupType = TIM_t("未知群");
        break;
    }
    return groupType;
  }

  @override
  Widget tuiBuild(BuildContext context, TUIKitBuildValue value) {
    final TUITheme theme = value.theme;

    final faceUrl = widget.groupInfo.faceUrl ?? "";
    final groupID = widget.groupInfo.groupID;
    final showName = widget.groupInfo.groupName ?? groupID;
    final option1 = _getGroupType(widget.groupInfo.groupType);
    return Scaffold(
      appBar: AppBar(
        title: Text(
          TIM_t("进群申请"),
          style: const TextStyle(color: Colors.white, fontSize: 17),
        ),
        shadowColor: Colors.white,
        flexibleSpace: Container(
          decoration: BoxDecoration(
            gradient: LinearGradient(colors: [
              theme.lightPrimaryColor ?? CommonColor.lightPrimaryColor,
              theme.primaryColor ?? CommonColor.primaryColor
            ]),
          ),
        ),
        iconTheme: const IconThemeData(
          color: Colors.white,
        ),
      ),
      body: SingleChildScrollView(
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Container(
              color: Colors.white,
              padding: const EdgeInsets.symmetric(vertical: 12, horizontal: 16),
              margin: const EdgeInsets.only(bottom: 12),
              child: Row(
                crossAxisAlignment: CrossAxisAlignment.center,
                children: [
                  Container(
                    width: 48,
                    height: 48,
                    margin: const EdgeInsets.only(right: 12),
                    child: Avatar(faceUrl: faceUrl, showName: showName),
                  ),
                  Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(
                        showName,
                        style:
                            TextStyle(color: theme.darkTextColor, fontSize: 18),
                      ),
                      const SizedBox(
                        height: 4,
                      ),
                      Text(
                        "ID: $groupID",
                        style:
                            TextStyle(fontSize: 13, color: theme.weakTextColor),
                      ),
                      const SizedBox(
                        height: 4,
                      ),
                      Text(
                        TIM_t_para("群类型: {{option1}}", "群类型: $option1")(
                            option1: option1),
                        style:
                            TextStyle(fontSize: 12, color: theme.weakTextColor),
                      ),
                    ],
                  )
                ],
              ),
            ),
            Padding(
              padding: const EdgeInsets.only(left: 16.0),
              child: Text(
                TIM_t("填写验证信息"),
                style: TextStyle(fontSize: 16, color: theme.weakTextColor),
              ),
            ),
            Container(
              margin: const EdgeInsets.only(top: 6, bottom: 12),
              padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 12),
              color: Colors.white,
              child: TextField(
                  maxLines: 4,
                  controller: _verficationController,
                  keyboardType: TextInputType.multiline,
                  decoration: const InputDecoration(
                      border: InputBorder.none,
                      hintStyle: TextStyle(
                        color: Color(0xFFAEA4A3),
                      ),
                      hintText: '')),
            ),
            Container(
              color: Colors.white,
              width: double.infinity,
              margin: const EdgeInsets.only(top: 10),
              child: TextButton(
                  onPressed: () async {
                    final addWording = _verficationController.text;
                    final res =
                        await widget.model.addGroup(groupID, addWording);
                    if (res?.code == 0) {
                      onTIMCallback(TIMCallback(
                          type: TIMCallbackType.INFO,
                          infoRecommendText: TIM_t("群申请已发送"),
                          infoCode: 6660201));
                    }
                  },
                  child: Text(TIM_t("发送"))),
            )
          ],
        ),
      ),
    );
  }
}
文件：/im-flutter-uikit/package_src/tim_ui_kit/lib/ui/views/TIMUIKitBlackList/tim_uikit_black_list.dart
import 'package:flutter/material.dart';
import 'package:flutter_slidable/flutter_slidable.dart';
import 'package:provider/provider.dart';
import 'package:tim_ui_kit/base_widgets/tim_ui_kit_state.dart';
import 'package:tim_ui_kit/business_logic/life_cycle/block_list_life_cycle.dart';
import 'package:tim_ui_kit/business_logic/view_models/tui_block_list_view_model.dart';
import 'package:tim_ui_kit/business_logic/view_models/tui_theme_view_model.dart';
import 'package:tim_ui_kit/tim_ui_kit.dart';
import 'package:tim_ui_kit/ui/utils/color.dart';
import 'package:tim_ui_kit/ui/widgets/avatar.dart';
import 'package:tim_ui_kit/base_widgets/tim_ui_kit_base.dart';

typedef BlackListItemBuilder = Widget Function(
    BuildContext context, V2TimFriendInfo groupInfo);

class TIMUIKitBlackList extends StatefulWidget {
  final void Function(V2TimFriendInfo groupInfo)? onTapItem;
  final Widget Function(BuildContext context)? emptyBuilder;
  final BlackListItemBuilder? itemBuilder;

  /// The life cycle hooks for block list business logic
  final BlockListLifeCycle? lifeCycle;

  const TIMUIKitBlackList(
      {Key? key,
      this.onTapItem,
      this.emptyBuilder,
      this.itemBuilder,
      this.lifeCycle})
      : super(key: key);

  @override
  State<StatefulWidget> createState() => _TIMUIKitBlackListState();
}

class _TIMUIKitBlackListState extends TIMUIKitState<TIMUIKitBlackList> {
  final TUIBlockListViewModel _blackListViewModel = TUIBlockListViewModel();

  _getShowName(V2TimFriendInfo item) {
    final friendRemark = item.friendRemark ?? "";
    final nickName = item.userProfile?.nickName ?? "";
    final userID = item.userID;
    final showName = nickName != "" ? nickName : userID;
    return friendRemark != "" ? friendRemark : showName;
  }

  Widget _itemBuilder(BuildContext context, V2TimFriendInfo groupInfo) {
    final theme = Provider.of<TUIThemeViewModel>(context).theme;
    final showName = _getShowName(groupInfo);
    final faceUrl = groupInfo.userProfile?.faceUrl ?? "";
    return Slidable(
        endActionPane: ActionPane(motion: const DrawerMotion(), children: [
          SlidableAction(
            onPressed: (context) async {
              await _blackListViewModel.deleteFromBlackList([groupInfo.userID]);
              _blackListViewModel.loadData();
            },
            backgroundColor: theme.cautionColor ?? CommonColor.cautionColor,
            foregroundColor: Colors.white,
            label: TIM_t("删除"),
            autoClose: true,
          )
        ]),
        child: Container(
          padding: const EdgeInsets.only(top: 10, left: 16),
          child: Row(
            children: [
              Container(
                padding: const EdgeInsets.only(bottom: 12),
                margin: const EdgeInsets.only(right: 12),
                child: SizedBox(
                  height: 40,
                  width: 40,
                  child: Avatar(faceUrl: faceUrl, showName: showName),
                ),
              ),
              Expanded(
                  child: Container(
                alignment: Alignment.centerLeft,
                padding: const EdgeInsets.only(top: 10, bottom: 20),
                decoration: BoxDecoration(
                    border: Border(
                        bottom: BorderSide(
                            color: theme.weakDividerColor ??
                                CommonColor.weakDividerColor))),
                child: Text(
                  showName,
                  style: const TextStyle(color: Colors.black, fontSize: 18),
                ),
              ))
            ],
          ),
        ));
  }

  BlackListItemBuilder _getItemBuilder() {
    return widget.itemBuilder ?? _itemBuilder;
  }

  @override
  void initState() {
    super.initState();
    _blackListViewModel.loadData();
  }

  @override
  Widget tuiBuild(BuildContext context, TUIKitBuildValue value) {
    return MultiProvider(
      providers: [
        ChangeNotifierProvider.value(value: _blackListViewModel),
      ],
      builder: (BuildContext context, Widget? w) {
        final model = Provider.of<TUIBlockListViewModel>(context);
        model.lifeCycle = widget.lifeCycle;
        final blackList = model.blackList;
        if (blackList.isNotEmpty) {
          return ListView.builder(
            itemCount: blackList.length,
            itemBuilder: (context, index) {
              final friendInfo = blackList[index];
              final itemBuilder = _getItemBuilder();
              return itemBuilder(context, friendInfo);
            },
          );
        }

        if (widget.emptyBuilder != null) {
          return widget.emptyBuilder!(context);
        }

        return Container();
      },
    );
  }
}
文件：/im-flutter-uikit/package_src/tim_ui_kit/lib/ui/views/TIMUIKitChat/tim_uikit_chat.dart
// ignore_for_file: must_be_immutable, avoid_print

import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:provider/single_child_widget.dart';
import 'package:scroll_to_index/scroll_to_index.dart';
import 'package:tim_ui_kit/base_widgets/tim_ui_kit_state.dart';
import 'package:tim_ui_kit/business_logic/life_cycle/chat_life_cycle.dart';
import 'package:tim_ui_kit/business_logic/view_models/tui_chat_view_model.dart';
import 'package:tim_ui_kit/business_logic/view_models/tui_group_profile_view_model.dart';
import 'package:tim_ui_kit/business_logic/view_models/tui_theme_view_model.dart';
import 'package:tim_ui_kit/data_services/services_locatar.dart';
import 'package:tim_ui_kit/tim_ui_kit.dart';
import 'package:tim_ui_kit/ui/constants/history_message_constant.dart';
import 'package:tim_ui_kit/ui/utils/color.dart';
import 'package:tim_ui_kit/ui/utils/frame.dart';
import 'package:tim_ui_kit/ui/utils/optimize_utils.dart';
import 'package:tim_ui_kit/ui/views/TIMUIKitChat/tim_uikit_multi_select_panel.dart';

import 'TIMUIKItMessageList/TIMUIKitTongue/tim_uikit_chat_history_message_list_tongue.dart';
import 'TIMUIKItMessageList/tim_uikit_history_message_list_container.dart';
import 'package:tim_ui_kit/base_widgets/tim_ui_kit_base.dart';

class TIMUIKitChat extends StatefulWidget {
  int startTime = 0;
  int endTime = 0;

  /// conversation id, use for get history message list.
  final String conversationID;

  /// conversation type
  final int conversationType;

  /// use for show conversation name
  final String conversationShowName;

  /// avatar tap callback
  final void Function(String userID)? onTapAvatar;

  /// should show the nick name
  final bool showNickName;

  /// message item builder, can customizable partial message types or the layout for the whole line
  final MessageItemBuilder? messageItemBuilder;

  /// show unread message count, default value is false
  final bool showTotalUnReadCount;

  /// Deprecated("Please use [extraTipsActionItemBuilder] instead")
  final Widget? Function(V2TimMessage message, Function() closeTooltip,
      [Key? key])? exteraTipsActionItemBuilder;

  /// The builder for extra tips action
  final Widget? Function(V2TimMessage message, Function() closeTooltip,
      [Key? key])? extraTipsActionItemBuilder;

  /// show draft Text on TextField
  final String? draftText;

  /// jump to somewhere firstly
  final V2TimMessage? initFindingMsg;

  /// inputTextField hinttext
  final String? textFieldHintText;

  /// appbar config
  final AppBar? appBarConfig;

  /// main history list config
  final ListView? mainHistoryListConfig;

  /// more panel config and customize actions
  final MorePanelConfig? morePanelConfig;

  /// the builder for tongue on right bottom
  final TongueItemBuilder? tongueItemBuilder;

  final List<V2TimGroupAtInfo?>? groupAtInfoList;

  /// custom config for TIMUIKitChat widget
  final TIMUIKitChatConfig? config;

  /// jump to the page for `TIMUIKitGroupApplicationList` or other pages to deal with enter group application for group administrator manually, if you use [public group]. The parameter is `groupID`
  final ValueChanged<String>? onDealWithGroupApplication;

  /// the builder for abstract messages, normally used in replied message and forward message.
  final String Function(V2TimMessage message)? abstractMessageBuilder;

  /// tool tips panel configuration, long press message will show tool tips panel
  final ToolTipsConfig? toolTipsConfig;

  /// The life cycle for chat business logic
  final ChatLifeCycle? lifeCycle;

  /// custom emoji panel
  final Widget Function(
      {void Function() sendTextMessage,
      void Function(int index, String data) sendFaceMessage,
      void Function() deleteText,
      void Function(int unicode) addText})? customStickerPanel;

  TIMUIKitChat({
    Key? key,
    required this.conversationID,
    required this.conversationType,
    required this.conversationShowName,
    this.abstractMessageBuilder,
    this.onTapAvatar,
    this.showNickName = true,
    this.showTotalUnReadCount = false,
    this.messageItemBuilder,
    @Deprecated("Please use [extraTipsActionItemBuilder] instead")
        this.exteraTipsActionItemBuilder,
    this.extraTipsActionItemBuilder,
    this.draftText,
    this.textFieldHintText,
    this.initFindingMsg,
    this.appBarConfig,
    this.morePanelConfig,
    this.customStickerPanel,
    this.config = const TIMUIKitChatConfig(),
    this.tongueItemBuilder,
    this.groupAtInfoList,
    this.mainHistoryListConfig,
    this.onDealWithGroupApplication,
    this.toolTipsConfig,
    this.lifeCycle,
  }) : super(key: key) {
    startTime = DateTime.now().millisecondsSinceEpoch;
  }

  @override
  State<StatefulWidget> createState() => _TUIChatState();
}

class _TUIChatState extends TIMUIKitState<TIMUIKitChat> {
  final TUIChatViewModel model = serviceLocator<TUIChatViewModel>();
  final TUIThemeViewModel themeViewModel = serviceLocator<TUIThemeViewModel>();
  final TUIGroupProfileViewModel groupProfileViewModel =
      serviceLocator<TUIGroupProfileViewModel>();
  final TIMUIKitInputTextFieldController textFieldController =
      TIMUIKitInputTextFieldController();

  late AutoScrollController autoController = AutoScrollController(
    viewportBoundaryGetter: () =>
        Rect.fromLTRB(0, 0, 0, MediaQuery.of(context).padding.bottom),
    axis: Axis.vertical,
  );

  @override
  void initState() {
    if (kProfileMode) {
      Frame.init();
    }
    model.initForEachConversation((String value) =>
        textFieldController.textEditingController?.text = value);
    model.markMessageAsRead(
        convID: widget.conversationID, convType: widget.conversationType);
    model.setChatConfig(widget.config!);
    model.abstractMessageBuilder = widget.abstractMessageBuilder;
    if (widget.conversationType == 2) {
      groupProfileViewModel.loadData(widget.conversationID);
      // groupProfileViewModel.setGroupListener();
    }
    model.lifeCycle = widget.lifeCycle;
    super.initState();
    WidgetsBinding.instance?.addPostFrameCallback((_) async {
      if (kProfileMode) {
        widget.endTime = DateTime.now().millisecondsSinceEpoch;
        int timeSpend = widget.endTime - widget.startTime;
        print("Page render time:$timeSpend ms");
      }
    });
  }

  @override
  void dispose() {
    super.dispose();
    if (kProfileMode) {
      Frame.destroy();
    }
    model.resetData();
    groupProfileViewModel.clearData();
  }

  Widget _renderJoinGroupApplication(int amount, TUITheme theme) {
    String option1 = amount.toString();
    return Container(
      height: 36,
      decoration: BoxDecoration(color: hexToColor("f6eabc")),
      child: GestureDetector(
        onTap: () {
          widget.onDealWithGroupApplication!(widget.conversationID);
        },
        child: Row(
          mainAxisAlignment: MainAxisAlignment.center,
          crossAxisAlignment: CrossAxisAlignment.center,
          children: [
            Text(
              TIM_t_para("{{option1}} 条入群请求", "$option1 条入群请求")(
                  option1: option1),
              style: const TextStyle(
                fontSize: 12,
              ),
            ),
            Container(
              margin: const EdgeInsets.only(left: 12),
              child: Text(
                TIM_t("去处理"),
                style: TextStyle(fontSize: 12, color: theme.primaryColor),
              ),
            )
          ],
        ),
      ),
    );
  }

  @override
  Widget tuiBuild(BuildContext context, TUIKitBuildValue value) {
    final TUITheme theme = value.theme;
    final closePanel =
        OptimizeUtils.throttle((_) => textFieldController.hideAllPanel(), 60);

    return TIMUIKitChatProviderScope(
        conversationID: widget.conversationID,
        conversationType: widget.conversationType,
        providers: [
          Provider(create: (_) => widget.config),
        ],
        builder: (context, w) {
          final TUIChatViewModel model = Provider.of<TUIChatViewModel>(context);

          final isMultiSelect = model.isMultiSelect;

          List<V2TimGroupApplication> filteredApplicationList = [];
          if (widget.conversationType == 2 &&
              widget.onDealWithGroupApplication != null) {
            filteredApplicationList = model.groupApplicationList.where((item) {
              return (item.groupID == widget.conversationID) &&
                  item.handleStatus == 0;
            }).toList();
          }

          return GestureDetector(
            onTap: () {
              textFieldController.hideAllPanel();
            },
            child: Scaffold(
                appBar: TIMUIKitAppBar(
                  showTotalUnReadCount: widget.showTotalUnReadCount,
                  config: widget.appBarConfig,
                  conversationShowName: widget.conversationShowName,
                  conversationID: widget.conversationID,
                ),
                body: Column(
                  children: [
                    if (filteredApplicationList.isNotEmpty)
                      _renderJoinGroupApplication(
                          filteredApplicationList.length, theme),
                    Expanded(
                        child: Align(
                            alignment: Alignment.topCenter,
                            child: Listener(
                              onPointerMove: closePanel,
                              child: TIMUIKitHistoryMessageListContainer(
                                toolTipsConfig: widget.toolTipsConfig,
                                groupAtInfoList: widget.groupAtInfoList,
                                tongueItemBuilder: widget.tongueItemBuilder,
                                onLongPressForOthersHeadPortrait:
                                    (String? userId, String? nickName) {
                                  if (widget.conversationType != 1) {
                                    textFieldController.longPressToAt(
                                        nickName, userId);
                                  }
                                },
                                mainHistoryListConfig:
                                    widget.mainHistoryListConfig,
                                initFindingMsg: widget.initFindingMsg,
                                extraTipsActionItemBuilder:
                                    widget.extraTipsActionItemBuilder ??
                                        widget.exteraTipsActionItemBuilder,
                                conversationType: widget.conversationType,
                                scrollController: autoController,
                                onTapAvatar: widget.onTapAvatar,
                                showNickName: widget.showNickName,
                                messageItemBuilder: widget.messageItemBuilder,
                                conversationID: widget.conversationID,
                              ),
                            ))),
                    isMultiSelect
                        ? MultiSelectPanel(
                            conversationType: widget.conversationType,
                          )
                        : TIMUIKitInputTextField(
                            controller: textFieldController,
                            customStickerPanel: widget.customStickerPanel,
                            morePanelConfig: widget.morePanelConfig,
                            scrollController: autoController,
                            conversationID: widget.conversationID,
                            conversationType: widget.conversationType,
                            initText: widget.draftText,
                            hintText: widget.textFieldHintText,
                            showMorePannel:
                                widget.config?.isAllowShowMorePanel ?? true,
                            showSendAudio:
                                widget.config?.isAllowSoundMessage ?? true,
                            showSendEmoji:
                                widget.config?.isAllowEmojiPanel ?? true,
                          )
                  ],
                )),
          );
        });
  }
}

class TIMUIKitChatProviderScope extends StatelessWidget {
  static final TUIChatViewModel model = serviceLocator<TUIChatViewModel>();
  final TUIThemeViewModel themeViewModel = serviceLocator<TUIThemeViewModel>();
  final TUIGroupProfileViewModel groupProfileViewModel =
      serviceLocator<TUIGroupProfileViewModel>();
  final Widget? child;
  final Widget Function(BuildContext, Widget?)? builder;
  final List<SingleChildWidget>? providers;

  /// conversation id, use for get history message list.
  final String conversationID;

  /// converastion type
  final int conversationType;

  TIMUIKitChatProviderScope(
      {Key? key,
      this.child,
      this.providers,
      this.builder,
      required this.conversationID,
      required this.conversationType})
      : super(key: key) {
    loadData();
  }

  loadData() {
    final convID = conversationID;
    final convType = conversationType;
    if (model.haveMoreData) {
      model.loadData(
        count: HistoryMessageDartConstant.getCount, //20
        userID: convType == 1 ? convID : null,
        groupID: convType == 2 ? convID : null,
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    return MultiProvider(
      providers: [
        ChangeNotifierProvider.value(value: model),
        ChangeNotifierProvider.value(value: themeViewModel),
        ChangeNotifierProvider.value(value: groupProfileViewModel),
        Provider(create: (_) => const TIMUIKitChatConfig()),
        ...?providers
      ],
      child: child,
      builder: builder,
    );
  }
}
文件：/im-flutter-uikit/package_src/tim_ui_kit/lib/ui/views/TIMUIKitChat/tim_uikit_chat_config.dart
import 'package:tim_ui_kit/business_logic/view_models/tui_chat_view_model.dart';
import 'package:tim_ui_kit/tim_ui_kit.dart';

enum GroupReceptAllowType { work, public, meeting }

enum UrlPreviewType { none, onlyHyperlink, previewCardAndHyperlink }

class TIMUIKitChatConfig {
  /// control if allowed to show reading status
  final bool isShowReadingStatus;

  /// control if allowed to show reading status for group
  final bool isShowGroupReadingStatus;

  /// control if allowed to show the menu after long pressing message
  final bool isAllowLongPressMessage;

  /// control if allowed to callback after clicking the avatar
  final bool isAllowClickAvatar;

  /// control if allowed to show emoji face message panel
  final bool isAllowEmojiPanel;

  /// control if allowed to show more plus panel
  final bool isAllowShowMorePanel;

  /// control if allowed to send voice sound message
  final bool isAllowSoundMessage;

  /// control if allowed to at when reply automatically
  final bool isAtWhenReply;

  /// control which group can send message read receipt.
  final List<GroupReceptAllowType>? groupReadReceiptPermisionList;

  /// the title shows in push notification
  final String notificationTitle;

  /// the channel ID for OPPO in push notification
  final String notificationOPPOChannelID;

  /// the notification sound in iOS devices
  /// When `iOSSound` = `kIOSOfflinePushNoSound`, the sound will not play when message received. When `iOSSound` = `kIOSOfflinePushDefaultSound`, the system sound is played when message received. If you want to customize `iOSSound`, you need to link the voice file into the Xcode project, and then set the voice file name (with a suffix) to iOSSound.
  final String notificationIOSSound;

  /// the body content shows in push notification
  final String Function(V2TimMessage message, String convID, ConvType convType)?
      notificationBody;

  /// external information (String) for notification message, recommend used for jumping to target conversation,
  /// default is the conversation ID if do not provide
  final String Function(V2TimMessage message, String convID, ConvType convType)?
      notificationExt;

  /// The type of URL preview level, none preview, only hyperlink in text, or shows a preview card for website.
  final UrlPreviewType urlPreviewType;

  const TIMUIKitChatConfig(
      {this.isAtWhenReply = true,
      this.notificationExt,
      this.urlPreviewType = UrlPreviewType.previewCardAndHyperlink,
      this.notificationBody,
      this.notificationOPPOChannelID = "",
      this.notificationTitle = "",
      this.notificationIOSSound = "",
      this.isAllowSoundMessage = true,
      this.groupReadReceiptPermisionList,
      this.isAllowEmojiPanel = true,
      this.isAllowShowMorePanel = true,
      this.isShowReadingStatus = true,
      this.isAllowLongPressMessage = true,
      this.isAllowClickAvatar = true,
      this.isShowGroupReadingStatus = true});
}
文件：/im-flutter-uikit/package_src/tim_ui_kit/lib/ui/views/TIMUIKitChat/tim_uikit_multi_select_panel.dart
import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:tim_ui_kit/base_widgets/tim_ui_kit_statelesswidget.dart';
import 'package:tim_ui_kit/business_logic/view_models/tui_chat_view_model.dart';
import 'package:tim_ui_kit/data_services/services_locatar.dart';
import 'package:tim_ui_kit/ui/utils/color.dart';
import 'package:tim_ui_kit/ui/utils/tui_theme.dart';
import 'package:tim_ui_kit/ui/widgets/forward_message_screen.dart';
import 'package:tencent_im_base/tencent_im_base.dart';

import 'package:tim_ui_kit/base_widgets/tim_ui_kit_base.dart';

class MultiSelectPanel extends TIMUIKitStatelessWidget {
  MultiSelectPanel({Key? key, required this.conversationType})
      : super(key: key);
  final int conversationType;
  final TUIChatViewModel _model = serviceLocator<TUIChatViewModel>();

  _handleForwardMessage(BuildContext context, bool isMergerForward) {
    Navigator.push(
        context,
        MaterialPageRoute(
            builder: (context) => ForwardMessageScreen(
                  isMergerForward: isMergerForward,
                  conversationType: conversationType,
                )));
  }

  @override
  Widget tuiBuild(BuildContext context, TUIKitBuildValue value) {
    final TUITheme theme = value.theme;

    return Container(
      decoration: BoxDecoration(
        gradient: LinearGradient(colors: [
          theme.lightPrimaryColor ?? CommonColor.lightPrimaryColor,
          theme.primaryColor ?? CommonColor.primaryColor
        ]),
      ),
      padding: const EdgeInsets.only(top: 12, bottom: 48),
      child: Row(
        mainAxisAlignment: MainAxisAlignment.spaceEvenly,
        children: [
          Column(
            children: [
              IconButton(
                icon: Image.asset('images/forward.png',
                    package: 'tim_ui_kit', color: Colors.white),
                iconSize: 40,
                onPressed: () {
                  _handleForwardMessage(context, false);
                },
              ),
              Text(TIM_t("逐条转发"),
                  style: const TextStyle(color: Colors.white, fontSize: 12))
            ],
          ),
          Column(
            children: [
              IconButton(
                icon: Image.asset('images/merge_forward.png',
                    package: 'tim_ui_kit', color: Colors.white),
                iconSize: 40,
                onPressed: () {
                  _handleForwardMessage(context, true);
                },
              ),
              Text(
                TIM_t("合并转发"),
                style: const TextStyle(color: Colors.white, fontSize: 12),
              )
            ],
          ),
          Column(
            children: [
              IconButton(
                icon: Image.asset('images/delete.png',
                    package: 'tim_ui_kit', color: Colors.white),
                iconSize: 40,
                onPressed: () {
                  showCupertinoModalPopup<String>(
                    context: context,
                    builder: (BuildContext context) {
                      return CupertinoActionSheet(
                        title: Text(TIM_t("确定删除已选消息")),
                        cancelButton: CupertinoActionSheetAction(
                          onPressed: () {
                            Navigator.pop(
                              context,
                              "cancel",
                            );
                          },
                          child: Text(TIM_t("取消")),
                          isDefaultAction: false,
                        ),
                        actions: [
                          CupertinoActionSheetAction(
                            onPressed: () {
                              _model.deleteSelectedMsg();
                              _model.updateMultiSelectStatus(false);
                              Navigator.pop(
                                context,
                                "cancel",
                              );
                            },
                            child: Text(
                              TIM_t("删除"),
                              style: TextStyle(color: theme.cautionColor),
                            ),
                            isDefaultAction: false,
                          )
                        ],
                      );
                    },
                  );
                },
              ),
              Text(TIM_t("删除"),
                  style: const TextStyle(color: Colors.white, fontSize: 12))
            ],
          )
        ],
      ),
    );
  }
}
文件：/im-flutter-uikit/package_src/tim_ui_kit/lib/ui/views/TIMUIKitChat/TIMUIKItMessageList/tim_uikit_chat_history_message_list.dart
import 'package:flutter/gestures.dart';
import 'package:flutter/material.dart';
import 'package:loading_animation_widget/loading_animation_widget.dart';
import 'package:provider/provider.dart';
import 'package:scroll_to_index/scroll_to_index.dart';
import 'package:tim_ui_kit/base_widgets/tim_ui_kit_base.dart';
import 'package:tim_ui_kit/base_widgets/tim_ui_kit_state.dart';
import 'package:tencent_im_base/tencent_im_base.dart';

import 'package:tim_ui_kit/base_widgets/tim_ui_kit_statelesswidget.dart';
import 'package:tim_ui_kit/business_logic/view_models/tui_chat_view_model.dart';
import 'package:tim_ui_kit/data_services/services_locatar.dart';
// ignore: unused_import
import 'package:tim_ui_kit/ui/utils/optimize_utils.dart';
import 'package:tim_ui_kit/ui/views/TIMUIKitChat/TIMUIKItMessageList/utils.dart';
import 'package:tim_ui_kit/ui/widgets/keepalive_wrapper.dart';

import 'TIMUIKitTongue/tim_uikit_chat_history_message_list_tongue.dart';
import 'TIMUIKitTongue/tim_uikit_chat_history_message_list_tongue_container.dart';

enum LoadingPlace {
  none,
  top,
  bottom,
}

enum ScrollType { toIndex, toIndexBegin }

class TIMUIKitHistoryMessageListController extends ChangeNotifier {
  AutoScrollController? scrollController = AutoScrollController();
  late ScrollType scrollType;
  late V2TimMessage targetMessage;

  TIMUIKitHistoryMessageListController({
    AutoScrollController? scrollController,
  }) {
    if (scrollController != null) {
      this.scrollController = scrollController;
    }
  }

  scrollToIndex(V2TimMessage message) {
    scrollType = ScrollType.toIndex;
    targetMessage = message;
    notifyListeners();
  }

  scrollToIndexBegin(V2TimMessage message) {
    scrollType = ScrollType.toIndexBegin;
    targetMessage = message;
    notifyListeners();
  }
}

class TIMUIKitHistoryMessageList extends StatefulWidget {
  /// message list
  final List<V2TimMessage?> messageList;

  /// tongue item builder
  final TongueItemBuilder? tongueItemBuilder;

  /// group at info, it can get from conversation info
  final List<V2TimGroupAtInfo?>? groupAtInfoList;

  /// use for build message item
  final Widget Function(BuildContext, V2TimMessage?)? itemBuilder;

  /// can controll message list scroll
  final TIMUIKitHistoryMessageListController? controller;

  /// use for message jump, if passed will jump to target message.
  final V2TimMessage? initFindingMsg;

  /// use for load more message
  final Function(String?, [int?]) onLoadMore;

  /// configuration for list view
  final ListView? mainHistoryListConfig;

  const TIMUIKitHistoryMessageList(
      {Key? key,
      required this.messageList,
      this.itemBuilder,
      this.controller,
      required this.onLoadMore,
      this.tongueItemBuilder,
      this.groupAtInfoList,
      this.initFindingMsg,
      this.mainHistoryListConfig})
      : super(key: key);

  @override
  State<StatefulWidget> createState() => _TIMUIKitHistoryMessageListState();
}

class _TIMUIKitHistoryMessageListState
    extends TIMUIKitState<TIMUIKitHistoryMessageList> {
  final TUIChatViewModel model = serviceLocator<TUIChatViewModel>();
  LoadingPlace loadingPlace = LoadingPlace.none;
  V2TimMessage? findingMsg;
  String findingSeq = "";
  late TIMUIKitHistoryMessageListController _controller;
  late AutoScrollController _autoScrollController;

  @override
  void initState() {
    super.initState();
    _controller = widget.controller ?? TIMUIKitHistoryMessageListController();
    _autoScrollController =
        _controller.scrollController ?? AutoScrollController();
    _controller.addListener(_controllerListener);
    initFinding();
  }

  initFinding() async {
    if (widget.initFindingMsg != null) {
      await widget.onLoadMore(null);
      setState(() {
        findingMsg = widget.initFindingMsg!;
      });
    }
  }

  _controllerListener() {
    final scrollType = _controller.scrollType;
    final targetMessage = _controller.targetMessage;
    switch (scrollType) {
      case ScrollType.toIndex:
        _onScrollToIndex(targetMessage);
        break;
      case ScrollType.toIndexBegin:
        _onScrollToIndexBegin(targetMessage);
        break;
      default:
    }
  }

  Widget _getMessageItemBuilder(V2TimMessage? messageItem) {
    if (widget.itemBuilder != null) {
      return widget.itemBuilder!(context, messageItem);
    }
    return Container();
  }

  _getMessageId(int index) {
    if (widget.messageList[index]!.elemType == 11) {
      return _getMessageId(index - 1);
    }
    return widget.messageList[index]!.msgID;
  }

  _onScrollToIndex(V2TimMessage targetMsg) {
    // This method called by @ messages or messages been searched, aims to jump to target message
    // setState(() {
    if (loadingPlace != LoadingPlace.top) {
      loadingPlace = LoadingPlace.top;
    }
    // });
    const int singleLoadAmount = 40;
    final lastTimestamp =
        widget.messageList[widget.messageList.length - 1]?.timestamp;
    final msgList = widget.messageList;
    final targetTimeStamp = targetMsg.timestamp!;

    void showCantFindMsg() {
      // setState(() {
      findingMsg = null;
      loadingPlace = LoadingPlace.none;
      // });
      onTIMCallback(TIMCallback(
          type: TIMCallbackType.INFO,
          infoRecommendText: TIM_t("无法定位到原消息"),
          infoCode: 6660401));
    }

    if (targetTimeStamp >= lastTimestamp!) {
      // 当前列表里应该有这个消息，试试能不能直接定位到那去
      bool isFound = false;
      int targetIndex = 1;
      for (int i = msgList.length - 1; i >= 0; i--) {
        final currentMsg = msgList[i];
        if (currentMsg?.timestamp == targetTimeStamp &&
            currentMsg?.elemType != 11 &&
            currentMsg!.msgID == targetMsg.msgID) {
          // find the target index by timestamp and msgID
          isFound = true;
          targetIndex = -i;
          break;
        }
      }

      if (isFound && targetIndex != 1) {
        // setState(() {
        findingMsg = null;
        // });
        _autoScrollController.scrollToIndex(
          targetIndex,
          preferPosition: AutoScrollPosition.middle,
        );
        _autoScrollController.scrollToIndex(targetIndex,
            preferPosition: AutoScrollPosition.middle);
        // execute twice for accurate position, as the position located firstly can be wrong
        model.jumpMsgID = targetMsg.msgID!;
        // setState(() {
        loadingPlace = LoadingPlace.none;
        // });
      } else {
        showCantFindMsg();
      }
    } else {
      if (model.haveMoreData) {
        // if the target message not in current message list, load more
        // setState(() {
        findingMsg = targetMsg;
        // });
        final lastMsgId = _getMessageId(widget.messageList.length - 1);
        widget.onLoadMore(lastMsgId, singleLoadAmount);
      } else {
        showCantFindMsg();
      }
    }
  }

  _onScrollToIndexBySeq(String targetSeq) {
    // This method called by tongue request jumping to target @ message
    setState(() {
      if (loadingPlace != LoadingPlace.top) {
        loadingPlace = LoadingPlace.top;
      }
    });
    const int singleLoadAmount = 40;
    final msgList = widget.messageList;
    String lastSeq = "";
    for (int i = msgList.length - 1; i >= 0; i--) {
      final currentMsg = msgList[i];
      if (currentMsg!.seq != null && currentMsg.seq != "") {
        lastSeq = currentMsg.seq!;
        break;
      }
    }

    void showCantFindMsg() {
      // setState(() {
      findingSeq = "";
      loadingPlace = LoadingPlace.none;
      // });
      onTIMCallback(TIMCallback(
          type: TIMCallbackType.INFO,
          infoRecommendText: TIM_t("无法定位到原消息"),
          infoCode: 6660401));
    }

    if (int.parse(lastSeq) <= int.parse(targetSeq)) {
      bool isFound = false;
      int targetIndex = 1;
      String? targetMsgID = "";
      for (int i = msgList.length - 1; i >= 0; i--) {
        final currentMsg = msgList[i];
        if (currentMsg?.seq == targetSeq) {
          isFound = true;
          targetMsgID = currentMsg?.msgID;
          targetIndex = -i;
          break;
        }
      }

      if (isFound && targetIndex != 1) {
        // setState(() {
        findingSeq = "";
        // });
        _autoScrollController.scrollToIndex(
          targetIndex,
          preferPosition: AutoScrollPosition.middle,
        );
        _autoScrollController.scrollToIndex(targetIndex,
            preferPosition: AutoScrollPosition.middle);
        if (targetMsgID != null && targetMsgID != "") {
          // widget.updateMsgID(targetMsgID);
          model.jumpMsgID = targetMsgID;
        }
        // setState(() {
        loadingPlace = LoadingPlace.none;
        // });
      } else {
        showCantFindMsg();
      }
    } else {
      if (model.haveMoreData) {
        // setState(() {
        findingSeq = targetSeq;
        // });
        widget.onLoadMore(
            _getMessageId(widget.messageList.length - 1), singleLoadAmount);
      } else {
        showCantFindMsg();
      }
    }
  }

  _onScrollToIndexBegin(V2TimMessage targetMsg) {
    final lastTimestamp =
        widget.messageList[widget.messageList.length - 1]?.timestamp;
    final msgList = widget.messageList;
    final int targetTimeStamp = targetMsg.timestamp!;

    if (targetTimeStamp >= lastTimestamp!) {
      bool isFound = false;
      int targetIndex = 1;
      for (int i = msgList.length - 1; i >= 0; i--) {
        final currentMsg = msgList[i];
        if (currentMsg?.timestamp == targetTimeStamp &&
            currentMsg?.elemType != 11 &&
            currentMsg!.msgID == targetMsg.msgID) {
          isFound = true;
          targetIndex = -i;
          break;
        }
      }
      if (isFound && targetIndex != 1) {
        _autoScrollController.scrollToIndex(
          targetIndex,
          preferPosition: AutoScrollPosition.end,
        );
      }
    }
  }

  @override
  Widget tuiBuild(BuildContext context, TUIKitBuildValue value) {
    final theme = value.theme;

    if (widget.messageList.isEmpty) {
      return Container();
    }
    final messageList = widget.messageList;
    final throteFunction = OptimizeUtils.throttle((index) {
      final msgID =
          TIMUIKitChatUtils.getMessageIDWithinIndex(widget.messageList, index);
      widget.onLoadMore(msgID);
    }, 20);

    // Future.delayed(const Duration(milliseconds: 600), (){
    if (findingMsg != null) {
      _onScrollToIndex(findingMsg!);
    } else if (findingSeq != "") {
      _onScrollToIndexBySeq(findingSeq);
    }
    // }
    // );

    return Container(
      padding: const EdgeInsets.symmetric(horizontal: 16),
      child: Stack(
        alignment: Alignment.center,
        children: [
          Align(
            alignment: Alignment.topCenter,
            child: ListView.builder(
                key: widget.mainHistoryListConfig?.key,
                primary: widget.mainHistoryListConfig?.primary,
                physics: widget.mainHistoryListConfig?.physics,
                padding:
                    widget.mainHistoryListConfig?.padding ?? EdgeInsets.zero,
                itemExtent: widget.mainHistoryListConfig?.itemExtent,
                prototypeItem: widget.mainHistoryListConfig?.prototypeItem,
                cacheExtent: widget.mainHistoryListConfig?.cacheExtent ?? 400,
                semanticChildCount:
                    widget.mainHistoryListConfig?.semanticChildCount,
                dragStartBehavior:
                    widget.mainHistoryListConfig?.dragStartBehavior ??
                        DragStartBehavior.start,
                keyboardDismissBehavior:
                    widget.mainHistoryListConfig?.keyboardDismissBehavior ??
                        ScrollViewKeyboardDismissBehavior.manual,
                restorationId: widget.mainHistoryListConfig?.restorationId,
                clipBehavior:
                    widget.mainHistoryListConfig?.clipBehavior ?? Clip.hardEdge,
                addAutomaticKeepAlives: true,
                reverse: true,
                shrinkWrap: true,
                itemCount: messageList.length,
                controller: _autoScrollController,
                itemBuilder: (context, index) {
                  final messageItem = messageList[index];
                  if (index == messageList.length - 1) {
                    if (model.haveMoreData) {
                      throteFunction(index);
                    }
                  }
                  return AutoScrollTag(
                    controller: _autoScrollController,
                    index: -index,
                    key: ValueKey(-index),
                    highlightColor: Colors.black.withOpacity(0.1),
                    child: KeepAliveWrapper(
                        child: _getMessageItemBuilder(messageItem)),
                  );
                }),
          ),
          TIMUIKitHistoryMessageListTongueContainer(
            scrollController: _autoScrollController,
            scrollToIndexBySeq: _onScrollToIndexBySeq,
            groupAtInfoList: widget.groupAtInfoList,
            tongueItemBuilder: widget.tongueItemBuilder,
          ),
          if (loadingPlace == LoadingPlace.bottom)
            Positioned(
              bottom: 0,
              child: LoadingAnimationWidget.staggeredDotsWave(
                color: theme.weakTextColor ?? Colors.grey,
                size: 28,
              ),
            ),
          if (loadingPlace == LoadingPlace.top)
            Positioned(
              top: 8,
              child: LoadingAnimationWidget.staggeredDotsWave(
                color: theme.weakTextColor ?? Colors.grey,
                size: 28,
              ),
            ),
        ],
      ),
    );
  }
}

class TIMUIKitHistoryMessageListSelector extends TIMUIKitStatelessWidget {
  final Widget Function(BuildContext, List<V2TimMessage?>, Widget?) builder;
  final String conversationID;

  TIMUIKitHistoryMessageListSelector(
      {Key? key, required this.builder, required this.conversationID})
      : super(key: key);
  @override
  Widget tuiBuild(BuildContext context, TUIKitBuildValue value) {
    return Selector<TUIChatViewModel, List<V2TimMessage?>>(
        builder: builder,
        selector: (context, model) =>
            model.getMessageListByConvId(conversationID) ?? []);
  }
}
文件：/im-flutter-uikit/package_src/tim_ui_kit/lib/ui/views/TIMUIKitChat/TIMUIKItMessageList/tim_uikit_chat_history_message_list_item.dart
// ignore_for_file: non_constant_identifier_names

import 'dart:convert';

import 'package:flutter/cupertino.dart';
import 'package:flutter/gestures.dart';
import 'package:flutter/material.dart';
import 'package:super_tooltip/super_tooltip.dart';
import 'package:tim_ui_kit/base_widgets/tim_ui_kit_state.dart';
import 'package:tim_ui_kit/base_widgets/tim_ui_kit_statelesswidget.dart';
import 'package:tim_ui_kit/business_logic/view_models/tui_chat_view_model.dart';
import 'package:tim_ui_kit/business_logic/view_models/tui_theme_view_model.dart';
import 'package:tim_ui_kit/data_services/services_locatar.dart';
import 'package:tim_ui_kit/tim_ui_kit.dart';
import 'package:tim_ui_kit/ui/constants/history_message_constant.dart';
import 'package:tim_ui_kit/ui/utils/message.dart';
import 'package:tim_ui_kit/ui/utils/time_ago.dart';
import 'package:tim_ui_kit/ui/views/TIMUIKitChat/TIMUIKItMessageList/tim_uikit_message_read_receipt.dart';
import 'package:tim_ui_kit/ui/views/TIMUIKitChat/TIMUIKitMessageItem/main.dart';
import 'package:tim_ui_kit/ui/views/TIMUIKitChat/TIMUIKitMessageItem/tim_uikit_chat_custom_elem.dart';
import 'package:tim_ui_kit/ui/views/TIMUIKitChat/TIMUIKitMessageItem/tim_uikit_chat_face_elem.dart';
import 'package:tim_ui_kit/ui/views/TIMUIKitChat/TIMUIKitMessageItem/tim_uikit_chat_group_trtc_tips_elem.dart';
import 'package:tim_ui_kit/ui/widgets/avatar.dart';
import 'package:tim_ui_kit/ui/widgets/forward_message_screen.dart';
import 'package:tim_ui_kit/ui/widgets/loading.dart';
import 'package:tim_ui_kit/ui/widgets/radio_button.dart';
import 'package:flutter/services.dart';

import 'package:tim_ui_kit/base_widgets/tim_ui_kit_base.dart';

typedef MessageRowBuilder = Widget Function(
  /// current message
  V2TimMessage message,

  /// the message widget for current message, build by your custom builder or our default builder
  Widget messageWidget,

  /// scroll to the specific message, it will shows in the screen center, and call isNeedShowJumpStatus if necessary
  Function onScrollToIndex,

  /// if current message been called to jumped by other message
  bool isNeedShowJumpStatus,

  /// clear the been jumped status, recommend to execute after get 'isNeedShowJumpStatus'
  VoidCallback clearJumpStatus,

  /// scroll to specific message, it will shows on the screen top, without the call isNeedShowJumpStatus
  Function onScrollToIndexBegin,
);

typedef MessageItemContent = Widget? Function(
  V2TimMessage message,
  bool isShowJump,
  VoidCallback clearJump,
);

class MessageItemBuilder {
  /// text message builder
  final MessageItemContent? textMessageItemBuilder;

  /// text message builder for reply message
  final MessageItemContent? textReplyMessageItemBuilder;

  /// custom message builder
  final MessageItemContent? customMessageItemBuilder;

  /// image message builder
  final MessageItemContent? imageMessageItemBuilder;

  /// sound message builder
  final MessageItemContent? soundMessageItemBuilder;

  /// video message builder
  final MessageItemContent? videoMessageItemBuilder;

  /// file message builder
  final MessageItemContent? fileMessageItemBuilder;

  /// location message (LBS) item builder;
  /// recommend to use our LBS plug-in: https://pub.dev/packages/tim_ui_kit_lbs_plugin
  final MessageItemContent? locationMessageItemBuilder;

  /// face message, like emoji, message builder
  final MessageItemContent? faceMessageItemBuilder;

  /// group tips message builder
  final MessageItemContent? groupTipsMessageItemBuilder;

  /// merger message builder
  final MessageItemContent? mergerMessageItemBuilder;

  /// group calling message builder, show without avatar and nickname
  final MessageItemContent? groupTRTCTipsItemBuilder;

  /// the builder for the whole message line, expect for those message type without avatar and nickname.
  final MessageRowBuilder? messageRowBuilder;

  MessageItemBuilder({
    this.locationMessageItemBuilder,
    this.textMessageItemBuilder,
    this.textReplyMessageItemBuilder,
    this.customMessageItemBuilder,
    this.imageMessageItemBuilder,
    this.soundMessageItemBuilder,
    this.videoMessageItemBuilder,
    this.fileMessageItemBuilder,
    this.faceMessageItemBuilder,
    this.groupTipsMessageItemBuilder,
    this.mergerMessageItemBuilder,
    this.messageRowBuilder,
    this.groupTRTCTipsItemBuilder,
  });
}

class ToolTipsConfig {
  final bool showReplyMessage;
  final bool showMultipleChoiceMessage;
  final bool showDeleteMessage;
  final bool showRecallMessage;
  final bool showCopyMessage;
  final bool showForwardMessage;
  final Widget? Function(V2TimMessage message, Function() closeTooltip,
      [Key? key])? additionalItemBuilder;

  ToolTipsConfig(
      {this.showDeleteMessage = true,
      this.showMultipleChoiceMessage = true,
      this.showRecallMessage = true,
      this.showReplyMessage = true,
      this.showCopyMessage = true,
      this.showForwardMessage = true,
      this.additionalItemBuilder});
}

class TIMUIKitHistoryMessageListItem extends StatefulWidget {
  /// message instance
  final V2TimMessage message;

  /// tap remote user avatar callback function
  final void Function(String userID)? onTapForOthersPortrait;

  /// the function use for reply message, when click replied message can scroll to it.
  final Function? onScrollToIndex;

  /// message is too long should scroll this message to begin so that the tool tips panel can show correctlly.
  final Function? onScrollToIndexBegin;

  /// the callback for long press event, except myself avatar
  final Function(String? userId, String? nickName)?
      onLongPressForOthersHeadPortrait;

  /// message item builder, works for customize all message types and row layout.
  final MessageItemBuilder? messageItemBuilder;

  /// controll avatart hide or show
  final bool showAvatar;

  /// message sending status
  final bool showMessageSending;

  /// message is read status
  final bool showMessageReadRecipt;

  /// message read status in group
  final bool showGroupMessageReadRecipt;

  /// allow message can long press
  final bool allowLongPress;

  /// allow avatar can tap
  final bool allowAvatarTap;

  /// allow notifi user when send reply message
  final bool allowAtUserWhenReply;

  /// allow show user nick name
  final bool showNickName;

  /// on message long press callback
  final Function(BuildContext context, V2TimMessage message)? onLongPress;

  /// tool tips panel configuration, long press message will show tool tips panel
  final ToolTipsConfig? toolTipsConfig;

  /// padding for each message item
  final EdgeInsetsGeometry? padding;

  /// padding for text message、sound message、reply message
  final EdgeInsetsGeometry? textPadding;

  /// avatar builder
  final Widget Function(BuildContext context, V2TimMessage message)?
      userAvatarBuilder;

  /// theme info for message and avatar
  final MessageThemeData? themeData;

  /// builder for nick name row
  final Widget Function(BuildContext context, V2TimMessage message)?
      topRowBuilder;

  /// builder for bottom raw which under message content
  final Widget Function(BuildContext context, V2TimMessage message)?
      bottomRowBuilder;

  const TIMUIKitHistoryMessageListItem(
      {Key? key,
      required this.message,
      this.showNickName = true,
      this.onScrollToIndex,
      this.onScrollToIndexBegin,
      this.onTapForOthersPortrait,
      this.messageItemBuilder,
      this.onLongPressForOthersHeadPortrait,
      this.showAvatar = true,
      this.showMessageSending = true,
      this.showMessageReadRecipt = true,
      this.allowLongPress = true,
      this.toolTipsConfig,
      this.onLongPress,
      this.showGroupMessageReadRecipt = false,
      this.allowAtUserWhenReply = true,
      this.allowAvatarTap = true,
      this.userAvatarBuilder,
      this.themeData,
      this.padding,
      this.textPadding,
      this.topRowBuilder,
      this.bottomRowBuilder})
      : super(key: key);

  @override
  State<StatefulWidget> createState() => _TIMUIKItHistoryMessageListItemState();
}

class TipsActionItem extends TIMUIKitStatelessWidget {
  final String label;
  final String icon;
  final String? package;

  TipsActionItem(
      {Key? key, required this.label, required this.icon, this.package})
      : super(key: key);

  @override
  Widget tuiBuild(BuildContext context, TUIKitBuildValue value) {
    return Column(
      children: [
        Image.asset(
          icon,
          package: package,
          width: 20,
          height: 20,
        ),
        const SizedBox(
          height: 4,
        ),
        Text(
          label,
          style: const TextStyle(
            decoration: TextDecoration.none,
            color: Color(0xFF444444),
            fontSize: 10,
          ),
        )
      ],
    );
  }
}

class _TIMUIKItHistoryMessageListItemState
    extends TIMUIKitState<TIMUIKitHistoryMessageListItem>
    with TickerProviderStateMixin {
  SuperTooltip? tooltip;
  final TUIChatViewModel model = serviceLocator<TUIChatViewModel>();
  final TUIThemeViewModel themeModel = serviceLocator<TUIThemeViewModel>();
  // bool isChecked = false;
  final GlobalKey _key = GlobalKey();

  _buildLongPressTipItem() {
    final isCanRevoke = isRevokable(widget.message.timestamp!);
    final shouldShowRevokeAction = isCanRevoke &&
        (widget.message.isSelf ?? false) &&
        widget.message.status != MessageStatus.V2TIM_MSG_STATUS_SEND_FAIL;
    final tooltipsConfig = widget.toolTipsConfig;
    final defaultTipsList = [
      {
        "label": TIM_t("复制"),
        "id": "copyMessage",
        "icon": "images/copy_message.png"
      },
      {
        "label": TIM_t("转发"),
        "id": "forwardMessage",
        "icon": "images/forward_message.png"
      },
      {
        "label": TIM_t("多选"),
        "id": "multiSelect",
        "icon": "images/multi_message.png"
      },
      {
        "label": TIM_t("引用"),
        "id": "replyMessage",
        "icon": "images/reply_message.png"
      },
      {
        "label": TIM_t("删除"),
        "id": "delete",
        "icon": "images/delete_message.png"
      },
      if (shouldShowRevokeAction)
        {
          "label": TIM_t("撤回"),
          "id": "revoke",
          "icon": "images/revoke_message.png"
        }
    ];
    if (widget.message.elemType != MessageElemType.V2TIM_ELEM_TYPE_TEXT) {
      defaultTipsList.removeAt(0);
    }
    List formatedTipsList = defaultTipsList;
    if (tooltipsConfig != null) {
      formatedTipsList = defaultTipsList.where((element) {
        final type = element["id"];
        if (type == "copyMessage") {
          return tooltipsConfig.showCopyMessage;
        }
        if (type == "forwardMessage") {
          return tooltipsConfig.showForwardMessage;
        }
        if (type == "replyMessage") {
          return tooltipsConfig.showReplyMessage;
        }
        if (type == "delete") {
          return tooltipsConfig.showDeleteMessage;
        }

        if (type == "revoke") {
          return tooltipsConfig.showRecallMessage;
        }
        return true;
      }).toList();
    }
    return formatedTipsList
        .map(
          (item) => Material(
            child: ItemInkWell(
              onTap: () {
                _onTap(item["id"]!);
              },
              child: Column(
                children: [
                  Image.asset(
                    item["icon"]!,
                    package: 'tim_ui_kit',
                    width: 20,
                    height: 20,
                  ),
                  const SizedBox(
                    height: 4,
                  ),
                  Text(
                    item["label"]!,
                    style: TextStyle(
                      decoration: TextDecoration.none,
                      color: themeModel.theme.darkTextColor,
                      fontSize: 10,
                    ),
                  )
                ],
              ),
            ),
          ),
        )
        .toList();
  }

  bool isRevokable(int timestamp) =>
      (DateTime.now().millisecondsSinceEpoch / 1000).ceil() - timestamp < 120;

  Widget ItemInkWell({
    Widget? child,
    GestureTapCallback? onTap,
  }) {
    return SizedBox(
      width: 50,
      child: InkWell(
        onTap: onTap,
        child: Container(
          decoration: const BoxDecoration(
            color: Colors.white,
          ),
          child: child,
        ),
      ),
    );
  }

  Widget _getTooltipAction() {
    final bool haveExtraTipsConfig = widget.toolTipsConfig != null &&
        widget.toolTipsConfig?.additionalItemBuilder != null;
    Widget? extraTipsActionItem = haveExtraTipsConfig
        ? widget.toolTipsConfig!.additionalItemBuilder!(
            widget.message, closeTooltip)
        : null;
    return Container(
        padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 6),
        child: ConstrainedBox(
          constraints: const BoxConstraints(
            maxWidth: 250,
          ),
          child: Wrap(
            direction: Axis.horizontal,
            alignment: WrapAlignment.start,
            // crossAxisAlignment: crossAxisAlignment.st,
            spacing: 4,
            runSpacing: 24,
            children: [
              ..._buildLongPressTipItem(),
              if (extraTipsActionItem != null) extraTipsActionItem
            ],
          ),
        ));
  }

  closeTooltip() {
    tooltip?.close();
  }

  initTools({
    BuildContext? context,
    bool isLongMessage = false,
  }) {
    double arrowTipDistance = 30;
    TooltipDirection popupDirection = TooltipDirection.up;

    if (context != null) {
      RenderBox? box = _key.currentContext?.findRenderObject() as RenderBox?;
      if (box != null) {
        Offset offset = box.localToGlobal(Offset.zero);
        if (offset.dy < 240 && !isLongMessage) {
          popupDirection = TooltipDirection.down;
        }
      }
      arrowTipDistance = (context.size!.height / 2).roundToDouble() +
          (isLongMessage ? -120 : 10);
    }

    tooltip = SuperTooltip(
      popupDirection: popupDirection,
      minimumOutSidePadding: 0,
      arrowTipDistance: arrowTipDistance,
      arrowBaseWidth: 10.0,
      arrowLength: 10.0,
      right: widget.message.isSelf! ? 60 : null,
      left: widget.message.isSelf! ? null : 60,
      borderColor: Colors.white,
      backgroundColor: Colors.white,
      shadowColor: Colors.black26,
      hasShadow: true,
      borderWidth: 1.0,
      showCloseButton: ShowCloseButton.none,
      touchThroughAreaShape: ClipAreaShape.rectangle,
      content: _getTooltipAction(),
    );
  }

  _onTap(String operation) async {
    final messageItem = widget.message;
    final msgID = messageItem.msgID as String;
    switch (operation) {
      case "delete":
        model.deleteMsg(msgID);
        break;
      case "revoke":
        model.revokeMsg(msgID);
        break;
      case "multiSelect":
        model.updateMultiSelectStatus(true);
        model.addToMultiSelectedMessageList(widget.message);
        break;
      case "forwardMessage":
        model.addToMultiSelectedMessageList(widget.message);
        Navigator.push(
            context,
            MaterialPageRoute(
                builder: (context) => const ForwardMessageScreen(
                      conversationType: 1,
                    )));
        break;
      case "copyMessage":
        if (widget.message.elemType == MessageElemType.V2TIM_ELEM_TYPE_TEXT) {
          await Clipboard.setData(
              ClipboardData(text: widget.message.textElem?.text ?? ""));
          onTIMCallback(TIMCallback(
              type: TIMCallbackType.INFO,
              infoRecommendText: TIM_t("已复制"),
              infoCode: 6660408));
        }
        break;
      case "replyMessage":
        model.setRepliedMessage(widget.message);
        if (widget.allowAtUserWhenReply &&
            widget.onLongPressForOthersHeadPortrait != null) {
          widget.onLongPressForOthersHeadPortrait!(
              widget.message.sender, widget.message.nickName);
        }
        break;
      default:
        onTIMCallback(TIMCallback(
            type: TIMCallbackType.INFO,
            infoRecommendText: TIM_t("暂未实现"),
            infoCode: 6660409));
    }

    tooltip!.close();
  }

  bool isReplyMessage(V2TimMessage message) {
    final hasCustomdata =
        message.cloudCustomData != null && message.cloudCustomData != "";
    if (hasCustomdata) {
      bool canparse = false;
      try {
        final messageCloudCustomData = json.decode(message.cloudCustomData!);
        CloudCustomData.fromJson(messageCloudCustomData);
        canparse = true;
      } catch (error) {
        canparse = false;
      }
      return canparse;
    }
    return hasCustomdata;
  }

  Widget _messageItemBuilder(V2TimMessage messageItem) {
    final msgType = messageItem.elemType;
    final isShowJump = (model.jumpMsgID == messageItem.msgID) &&
        (messageItem.msgID?.isNotEmpty ?? false);
    final MessageItemBuilder? messageItemBuilder = widget.messageItemBuilder;
    final isFromSelf = messageItem.isSelf ?? false;
    void clearJump() {
      // Future.delayed(const Duration(milliseconds: 100), () {
      model.jumpMsgID = "";
      // });
    }

    switch (msgType) {
      case MessageElemType.V2TIM_ELEM_TYPE_CUSTOM:
        if (messageItemBuilder?.customMessageItemBuilder != null) {
          return messageItemBuilder!.customMessageItemBuilder!(
            messageItem,
            isShowJump,
            () => model.jumpMsgID = "",
          )!;
        }
        return TIMUIKitCustomElem(
          customElem: messageItem.customElem,
          isFromSelf: isFromSelf,
          messageBackgroundColor: widget.themeData?.messageBackgroundColor,
          messageBorderRadius: widget.themeData?.messageBorderRadius,
          messageFontStyle: widget.themeData?.messageTextStyle,
          textPadding: widget.textPadding,
        );
      case MessageElemType.V2TIM_ELEM_TYPE_SOUND:
        if (messageItemBuilder?.soundMessageItemBuilder != null) {
          return messageItemBuilder!.soundMessageItemBuilder!(
            messageItem,
            isShowJump,
            clearJump,
          )!;
        }
        return TIMUIKitSoundElem(
          soundElem: messageItem.soundElem!,
          msgID: messageItem.msgID ?? "",
          isFromSelf: messageItem.isSelf ?? false,
          clearJump: clearJump,
          isShowJump: isShowJump,
          localCustomInt: messageItem.localCustomInt,
          borderRadius: widget.themeData?.messageBorderRadius,
          fontStyle: widget.themeData?.messageTextStyle,
          backgroundColor: widget.themeData?.messageBackgroundColor,
          textPadding: widget.textPadding,
        );
      case MessageElemType.V2TIM_ELEM_TYPE_TEXT:
        if (isReplyMessage(messageItem)) {
          if (messageItemBuilder?.textReplyMessageItemBuilder != null) {
            return messageItemBuilder!.textReplyMessageItemBuilder!(
              messageItem,
              isShowJump,
              clearJump,
            )!;
          }
          return TIMUIKitReplyElem(
            message: messageItem,
            clearJump: () => model.jumpMsgID = "",
            isShowJump: isShowJump,
            scrollToIndex: widget.onScrollToIndex ?? () {},
            borderRadius: widget.themeData?.messageBorderRadius,
            fontStyle: widget.themeData?.messageTextStyle,
            backgroundColor: widget.themeData?.messageBackgroundColor,
            textPadding: widget.textPadding,
          );
        }
        if (messageItemBuilder?.textMessageItemBuilder != null) {
          return messageItemBuilder!.textMessageItemBuilder!(
            messageItem,
            isShowJump,
            clearJump,
          )!;
        }
        return TIMUIKitTextElem(
          chatModel: model,
          message: messageItem,
          isFromSelf: messageItem.isSelf ?? false,
          clearJump: () => model.jumpMsgID = "",
          isShowJump: isShowJump,
          borderRadius: widget.themeData?.messageBorderRadius,
          fontStyle: widget.themeData?.messageTextStyle,
          backgroundColor: widget.themeData?.messageBackgroundColor,
          textPadding: widget.textPadding,
        );
      case MessageElemType.V2TIM_ELEM_TYPE_FACE:
        if (messageItemBuilder?.faceMessageItemBuilder != null) {
          return messageItemBuilder!.faceMessageItemBuilder!(
            messageItem,
            isShowJump,
            clearJump,
          )!;
        }
        return TIMUIKitFaceElem(
          path: messageItem.faceElem!.data ?? "",
          clearJump: () => model.jumpMsgID = "",
          isShowJump: isShowJump,
        );
      case MessageElemType.V2TIM_ELEM_TYPE_FILE:
        if (messageItemBuilder?.fileMessageItemBuilder != null) {
          return messageItemBuilder!.fileMessageItemBuilder!(
            messageItem,
            isShowJump,
            clearJump,
          )!;
        }
        return TIMUIKitFileElem(
            messageID: messageItem.msgID,
            fileElem: messageItem.fileElem,
            isSelf: messageItem.isSelf ?? false);
      case MessageElemType.V2TIM_ELEM_TYPE_GROUP_TIPS:
        if (messageItemBuilder?.groupTipsMessageItemBuilder != null) {
          return messageItemBuilder!.groupTipsMessageItemBuilder!(
            messageItem,
            isShowJump,
            clearJump,
          )!;
        }
        return Text(TIM_t("[群系统消息]"));
      case MessageElemType.V2TIM_ELEM_TYPE_IMAGE:
        if (messageItemBuilder?.imageMessageItemBuilder != null) {
          return messageItemBuilder!.imageMessageItemBuilder!(
            messageItem,
            isShowJump,
            clearJump,
          )!;
        }
        return TIMUIKitImageElem(
          clearJump: () => model.jumpMsgID = "",
          isShowJump: isShowJump,
          message: messageItem,
          key: Key("${messageItem.seq}_${messageItem.timestamp}"),
        );
      case MessageElemType.V2TIM_ELEM_TYPE_VIDEO:
        if (messageItemBuilder?.videoMessageItemBuilder != null) {
          return messageItemBuilder!.imageMessageItemBuilder!(
            messageItem,
            isShowJump,
            clearJump,
          )!;
        }
        return TIMUIKitVideoElem(
          messageItem,
          isShowJump: isShowJump,
          clearJump: () => model.jumpMsgID = "",
        );
      case MessageElemType.V2TIM_ELEM_TYPE_LOCATION:
        if (messageItemBuilder?.locationMessageItemBuilder != null) {
          return messageItemBuilder!.locationMessageItemBuilder!(
            messageItem,
            isShowJump,
            clearJump,
          )!;
        }
        return Text(TIM_t("[位置]"));
      case MessageElemType.V2TIM_ELEM_TYPE_MERGER:
        if (messageItemBuilder?.mergerMessageItemBuilder != null) {
          return messageItemBuilder!.mergerMessageItemBuilder!(
            messageItem,
            isShowJump,
            clearJump,
          )!;
        }
        return TIMUIKitMergerElem(
            mergerElem: messageItem.mergerElem!,
            messageID: messageItem.msgID ?? "",
            isSelf: messageItem.isSelf ?? false);
      default:
        return Text(TIM_t("[未知消息]"));
    }
  }

  Widget _groupTipsMessageBuilder() {
    final messageItem = widget.message;
    return Container(
        padding: const EdgeInsets.only(bottom: 20),
        child:
            TIMUIKitGroupTipsElem(groupTipsElem: messageItem.groupTipsElem!));
  }

  Widget _groupTRTCTipsMessageBuilder() {
    final messageItem = widget.message;
    return TIMUIKitGroupTrtcTipsElem(
      key: ValueKey(messageItem.msgID),
      customMessage: messageItem,
    );
  }

  Widget _selfRevokeEditMessageBuilder(theme, model) {
    return Container(
        margin: const EdgeInsets.symmetric(vertical: 20),
        alignment: Alignment.center,
        child: Text.rich(TextSpan(children: [
          TextSpan(
            text: TIM_t("您撤回了一条消息，"),
            style: TextStyle(color: theme.weakTextColor),
          ),
          TextSpan(
            text: TIM_t("重新编辑"),
            recognizer: TapGestureRecognizer()
              ..onTap = () {
                model.editRevokedMsg = widget.message.textElem?.text ?? "";
              },
            style: TextStyle(color: theme.primaryColor),
          )
        ], style: const TextStyle(fontSize: 12))));
  }

  Widget _revokedMessageBuilder(theme, String option2) {
    return Container(
        margin: const EdgeInsets.symmetric(vertical: 20),
        alignment: Alignment.center,
        child: Text(
          TIM_t_para("{{option2}}撤回了一条消息", "$option2撤回了一条消息")(option2: option2),
          style: TextStyle(color: theme.weakTextColor, fontSize: 12),
        ));
  }

  Widget _timeDividerBuilder(theme, int timeStamp) {
    return Container(
      alignment: Alignment.center,
      margin: const EdgeInsets.symmetric(vertical: 20),
      child: Text(
        TimeAgo().getTimeForMessage(timeStamp),
        style: widget.themeData?.timelineTextStyle ??
            TextStyle(fontSize: 12, color: theme.weakTextColor),
      ),
    );
  }

  _onLongPress(c, V2TimMessage message) {
    if (tooltip != null && tooltip!.isOpen) {
      tooltip!.close();
      return;
    }
    tooltip = null;

    final screenHeight = MediaQuery.of(context).size.height;
    if (context.size!.height + 180 > screenHeight) {
      initTools(context: c, isLongMessage: true);
      if (widget.onScrollToIndexBegin != null) {
        widget.onScrollToIndexBegin!(message);
      }
      Future.delayed(const Duration(milliseconds: 500), () {
        tooltip!.show(c);
      });
    } else {
      initTools(context: c);
      tooltip!.show(c);
    }
  }

  double getMaxWidth(isSelect) {
    final size = MediaQuery.of(context).size;
    final width = size.width;
    return width - (isSelect ? 180 : 150);
  }

  Widget _getMessageItemBuilder(V2TimMessage message, int? messageStatues) {
    final messageBuilder = _messageItemBuilder;

    return messageBuilder(widget.message);
  }

  // 弹出对话框
  Future<bool?> showResendMsgFailDialg(BuildContext context) {
    return showDialog<bool>(
      context: context,
      builder: (context) {
        return CupertinoAlertDialog(
          title: Text(TIM_t("您确定要重发这条消息么？")),
          actions: [
            CupertinoDialogAction(
              child: Text(TIM_t("确定")),
              onPressed: () {
                Navigator.of(context).pop(true);
              },
            ),
            CupertinoDialogAction(
              child: Text(TIM_t("取消")),
              isDestructiveAction: true,
              onPressed: () {
                Navigator.of(context).pop();
              },
            ),
          ],
        );
      },
    );
  }

  _onMsgSendFailIconTap(V2TimMessage message) {
    final convID = model.currentSelectedConv;
    final convType =
        model.currentSelectedConvType == 1 ? ConvType.c2c : ConvType.group;
    MessageUtils.handleMessageError(
        model.reSendFailMessage(
            message: message, convType: convType, convID: convID),
        context);
  }

  @override
  void dispose() {
    super.dispose();
    if (tooltip?.isOpen ?? false) {
      tooltip?.close();
    }
  }

  @override
  Widget tuiBuild(BuildContext context, TUIKitBuildValue value) {
    final TUITheme theme = value.theme;

    final message = widget.message;
    final msgType = message.elemType;
    final isSelf = message.isSelf ?? false;
    final msgStatus = message.status;
    final isGroupTipsMsg =
        msgType == MessageElemType.V2TIM_ELEM_TYPE_GROUP_TIPS;
    final isRevokedMsg = msgStatus == 6;
    final isTimeDivider = msgType == 11;
    final isPeerRead = message.isPeerRead ?? false;
    final bool isRevokeEditable =
        widget.message.elemType == MessageElemType.V2TIM_ELEM_TYPE_TEXT;
    // final chatConfig = Provider.of<TIMUIKitChatConfig>(context);
    if (isTimeDivider) {
      return _timeDividerBuilder(theme, message.timestamp ?? 0);
    }
    void clearJump() {
      // Future.delayed(const Duration(milliseconds: 100), () {
      //   clearJump();
      // });
      model.jumpMsgID = "";
    }

    if (isGroupTipsMsg) {
      if (widget.messageItemBuilder?.groupTipsMessageItemBuilder != null) {
        final groupTipsMessage =
            widget.messageItemBuilder!.groupTipsMessageItemBuilder!(
          message,
          (model.jumpMsgID == message.msgID),
          clearJump,
        );
        return groupTipsMessage ?? _groupTipsMessageBuilder();
      }
      return _groupTipsMessageBuilder();
    }

    if (MessageUtils.isGroupCallingMessage(message)) {
      if (widget.messageItemBuilder?.groupTRTCTipsItemBuilder != null) {
        final groupTrtcTipsMessage =
            widget.messageItemBuilder!.groupTRTCTipsItemBuilder!(
          message,
          (model.jumpMsgID == message.msgID),
          clearJump,
        );
        return groupTrtcTipsMessage ?? _groupTRTCTipsMessageBuilder();
      }
      return _groupTRTCTipsMessageBuilder();
    }

    if (isRevokedMsg) {
      final displayName =
          isSelf ? TIM_t("您") : message.nickName ?? message.sender;
      return isSelf && isRevokeEditable && isRevokable(message.timestamp!)
          ? _selfRevokeEditMessageBuilder(theme, model)
          : _revokedMessageBuilder(theme, displayName ?? "");
    }

    // 使用自定义行
    if (widget.messageItemBuilder?.messageRowBuilder != null) {
      return widget.messageItemBuilder!.messageRowBuilder!(
        message,
        _getMessageItemBuilder(message, message.status),
        widget.onScrollToIndex ?? () {},
        message.msgID == model.jumpMsgID,
        clearJump,
        widget.onScrollToIndexBegin ?? () {},
      );
    }

    final messageReadReceipt =
        model.getMessageReadReceipt(widget.message.msgID ?? '');

    return Container(
      margin: widget.padding ?? const EdgeInsets.only(bottom: 20),
      child: Row(
        key: _key,
        mainAxisAlignment: MainAxisAlignment.spaceBetween,
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          if (model.isMultiSelect)
            Container(
              margin: const EdgeInsets.only(right: 12, top: 10),
              child: CheckBoxButton(
                isChecked: model.multiSelectedMessageList.contains(message),
                onChanged: (value) {
                  if (value) {
                    model.addToMultiSelectedMessageList(message);
                  } else {
                    model.removeFromMultiSelectedMessageList(message);
                  }
                },
              ),
            ),
          Expanded(
            child: GestureDetector(
              behavior:
                  model.isMultiSelect ? HitTestBehavior.translucent : null,
              onTap: () {
                if (model.isMultiSelect) {
                  final checked =
                      model.multiSelectedMessageList.contains(message);
                  if (checked) {
                    model.removeFromMultiSelectedMessageList(message);
                  } else {
                    model.addToMultiSelectedMessageList(message);
                  }
                }
              },
              child: Row(
                crossAxisAlignment: CrossAxisAlignment.start,
                mainAxisAlignment:
                    isSelf ? MainAxisAlignment.end : MainAxisAlignment.start,
                children: [
                  if (!isSelf && widget.showAvatar)
                    InkWell(
                      onTap: () {
                        if (widget.onTapForOthersPortrait != null &&
                            widget.allowAvatarTap) {
                          widget.onTapForOthersPortrait!(message.sender ?? "");
                        }
                      },
                      onLongPress: () {
                        if (widget.onLongPressForOthersHeadPortrait != null) {}
                        widget.onLongPressForOthersHeadPortrait!(
                            message.sender, message.nickName);
                      },
                      child: widget.userAvatarBuilder != null
                          ? widget.userAvatarBuilder!(context, message)
                          : SizedBox(
                              width: 40,
                              height: 40,
                              child: Avatar(
                                  borderRadius:
                                      widget.themeData?.avatarBorderRadius,
                                  faceUrl: message.faceUrl ?? "",
                                  showName:
                                      MessageUtils.getDisplayName(message)),
                            ),
                    ),
                  Container(
                    margin: widget.showAvatar
                        ? (isSelf
                            ? const EdgeInsets.only(right: 13)
                            : const EdgeInsets.only(left: 13))
                        : null,
                    child: Column(
                      crossAxisAlignment: isSelf
                          ? CrossAxisAlignment.end
                          : CrossAxisAlignment.start,
                      children: [
                        if (widget.showNickName)
                          widget.topRowBuilder != null
                              ? widget.topRowBuilder!(context, message)
                              : Container(
                                  margin: const EdgeInsets.only(bottom: 4),
                                  child: ConstrainedBox(
                                    constraints: BoxConstraints(
                                        maxWidth:
                                            MediaQuery.of(context).size.width /
                                                1.7),
                                    child: Text(
                                      MessageUtils.getDisplayName(message),
                                      overflow: TextOverflow.ellipsis,
                                      style:
                                          widget.themeData?.nickNameTextStyle ??
                                              TextStyle(
                                                  fontSize: 12,
                                                  color: theme.weakTextColor),
                                    ),
                                  )),
                        Row(
                          crossAxisAlignment: CrossAxisAlignment.end,
                          children: [
                            if (widget.showMessageReadRecipt &&
                                model.currentSelectedConvType == 1 &&
                                isSelf &&
                                message.status ==
                                    MessageStatus.V2TIM_MSG_STATUS_SEND_SUCC)
                              Container(
                                padding: const EdgeInsets.only(bottom: 3),
                                margin: const EdgeInsets.only(right: 6),
                                child: Text(
                                  isPeerRead ? TIM_t("已读") : TIM_t("未读"),
                                  style: TextStyle(
                                      color: theme.weakTextColor, fontSize: 12),
                                ),
                              ),
                            if (widget.showGroupMessageReadRecipt &&
                                model.currentSelectedConvType == 2 &&
                                isSelf &&
                                message.status ==
                                    MessageStatus.V2TIM_MSG_STATUS_SEND_SUCC &&
                                messageReadReceipt != null)
                              TIMUIKitMessageReadReceipt(
                                messageItem: widget.message,
                                onTapAvatar: widget.onTapForOthersPortrait,
                                messageReadReceipt: messageReadReceipt,
                              ),
                            if (widget.showMessageSending &&
                                isSelf &&
                                message.status ==
                                    MessageStatus.V2TIM_MSG_STATUS_SENDING)
                              Container(
                                padding: const EdgeInsets.only(bottom: 10),
                                margin: const EdgeInsets.only(right: 4),
                                child: const Loading(),
                              ),
                            if (isSelf &&
                                message.status ==
                                    MessageStatus.V2TIM_MSG_STATUS_SEND_FAIL)
                              Container(
                                  padding: const EdgeInsets.only(bottom: 3),
                                  margin: const EdgeInsets.only(right: 6),
                                  child: GestureDetector(
                                    onTap: () async {
                                      final reSend =
                                          await showResendMsgFailDialg(context);
                                      if (reSend != null) {
                                        _onMsgSendFailIconTap(message);
                                      }
                                    },
                                    child: Icon(Icons.error,
                                        color: theme.cautionColor, size: 18),
                                  )),
                            Container(
                              constraints: BoxConstraints(
                                maxWidth: getMaxWidth(false),
                              ),
                              child: Builder(builder: (context) {
                                return GestureDetector(
                                  child: IgnorePointer(
                                      ignoring: model.isMultiSelect,
                                      child: _getMessageItemBuilder(
                                          message, message.status)),
                                  onLongPress: () {
                                    if (widget.allowLongPress) {
                                      _onLongPress(context, message);
                                    }
                                    if (widget.onLongPress != null) {
                                      widget.onLongPress!(context, message);
                                    }
                                  },
                                );
                              }),
                            ),
                            if (!isSelf &&
                                message.elemType ==
                                    MessageElemType.V2TIM_ELEM_TYPE_SOUND &&
                                message.localCustomInt != null &&
                                message.localCustomInt !=
                                    HistoryMessageDartConstant.read)
                              Padding(
                                  padding: const EdgeInsets.only(
                                      left: 5, bottom: 12),
                                  child: Icon(Icons.circle,
                                      color: theme.cautionColor, size: 10)),
                          ],
                        ),
                        if (widget.bottomRowBuilder != null)
                          widget.bottomRowBuilder!(context, message)
                      ],
                    ),
                  ),
                  if (isSelf && widget.showAvatar)
                    widget.userAvatarBuilder != null
                        ? widget.userAvatarBuilder!(context, message)
                        : SizedBox(
                            width: 40,
                            height: 40,
                            child: Avatar(
                                borderRadius:
                                    widget.themeData?.avatarBorderRadius,
                                faceUrl: message.faceUrl ?? "",
                                showName: MessageUtils.getDisplayName(message)),
                          ),
                ],
              ),
            ),
          ),
        ],
      ),
    );
  }
}
文件：/im-flutter-uikit/package_src/tim_ui_kit/lib/ui/views/TIMUIKitChat/TIMUIKItMessageList/tim_uikit_history_message_list_container.dart
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:scroll_to_index/scroll_to_index.dart';
import 'package:tencent_im_base/tencent_im_base.dart';
import 'package:tim_ui_kit/base_widgets/tim_ui_kit_state.dart';
import 'package:tim_ui_kit/business_logic/view_models/tui_chat_view_model.dart';
import 'package:tim_ui_kit/data_services/services_locatar.dart';
import 'package:tim_ui_kit/ui/constants/history_message_constant.dart';
import 'package:tim_ui_kit/ui/views/TIMUIKitChat/TIMUIKItMessageList/TIMUIKitTongue/tim_uikit_chat_history_message_list_tongue.dart';
import 'package:tim_ui_kit/ui/views/TIMUIKitChat/TIMUIKItMessageList/tim_uikit_chat_history_message_list_item.dart';
import 'package:tim_ui_kit/ui/views/TIMUIKitChat/TIMUIKItMessageList/tim_uikit_chat_history_message_list.dart';
import 'package:tim_ui_kit/ui/views/TIMUIKitChat/tim_uikit_chat_config.dart';
import 'package:tim_ui_kit/base_widgets/tim_ui_kit_base.dart';

enum LoadingPlace {
  none,
  top,
  bottom,
}

class TIMUIKitHistoryMessageListContainer extends StatefulWidget {
  final Widget Function(BuildContext, V2TimMessage?)? itemBuilder;
  final AutoScrollController? scrollController;
  final String conversationID;
  final Function(String? userId, String? nickName)?
      onLongPressForOthersHeadPortrait;
  final List<V2TimGroupAtInfo?>? groupAtInfoList;
  final V2TimMessage? initFindingMsg;

  /// message item builder, works for customize all message types and row layout.
  final MessageItemBuilder? messageItemBuilder;

  /// the builder for tongue
  final TongueItemBuilder? tongueItemBuilder;

  final Widget? Function(V2TimMessage message, Function() closeTooltip,
      [Key? key])? extraTipsActionItemBuilder;

  /// conversation type
  final int conversationType;

  final void Function(String userID)? onTapAvatar;

  final bool showNickName;

  final ListView? mainHistoryListConfig;

  /// tool tips panel configuration, long press message will show tool tips panel
  final ToolTipsConfig? toolTipsConfig;

  const TIMUIKitHistoryMessageListContainer(
      {Key? key,
      this.itemBuilder,
      this.scrollController,
      required this.conversationID,
      required this.conversationType,
      this.onLongPressForOthersHeadPortrait,
      this.groupAtInfoList,
      this.messageItemBuilder,
      this.tongueItemBuilder,
      this.extraTipsActionItemBuilder,
      this.onTapAvatar,
      this.showNickName = true,
      this.initFindingMsg,
      this.mainHistoryListConfig,
      this.toolTipsConfig})
      : super(key: key);
  @override
  State<StatefulWidget> createState() =>
      _TIMUIKitHistoryMessageListContainerState();
}

class _TIMUIKitHistoryMessageListContainerState
    extends TIMUIKitState<TIMUIKitHistoryMessageListContainer> {
  final TUIChatViewModel model = serviceLocator<TUIChatViewModel>();
  late TIMUIKitHistoryMessageListController _historyMessageListController;

  List<V2TimMessage?> historyMessageList = [];

  Future<void> requestForData(String? lastMsgID, [int? count]) async {
    final convID = widget.conversationID;
    final convType = widget.conversationType;
    if (model.haveMoreData) {
      await model.loadData(
          count: count ?? HistoryMessageDartConstant.getCount, //20
          userID: convType == 1 ? convID : null,
          groupID: convType == 2 ? convID : null,
          lastMsgID: lastMsgID);
    }
  }

  @override
  void initState() {
    super.initState();
    _historyMessageListController = TIMUIKitHistoryMessageListController(
        scrollController: widget.scrollController);
  }

  @override
  Widget tuiBuild(BuildContext context, TUIKitBuildValue value) {
    final chatConfig = Provider.of<TIMUIKitChatConfig>(context);
    return TIMUIKitHistoryMessageListSelector(
      builder: (context, messageList, child) {
        historyMessageList = messageList;
        return TIMUIKitHistoryMessageList(
          controller: _historyMessageListController,
          groupAtInfoList: widget.groupAtInfoList,
          mainHistoryListConfig: widget.mainHistoryListConfig,
          itemBuilder: (context, message) {
            return TIMUIKitHistoryMessageListItem(
              onScrollToIndex: _historyMessageListController.scrollToIndex,
              onScrollToIndexBegin:
                  _historyMessageListController.scrollToIndexBegin,
              toolTipsConfig: widget.toolTipsConfig ??
                  ToolTipsConfig(
                      additionalItemBuilder: widget.extraTipsActionItemBuilder),
              message: message!,
              onTapForOthersPortrait: widget.onTapAvatar,
              showNickName: widget.showNickName,
              messageItemBuilder: widget.messageItemBuilder,
              onLongPressForOthersHeadPortrait:
                  widget.onLongPressForOthersHeadPortrait,
              allowAtUserWhenReply: chatConfig.isAtWhenReply,
              allowAvatarTap: chatConfig.isAllowClickAvatar,
              allowLongPress: chatConfig.isAllowLongPressMessage,
            );
          },
          tongueItemBuilder: widget.tongueItemBuilder,
          initFindingMsg: widget.initFindingMsg,
          messageList: messageList,
          onLoadMore: requestForData,
        );
      },
      conversationID: widget.conversationID,
    );
  }
}
文件：/im-flutter-uikit/package_src/tim_ui_kit/lib/ui/views/TIMUIKitChat/TIMUIKItMessageList/tim_uikit_message_read_receipt.dart
import 'package:flutter/material.dart';
import 'package:tim_ui_kit/base_widgets/tim_ui_kit_statelesswidget.dart';
import 'package:tim_ui_kit/tim_ui_kit.dart';
import 'package:tim_ui_kit/ui/widgets/message_read_receipt.dart';
import 'package:tim_ui_kit/base_widgets/tim_ui_kit_base.dart';

class TIMUIKitMessageReadReceipt extends TIMUIKitStatelessWidget {
  final V2TimMessageReceipt messageReadReceipt;
  final V2TimMessage messageItem;
  final void Function(String)? onTapAvatar;

  TIMUIKitMessageReadReceipt(
      {Key? key,
      required this.messageReadReceipt,
      this.onTapAvatar,
      required this.messageItem})
      : super(key: key);

  @override
  Widget tuiBuild(BuildContext context, TUIKitBuildValue value) {
    final TUITheme theme = value.theme;
    return Container(
      padding: const EdgeInsets.only(bottom: 3),
      margin: const EdgeInsets.only(right: 6),
      child: messageReadReceipt.unreadCount == 0
          ? Icon(
              Icons.check_circle_outline,
              size: 18,
              color: theme.weakTextColor,
            )
          : GestureDetector(
              onTap: () {
                if ((messageReadReceipt.readCount ?? 0) > 0) {
                  Navigator.push(
                      context,
                      MaterialPageRoute(
                          builder: (context) => MessageReadReceipt(
                              onTapAvatar: onTapAvatar,
                              messageItem: messageItem,
                              unreadCount: messageReadReceipt.unreadCount ?? 0,
                              readCount: messageReadReceipt.readCount ?? 0)));
                }
              },
              child: Container(
                width: 14,
                height: 14,
                alignment: Alignment.center,
                decoration: BoxDecoration(
                    shape: BoxShape.circle,
                    border: Border.all(
                        width: 1.3,
                        color: (messageReadReceipt.readCount ?? 0) > 0
                            ? theme.primaryColor!
                            : theme.weakTextColor!)),
                child: (messageReadReceipt.readCount ?? 0) > 0
                    ? Text(
                        '${messageReadReceipt.readCount}',
                        textAlign: TextAlign.center,
                        style:
                            TextStyle(fontSize: 8, color: theme.primaryColor),
                      )
                    : null,
              ),
            ),
    );
  }
}
文件：/im-flutter-uikit/package_src/tim_ui_kit/lib/ui/views/TIMUIKitChat/TIMUIKItMessageList/utils.dart
import 'package:tim_ui_kit/tim_ui_kit.dart';

class TIMUIKitChatUtils {
  static String? getMessageIDWithinIndex(
      List<V2TimMessage?> messageList, int index) {
    if (messageList[index]!.elemType == 11) {
      return getMessageIDWithinIndex(messageList, index - 1);
    }
    return messageList[index]!.msgID;
  }
}
文件：/im-flutter-uikit/package_src/tim_ui_kit/lib/ui/views/TIMUIKitChat/TIMUIKItMessageList/TIMUIKitTongue/tim_uikit_chat_history_message_list_tongue.dart
import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:tim_ui_kit/base_widgets/tim_ui_kit_statelesswidget.dart';
import 'package:tim_ui_kit/ui/views/TIMUIKitChat/TIMUIKItMessageList/TIMUIKitTongue/tim_uikit_tongue_item.dart';
import 'package:tim_ui_kit/base_widgets/tim_ui_kit_base.dart';

enum MessageListTongueType {
  none,
  toLatest,
  showUnread,
  atMe,
  atAll,
}

typedef TongueItemBuilder = Widget Function(
    VoidCallback onClick, MessageListTongueType valueType, int unreadCount);

class TIMUIKitHistoryMessageListTongue extends TIMUIKitStatelessWidget {
  /// the value type currently
  final MessageListTongueType valueType;

  /// the callback after clicking
  final VoidCallback onClick;

  /// unread amount currently
  final int unreadCount;

  /// the builder for tongue item
  final TongueItemBuilder? tongueItemBuilder;

  /// total amount of messages at me
  final String atNum;

  TIMUIKitHistoryMessageListTongue({
    Key? key,
    required this.valueType,
    required this.onClick,
    required this.unreadCount,
    this.tongueItemBuilder,
    this.atNum = "",
  }) : super(key: key);

  @override
  Widget tuiBuild(BuildContext context, TUIKitBuildValue value) {
    late Widget tongueItem;
    if (tongueItemBuilder != null) {
      tongueItem = tongueItemBuilder!(onClick, valueType, unreadCount);
    } else {
      tongueItem = TIMUIKitTongueItem(
        onClick: onClick,
        unreadCount: unreadCount,
        valueType: valueType,
        atNum: atNum,
      );
    }
    return valueType != MessageListTongueType.none ? tongueItem : Container();
  }
}
文件：/im-flutter-uikit/package_src/tim_ui_kit/lib/ui/views/TIMUIKitChat/TIMUIKItMessageList/TIMUIKitTongue/tim_uikit_chat_history_message_list_tongue_container.dart
import 'package:flutter/cupertino.dart';
import 'package:scroll_to_index/scroll_to_index.dart';
import 'package:tencent_im_base/tencent_im_base.dart';
import 'package:tim_ui_kit/base_widgets/tim_ui_kit_state.dart';
import 'package:tim_ui_kit/business_logic/view_models/tui_chat_view_model.dart';
import 'package:tim_ui_kit/data_services/services_locatar.dart';
import 'package:tim_ui_kit/base_widgets/tim_ui_kit_base.dart';
import 'package:tim_ui_kit/ui/views/TIMUIKitChat/TIMUIKItMessageList/TIMUIKitTongue/tim_uikit_chat_history_message_list_tongue.dart';

class TIMUIKitHistoryMessageListTongueContainer extends StatefulWidget {
  final Widget Function(void Function(), MessageListTongueType, int)?
      tongueItemBuilder;
  final List<V2TimGroupAtInfo?>? groupAtInfoList;
  final Function(String targetSeq) scrollToIndexBySeq;
  final AutoScrollController scrollController;

  const TIMUIKitHistoryMessageListTongueContainer(
      {Key? key,
      this.tongueItemBuilder,
      this.groupAtInfoList,
      required this.scrollToIndexBySeq,
      required this.scrollController})
      : super(key: key);

  @override
  State<StatefulWidget> createState() =>
      _TIMUIKitHistoryMessageListTongueContainerState();
}

class _TIMUIKitHistoryMessageListTongueContainerState
    extends TIMUIKitState<TIMUIKitHistoryMessageListTongueContainer> {
  final TUIChatViewModel model = serviceLocator<TUIChatViewModel>();
  bool isFinishJumpToAt = false;
  List<V2TimGroupAtInfo?>? groupAtInfoList = [];

  @override
  void initState() {
    super.initState();
    initScrollListener();
    groupAtInfoList = widget.groupAtInfoList?.reversed.toList();
  }

  void initScrollListener() {
    void changePositionState(HistoryMessagePosition newPosition) {
      if (model.listPosition != newPosition) {
        model.listPosition = newPosition;
      }
    }

    widget.scrollController.addListener(() {
      final screenHeight = MediaQuery.of(context).size.height;
      if (widget.scrollController.offset <=
              widget.scrollController.position.minScrollExtent &&
          !widget.scrollController.position.outOfRange) {
        changePositionState(HistoryMessagePosition.bottom);
      } else if (widget.scrollController.offset <= screenHeight * 1.6 &&
          widget.scrollController.offset > 0 &&
          !widget.scrollController.position.outOfRange) {
        changePositionState(HistoryMessagePosition.inTwoScreen);
      } else if (widget.scrollController.offset > screenHeight * 1.6 &&
          !widget.scrollController.position.outOfRange) {
        changePositionState(HistoryMessagePosition.awayTwoScreen);
      }
    });
  }

  MessageListTongueType _getTongueValueType(
      List<V2TimGroupAtInfo?>? groupAtInfoList) {
    if (groupAtInfoList != null &&
        groupAtInfoList.isNotEmpty &&
        !isFinishJumpToAt) {
      if (groupAtInfoList[0]!.atType == 1) {
        return MessageListTongueType.atMe;
      } else {
        return MessageListTongueType.atAll;
      }
    }

    if (model.unreadCountForConversation > 0) {
      return MessageListTongueType.showUnread;
    }

    if (model.listPosition == HistoryMessagePosition.awayTwoScreen) {
      return MessageListTongueType.toLatest;
    }

    return MessageListTongueType.none;
  }

  @override
  Widget tuiBuild(BuildContext context, TUIKitBuildValue value) {
    return Positioned(
      bottom: 16,
      right: 0,
      child: TIMUIKitHistoryMessageListTongue(
        tongueItemBuilder: widget.tongueItemBuilder,
        unreadCount: model.unreadCountForConversation,
        onClick: () {
          if (groupAtInfoList != null && groupAtInfoList!.isNotEmpty) {
            if (groupAtInfoList?.length == 1) {
              widget.scrollToIndexBySeq(groupAtInfoList![0]!.seq);
              model.markMessageAsRead(
                  convID: model.currentSelectedConv,
                  convType: model.currentSelectedConvType!);
              setState(() {
                groupAtInfoList = [];
                isFinishJumpToAt = true;
              });
            } else {
              widget.scrollToIndexBySeq(groupAtInfoList!.removeAt(0)!.seq);
            }
          }
          if (model.listPosition == HistoryMessagePosition.awayTwoScreen ||
              model.unreadCountForConversation > 0) {
            model.showLatestUnread(model.currentSelectedConv);
            widget.scrollController.animateTo(
              widget.scrollController.position.minScrollExtent,
              duration: const Duration(milliseconds: 200),
              curve: Curves.ease,
            );
            return;
          }
        },
        atNum: groupAtInfoList?.length.toString() ?? "",
        valueType: _getTongueValueType(groupAtInfoList),
      ),
    );
  }
}
文件：/im-flutter-uikit/package_src/tim_ui_kit/lib/ui/views/TIMUIKitChat/TIMUIKItMessageList/TIMUIKitTongue/tim_uikit_tongue_item.dart
import 'package:flutter/material.dart';
import 'package:tim_ui_kit/base_widgets/tim_ui_kit_statelesswidget.dart';

import 'package:tim_ui_kit/ui/utils/color.dart';
import 'package:tim_ui_kit/ui/utils/tui_theme.dart';
import 'package:tim_ui_kit/base_widgets/tim_ui_kit_base.dart';
import 'package:tencent_im_base/tencent_im_base.dart';

import 'package:tim_ui_kit/ui/views/TIMUIKitChat/TIMUIKItMessageList/TIMUIKitTongue/tim_uikit_chat_history_message_list_tongue.dart';

class TIMUIKitTongueItem extends TIMUIKitStatelessWidget {
  /// the callback after clicking
  final VoidCallback onClick;

  /// the value type currently
  final MessageListTongueType valueType;

  /// unread amount currently
  final int unreadCount;

  /// total amount of messages at me
  final String atNum;

  TIMUIKitTongueItem({
    Key? key,
    required this.onClick,
    required this.valueType,
    required this.unreadCount,
    required this.atNum,
  }) : super(key: key);

  Map<MessageListTongueType, String> textType(BuildContext context) {
    final option1 = unreadCount;
    final option2 = atNum;
    final String atMeString = option2 != ""
        ? TIM_t_para("有{{option2}}条@我消息", "有$option2条@我消息")(option2: option2)
        : TIM_t("有人@我");

    return {
      MessageListTongueType.toLatest: TIM_t("回到最新位置"),
      MessageListTongueType.showUnread:
          TIM_t_para("{{option1}}条新消息", "$option1条新消息")(option1: option1),
      MessageListTongueType.atMe: atMeString,
      MessageListTongueType.atAll: TIM_t("@所有人"),
    };
  }

  final Map<MessageListTongueType, IconData> iconType = {
    MessageListTongueType.toLatest: Icons.arrow_downward_outlined,
    MessageListTongueType.showUnread: Icons.arrow_downward_outlined,
    MessageListTongueType.atMe: Icons.arrow_upward_outlined,
    MessageListTongueType.atAll: Icons.arrow_upward_outlined,
  };

  @override
  Widget tuiBuild(BuildContext context, TUIKitBuildValue value) {
    final TUITheme theme = value.theme;
    return GestureDetector(
      onTap: onClick,
      child: Container(
        decoration: BoxDecoration(
          color: Colors.white,
          border: Border.all(color: hexToColor("E5E5E5"), width: 1),
          boxShadow: [
            BoxShadow(
                color: theme.weakDividerColor ?? hexToColor("E6E9EB"),
                offset: const Offset(0.0, 0.0),
                blurRadius: 10,
                spreadRadius: 2),
          ],
        ),
        padding: const EdgeInsets.all(10),
        // width: 112,
        height: 37,
        child: Row(
          mainAxisAlignment: MainAxisAlignment.center,
          crossAxisAlignment: CrossAxisAlignment.center,
          children: [
            Container(
              margin: const EdgeInsets.only(right: 6),
              child: Icon(
                iconType[valueType],
                color: theme.primaryColor,
                size: 12,
              ),
            ),
            Text(
              textType(context)[valueType] ?? "",
              style: TextStyle(
                  color: theme.primaryColor,
                  fontSize: 12.0,
                  fontWeight: FontWeight.w400),
            ),
          ],
        ),
      ),
    );
  }
}
文件：/im-flutter-uikit/package_src/tim_ui_kit/lib/ui/views/TIMUIKitChat/TIMUIKitAppBar/tim_uikit_appbar.dart
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:tim_ui_kit/base_widgets/tim_ui_kit_state.dart';
import 'package:tim_ui_kit/business_logic/view_models/tui_chat_view_model.dart';
import 'package:tim_ui_kit/data_services/friendShip/friendship_services.dart';
import 'package:tim_ui_kit/data_services/group/group_services.dart';
import 'package:tim_ui_kit/data_services/services_locatar.dart';
import 'package:tim_ui_kit/tim_ui_kit.dart';
import 'package:tim_ui_kit/ui/utils/color.dart';
import 'package:tuple/tuple.dart';
import 'package:tim_ui_kit/base_widgets/tim_ui_kit_base.dart';

class TIMUIKitAppBar extends StatefulWidget implements PreferredSizeWidget {
  /// appbar config
  final AppBar? config;

  /// allow show conversation total unread count
  final bool showTotalUnReadCount;

  /// cnversation id
  final String conversationID;

  /// conversation name
  final String conversationShowName;
  const TIMUIKitAppBar(
      {Key? key,
      this.config,
      this.showTotalUnReadCount = true,
      this.conversationID = "",
      this.conversationShowName = ""})
      : super(key: key);

  @override
  Size get preferredSize =>
      config?.preferredSize ?? const Size.fromHeight(56.0);

  @override
  State<StatefulWidget> createState() => _TIMUIKitAppBarState();
}

class _TIMUIKitAppBarState extends TIMUIKitState<TIMUIKitAppBar> {
  final FriendshipServices _friendshipServices =
      serviceLocator<FriendshipServices>();
  final GroupServices _groupServices = serviceLocator<GroupServices>();

  V2TimFriendshipListener? _friendshipListener;
  V2TimGroupListener? _groupListener;

  String _conversationShowName = "";

  _addConversationShowNameListener() {
    _friendshipListener = V2TimFriendshipListener(
      onFriendInfoChanged: (infoList) {
        final changedInfo = infoList.firstWhere(
          (element) => element.userID == widget.conversationID,
        );
        if (changedInfo.friendRemark != null) {
          _conversationShowName = changedInfo.friendRemark!;
          setState(() {});
        }
      },
    );
    if (_friendshipListener != null) {
      _friendshipServices.setFriendshipListener(listener: _friendshipListener!);
    }
  }

  _addGroupListener() {
    _groupListener = V2TimGroupListener(
      onGroupInfoChanged: (groupID, changeInfos) {
        if (groupID == widget.conversationID) {
          final groupNameChangeInfo = changeInfos.firstWhere((element) =>
              element.type ==
              GroupChangeInfoType.V2TIM_GROUP_INFO_CHANGE_TYPE_NAME);
          if (groupNameChangeInfo.value != null) {
            _conversationShowName = groupNameChangeInfo.value!;
            setState(() {});
          }
        }
      },
    );
    if (_groupListener != null) {
      _groupServices.addGroupListener(listener: _groupListener!);
    }
  }

  String _getTotalUnReadCount(int unreadCount) {
    return unreadCount < 99 ? unreadCount.toString() : "99";
  }

  @override
  void initState() {
    super.initState();
    _conversationShowName = widget.conversationShowName;
    _addConversationShowNameListener();
    _addGroupListener();
  }

  @override
  void dispose() {
    super.dispose();
    _groupServices.removeGroupListener(listener: _groupListener);
    _friendshipServices.removeFriendListener(listener: _friendshipListener);
  }

  @override
  Widget tuiBuild(BuildContext context, TUIKitBuildValue value) {
    final TUITheme theme = value.theme;

    final setAppbar = widget.config;
    return AppBar(
      backgroundColor: setAppbar?.backgroundColor,
      actionsIconTheme: setAppbar?.actionsIconTheme,
      foregroundColor: setAppbar?.foregroundColor,
      elevation: setAppbar?.elevation,
      bottom: setAppbar?.bottom,
      bottomOpacity: setAppbar?.bottomOpacity ?? 1.0,
      titleSpacing: setAppbar?.titleSpacing,
      automaticallyImplyLeading: setAppbar?.automaticallyImplyLeading ?? false,
      shadowColor: setAppbar?.shadowColor ?? theme.weakDividerColor,
      excludeHeaderSemantics: setAppbar?.excludeHeaderSemantics ?? false,
      toolbarHeight: setAppbar?.toolbarHeight,
      titleTextStyle: setAppbar?.titleTextStyle,
      toolbarOpacity: setAppbar?.toolbarOpacity ?? 1.0,
      toolbarTextStyle: setAppbar?.toolbarTextStyle,
      flexibleSpace: setAppbar?.flexibleSpace ??
          Container(
            decoration: BoxDecoration(
              gradient: LinearGradient(colors: [
                theme.lightPrimaryColor ?? CommonColor.lightPrimaryColor,
                theme.primaryColor ?? CommonColor.primaryColor
              ]),
            ),
          ),
      iconTheme: setAppbar?.iconTheme ??
          const IconThemeData(
            color: Colors.white,
          ),
      title: setAppbar?.title ??
          Text(
            _conversationShowName,
            style: const TextStyle(
              color: Colors.white,
              fontSize: 17,
            ),
          ),
      centerTitle: setAppbar?.centerTitle ?? true,
      leadingWidth: setAppbar?.leadingWidth ?? 70,
      leading: Selector<TUIChatViewModel, Tuple2<bool, int>>(
          builder: (context, data, _) {
            final isMultiSelect = data.item1;
            final unReadCount = data.item2;
            final chatVM =
                Provider.of<TUIChatViewModel>(context, listen: false);
            return isMultiSelect
                ? TextButton(
                    onPressed: () {
                      chatVM.updateMultiSelectStatus(false);
                    },
                    child: Text(
                      TIM_t('取消'),
                      style: const TextStyle(
                        color: Colors.white,
                        fontSize: 16,
                      ),
                    ),
                  )
                : setAppbar?.leading ??
                    Row(
                      children: [
                        IconButton(
                          padding: const EdgeInsets.only(left: 16),
                          constraints: const BoxConstraints(),
                          icon: Image.asset(
                            'images/arrow_back.png',
                            package: 'tim_ui_kit',
                            height: 34,
                            width: 34,
                          ),
                          onPressed: () async {
                            chatVM.setRepliedMessage(null);
                            Navigator.pop(context);
                          },
                        ),
                        if (widget.showTotalUnReadCount && unReadCount > 0)
                          Container(
                            width: 22,
                            height: 22,
                            alignment: Alignment.center,
                            decoration: BoxDecoration(
                              shape: BoxShape.circle,
                              color: theme.cautionColor,
                            ),
                            child: Text(_getTotalUnReadCount(unReadCount)),
                          ),
                      ],
                    );
          },
          shouldRebuild: (prev, next) =>
              prev.item1 != next.item1 || prev.item2 != next.item2,
          selector: (_, model) =>
              Tuple2(model.isMultiSelect, model.totalUnReadCount)),
      actions: setAppbar?.actions,
    );
  }
}
文件：/im-flutter-uikit/package_src/tim_ui_kit/lib/ui/views/TIMUIKitChat/TIMUIKitMessageItem/main.dart
export 'package:tim_ui_kit/ui/views/TIMUIKitChat/TIMUIKitMessageItem/tim_uikit_chat_file_elem.dart';
export 'package:tim_ui_kit/ui/views/TIMUIKitChat/TIMUIKitMessageItem/tim_uikit_chat_group_tips_elem.dart';
export 'package:tim_ui_kit/ui/views/TIMUIKitChat/TIMUIKitMessageItem/tim_uikit_chat_image_elem.dart';
export 'package:tim_ui_kit/ui/views/TIMUIKitChat/TIMUIKitMessageItem/tim_uikit_chat_sound_elem.dart';
export 'package:tim_ui_kit/ui/views/TIMUIKitChat/TIMUIKitMessageItem/tim_uikit_chat_text_elem.dart';
export 'package:tim_ui_kit/ui/views/TIMUIKitChat/TIMUIKitMessageItem/tim_uikit_chat_video_elem.dart';
export 'package:tim_ui_kit/ui/views/TIMUIKitChat/TIMUIKitMessageItem/tim_uikit_merger_message_elem.dart';
export 'package:tim_ui_kit/ui/views/TIMUIKitChat/TIMUIKitMessageItem/tim_uikit_chat_reply_elem.dart';
文件：/im-flutter-uikit/package_src/tim_ui_kit/lib/ui/views/TIMUIKitChat/TIMUIKitMessageItem/tim_uikit_chat_custom_elem.dart
// ignore_for_file: unrelated_type_equality_checks

import 'dart:convert';

import 'package:flutter/material.dart';
import 'package:tencent_im_base/tencent_im_base.dart';
import 'package:tim_ui_kit/base_widgets/tim_ui_kit_base.dart';
import 'package:tim_ui_kit/base_widgets/tim_ui_kit_statelesswidget.dart';

import 'package:tim_ui_kit/ui/utils/message.dart';

class TIMUIKitCustomElem extends TIMUIKitStatelessWidget {
  final V2TimCustomElem? customElem;
  final bool isFromSelf;
  final TextStyle? messageFontStyle;
  final BorderRadius? messageBorderRadius;
  final Color? messageBackgroundColor;
  final EdgeInsetsGeometry? textPadding;

  TIMUIKitCustomElem({
    Key? key,
    this.customElem,
    this.isFromSelf = false,
    this.messageFontStyle,
    this.messageBorderRadius,
    this.messageBackgroundColor,
    this.textPadding,
  }) : super(key: key);

  static CallingMessage? getCallMessage(V2TimCustomElem? customElem) {
    try {
      if (customElem?.data != null) {
        final customMessage = jsonDecode(customElem!.data!);
        return CallingMessage.fromJSON(customMessage);
      }
      return null;
    } catch (err) {
      return null;
    }
  }

  static String getActionType(int actionType) {
    final actionMessage = {
      1: TIM_t("发起通话"),
      2: TIM_t("取消通话"),
      3: TIM_t("接受通话"),
      4: TIM_t("拒绝通话"),
      5: TIM_t("超时未接听"),
    };
    return actionMessage[actionType] ?? "";
  }

  static isCallEndExist(CallingMessage callMsg) {
    int? callEnd = callMsg.callEnd;
    int? actionType = callMsg.actionType;
    if (actionType == 2) return false;
    return callEnd == null
        ? false
        : callEnd > 0
            ? true
            : false;
  }

  static String twoDigits(int n) {
    if (n >= 10) return "$n";
    return "0$n";
  }

  static getShowTime(int seconds) {
    int secondsShow = seconds % 60;
    int minutsShow = seconds ~/ 60;
    return "${twoDigits(minutsShow)}:${twoDigits(secondsShow)}";
  }

  Widget _callElemBuilder() {
    final callingMessage = getCallMessage(customElem);

    if (callingMessage != null) {
      // 如果是结束消息
      final isCallEnd = isCallEndExist(callingMessage);

      final isVoiceCall = callingMessage.callType == 1;

      String? option2 = "";
      if (isCallEnd) {
        option2 = getShowTime(callingMessage.callEnd!);
      }

      return Row(
        mainAxisSize: MainAxisSize.min,
        children: [
          if (!isFromSelf)
            Padding(
              padding: const EdgeInsets.only(right: 4),
              child: Image.asset(
                isVoiceCall ? "images/voice_call.png" : "images/video_call.png",
                package: 'tim_ui_kit',
                height: 16,
                width: 16,
              ),
            ),
          isCallEnd
              ? Text(TIM_t_para("通话时间：{{option2}}", "通话时间：$option2")(
                  option2: option2))
              : Text(
                  getActionType(callingMessage.actionType!),
                  style: messageFontStyle,
                ),
          if (isFromSelf)
            Padding(
              padding: const EdgeInsets.only(left: 4),
              child: Image.asset(
                isVoiceCall
                    ? "images/voice_call.png"
                    : "images/video_call_self.png",
                package: 'tim_ui_kit',
                height: 16,
                width: 16,
              ),
            ),
        ],
      );
    } else {
      return const Text("[自定义]");
    }
  }

  @override
  Widget tuiBuild(BuildContext context, TUIKitBuildValue value) {
    final theme = value.theme;
    final borderRadius = isFromSelf
        ? const BorderRadius.only(
            topLeft: Radius.circular(10),
            topRight: Radius.circular(2),
            bottomLeft: Radius.circular(10),
            bottomRight: Radius.circular(10))
        : const BorderRadius.only(
            topLeft: Radius.circular(2),
            topRight: Radius.circular(10),
            bottomLeft: Radius.circular(10),
            bottomRight: Radius.circular(10));
    final backgroundColor = isFromSelf
        ? theme.lightPrimaryMaterialColor.shade50
        : theme.weakBackgroundColor;
    return Container(
      padding: textPadding ?? const EdgeInsets.all(10),
      decoration: BoxDecoration(
        color: messageBackgroundColor ?? backgroundColor,
        borderRadius: messageBorderRadius ?? borderRadius,
      ),
      constraints: const BoxConstraints(maxWidth: 240),
      child: _callElemBuilder(),
    );
  }
}
文件：/im-flutter-uikit/package_src/tim_ui_kit/lib/ui/views/TIMUIKitChat/TIMUIKitMessageItem/tim_uikit_chat_face_elem.dart
import 'dart:async';
import 'package:flutter/material.dart';
import 'package:tim_ui_kit/base_widgets/tim_ui_kit_base.dart';
import 'package:tim_ui_kit/base_widgets/tim_ui_kit_state.dart';

class TIMUIKitFaceElem extends StatefulWidget {
  final String path;
  final bool? isShowJump;
  final VoidCallback? clearJump;

  const TIMUIKitFaceElem(
      {Key? key, required this.path, this.isShowJump = false, this.clearJump})
      : super(key: key);

  @override
  State<StatefulWidget> createState() => _TIMUIKitTextElemState();
}

class _TIMUIKitTextElemState extends TIMUIKitState<TIMUIKitFaceElem> {
  bool isShowJumpState = false;

  @override
  void initState() {
    super.initState();
  }

  _showJumpColor() {
    int shineAmount = 10;
    setState(() {
      isShowJumpState = true;
    });
    Future.delayed(const Duration(milliseconds: 100), () {
      if (widget.clearJump != null) {
        widget.clearJump!();
      }
    });
    Timer.periodic(const Duration(milliseconds: 400), (timer) {
      if (mounted) {
        setState(() {
          isShowJumpState = shineAmount.isOdd ? true : false;
        });
      }
      if (shineAmount == 0 || !mounted) {
        timer.cancel();
      }
      shineAmount--;
    });
  }

  bool isFromNetwork() {
    return widget.path.startsWith('http');
  }

  @override
  Widget tuiBuild(BuildContext context, TUIKitBuildValue value) {
    if (widget.isShowJump!) {
      Future.delayed(Duration.zero, () {
        _showJumpColor();
      });
    }
    return Container(
      padding: const EdgeInsets.all(10),
      constraints:
          BoxConstraints(maxWidth: MediaQuery.of(context).size.width * 0.3),
      child: isFromNetwork()
          ? Image.network(widget.path)
          : Image.asset(widget.path),
    );
  }
}
文件：/im-flutter-uikit/package_src/tim_ui_kit/lib/ui/views/TIMUIKitChat/TIMUIKitMessageItem/tim_uikit_chat_file_elem.dart
// ignore_for_file: avoid_print

import 'dart:io';

import 'package:dio/dio.dart';
import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:package_info_plus/package_info_plus.dart';
import 'package:path_provider/path_provider.dart';
import 'package:permission_handler/permission_handler.dart';
import 'package:provider/provider.dart';
import 'package:tencent_im_base/tencent_im_base.dart';
import 'package:tim_ui_kit/base_widgets/tim_ui_kit_base.dart';
import 'package:tim_ui_kit/base_widgets/tim_ui_kit_state.dart';
import 'package:tim_ui_kit/business_logic/view_models/tui_chat_view_model.dart';
import 'package:tim_ui_kit/data_services/services_locatar.dart';

import 'package:tim_ui_kit/ui/utils/color.dart';
import 'package:tim_ui_kit/ui/utils/permission.dart';
import 'package:open_file/open_file.dart';
import 'package:tim_ui_kit/ui/utils/tui_theme.dart';

class TIMUIKitFileElem extends StatefulWidget {
  final String? messageID;
  final V2TimFileElem? fileElem;
  final bool isSelf;

  const TIMUIKitFileElem(
      {Key? key,
      required this.messageID,
      required this.fileElem,
      required this.isSelf})
      : super(key: key);

  @override
  State<StatefulWidget> createState() => _TIMUIKitFileElemState();
}

class _TIMUIKitFileElemState extends TIMUIKitState<TIMUIKitFileElem> {
  String filePath = "";
  final TUIChatViewModel model = serviceLocator<TUIChatViewModel>();

  Future<bool?> showOpenFileConfirmDialog(
      BuildContext context, String path, TUITheme? theme) async {
    PackageInfo packageInfo = await PackageInfo.fromPlatform();
    String option2 = packageInfo.appName;
    return showDialog<bool>(
      context: context,
      builder: (context) {
        return CupertinoAlertDialog(
          title: Text(widget.fileElem!.fileName!),
          content: Text(TIM_t_para("“{{option2}}”暂不可以打开此类文件，你可以使用其他应用打开并预览",
              "“$option2”暂不可以打开此类文件，你可以使用其他应用打开并预览")(option2: option2)),
          actions: <Widget>[
            CupertinoDialogAction(
              child: Text(TIM_t("取消"),
                  style: TextStyle(color: theme?.secondaryColor)),
              onPressed: () => Navigator.of(context).pop(), // 关闭对话框
            ),
            CupertinoDialogAction(
              child: Text(TIM_t("用其他应用打开"),
                  style: TextStyle(color: theme?.primaryColor)),
              onPressed: () {
                //关闭对话框并返回true
                Navigator.of(context).pop();
                OpenFile.open(path);
              },
            ),
          ],
        );
      },
    );
  }

  @override
  void initState() {
    super.initState();
    getTemporaryDirectory().then((appDocDir) {
      String filePath = widget.fileElem!.path ??
          (appDocDir.path + '/' + widget.fileElem!.fileName!);
      hasFile(filePath);
      if (widget.fileElem!.path != null) {
        // 防止path路径是其他App本地存储路径
        hasFile(appDocDir.path + '/' + widget.fileElem!.fileName!);
      }
    });
  }

  bool hasFile(String savePath) {
    File f = File(savePath);
    if (f.existsSync()) {
      filePath = savePath;
      model.setMessageProgress(widget.messageID!, 100);
      return true;
    }
    return false;
  }

  void _onTap(context, theme, received) async {
    // not judge self FileElem
    var appDocDir = await getTemporaryDirectory();
    String savePath = widget.fileElem!.path ??
        (appDocDir.path + '/' + widget.fileElem!.fileName!);
    String savePathWithAppPath =
        appDocDir.path + '/' + widget.fileElem!.fileName!;
    if (received == 0) {
      if (!await Permissions.checkPermission(
          context, Permission.storage.value)) {
        return;
      }
      try {
        if (hasFile(savePath)) {
          showOpenFileConfirmDialog(context, savePath, theme);
          return;
        }

        if (hasFile(savePathWithAppPath)) {
          showOpenFileConfirmDialog(context, savePathWithAppPath, theme);
          return;
        }
        model.setMessageProgress(widget.messageID!, 1);
        print('start downloading');

        await Dio().download(widget.fileElem!.url!, savePath,
            onReceiveProgress: (recv, total) {
          if (total != -1) {
            // print((received / total * 100).toStringAsFixed(0) + "%");
            model.setMessageProgress(
                widget.messageID!, (recv / total * 100).ceil());
            //you can build progressbar feature too
          }
        });
        filePath = savePath;
        print("File is saved to download folder.");
      } catch (e) {
        try {
          await Dio().download(widget.fileElem!.url!, savePathWithAppPath,
              onReceiveProgress: (recv, total) {
            if (total != -1) {
              // print((received / total * 100).toStringAsFixed(0) + "%");
              model.setMessageProgress(
                  widget.messageID!, (recv / total * 100).ceil());
              //you can build progressbar feature too
            }
          });
          filePath = savePathWithAppPath;
        } catch (e) {
          model.setMessageProgress(widget.messageID!, 0);
          print('Error $e');
          onTIMCallback(
              TIMCallback(type: TIMCallbackType.FLUTTER_ERROR, catchError: e));
        }
      }
    } else if (received == 100) {
      showOpenFileConfirmDialog(context, filePath, theme);
    }
  }

  @override
  Widget tuiBuild(BuildContext context, TUIKitBuildValue value) {
    final theme = value.theme;
    return ChangeNotifierProvider.value(
        value: model,
        child: Consumer<TUIChatViewModel>(builder: (context, value, child) {
          final received = value.getMessageProgress(widget.messageID);
          final fileName = widget.fileElem!.fileName ?? "";
          final fileSize = widget.fileElem!.fileSize;
          final borderRadius = widget.isSelf
              ? const BorderRadius.only(
                  topLeft: Radius.circular(10),
                  topRight: Radius.circular(2),
                  bottomLeft: Radius.circular(10),
                  bottomRight: Radius.circular(10))
              : const BorderRadius.only(
                  topLeft: Radius.circular(2),
                  topRight: Radius.circular(10),
                  bottomLeft: Radius.circular(10),
                  bottomRight: Radius.circular(10));
          return GestureDetector(
              onTap: () {
                if (value.isDownloading) {
                  onTIMCallback(TIMCallback(
                      type: TIMCallbackType.INFO,
                      infoRecommendText: TIM_t("其他文件正在接收中"),
                      infoCode: 6660410));
                  return;
                }
                //if downloaded or not download can tap
                if (received == 0 || received == 100) {
                  _onTap(context, theme, received);
                } else {
                  onTIMCallback(TIMCallback(
                      type: TIMCallbackType.INFO,
                      infoRecommendText: TIM_t("正在接收中"),
                      infoCode: 6660411));
                }
              },
              child: Container(
                width: 237,
                decoration: BoxDecoration(
                    border: Border.all(
                      color: theme.weakDividerColor ??
                          CommonColor.weakDividerColor,
                    ),
                    borderRadius: borderRadius),
                child: Stack(children: [
                  ClipRRect(
                    //剪裁为圆角矩形
                    borderRadius: borderRadius,
                    child: LinearProgressIndicator(
                        minHeight: 66,
                        value: (received == 100 ? 0 : received) / 100,
                        backgroundColor: received == 100
                            ? theme.weakBackgroundColor
                            : Colors.white,
                        valueColor: AlwaysStoppedAnimation(
                            theme.lightPrimaryMaterialColor.shade50)),
                  ),
                  Padding(
                      padding: const EdgeInsets.symmetric(
                          vertical: 8, horizontal: 12),
                      child: Row(
                          mainAxisAlignment: widget.isSelf
                              ? MainAxisAlignment.end
                              : MainAxisAlignment.start,
                          children: [
                            Expanded(
                                child: Column(
                              crossAxisAlignment: CrossAxisAlignment.start,
                              children: [
                                Text(
                                  fileName,
                                  maxLines: 1,
                                  overflow: TextOverflow.ellipsis,
                                  style: TextStyle(
                                    color: theme.darkTextColor,
                                    fontSize: 16,
                                  ),
                                ),
                                Text(
                                  "${(fileSize! / 1024).ceil()} KB",
                                  // "${received > 0 ? (received / 1024).ceil() : (received / 1024).ceil()} KB",
                                  style: TextStyle(
                                      fontSize: 14, color: theme.weakTextColor),
                                )
                              ],
                            )),
                            SizedBox(
                              height: 50,
                              width: 50,
                              child: Icon(
                                Icons.file_present_outlined,
                                color: theme.cautionColor,
                                size: 40,
                              ),
                            )
                          ])),
                ]),
              ));
        }));
  }
}
文件：/im-flutter-uikit/package_src/tim_ui_kit/lib/ui/views/TIMUIKitChat/TIMUIKitMessageItem/tim_uikit_chat_group_tips_elem.dart
import 'package:flutter/material.dart';
import 'package:tencent_im_base/tencent_im_base.dart';
import 'package:tim_ui_kit/base_widgets/tim_ui_kit_statelesswidget.dart';
import 'package:tim_ui_kit/ui/utils/color.dart';
import 'package:tim_ui_kit/ui/utils/message.dart';
import 'package:tim_ui_kit/ui/utils/tui_theme.dart';
import 'package:tim_ui_kit/base_widgets/tim_ui_kit_base.dart';

class TIMUIKitGroupTipsElem extends TIMUIKitStatelessWidget {
  final V2TimGroupTipsElem groupTipsElem;

  TIMUIKitGroupTipsElem({Key? key, required this.groupTipsElem})
      : super(key: key);

  @override
  Widget tuiBuild(BuildContext context, TUIKitBuildValue value) {
    final TUITheme theme = value.theme;
    final groupTipsAbstractText =
        MessageUtils.groupTipsMessageAbstract(groupTipsElem);

    return MessageUtils.wrapMessageTips(
        Text(
          groupTipsAbstractText,
          softWrap: true,
          textAlign: TextAlign.center,
          style: TextStyle(
              fontSize: 12,
              fontWeight: FontWeight.w400,
              color: hexToColor("888888")),
        ),
        theme);
  }
}
文件：/im-flutter-uikit/package_src/tim_ui_kit/lib/ui/views/TIMUIKitChat/TIMUIKitMessageItem/tim_uikit_chat_group_trtc_tips_elem.dart
// ignore_for_file: unrelated_type_equality_checks, unused_import

import 'dart:convert';

import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:tim_ui_kit/base_widgets/tim_ui_kit_state.dart';
import 'package:tim_ui_kit/business_logic/view_models/tui_theme_view_model.dart';
import 'package:tim_ui_kit/data_services/group/group_services.dart';
import 'package:tim_ui_kit/data_services/services_locatar.dart';
import 'package:tim_ui_kit/tim_ui_kit.dart';
import 'package:tim_ui_kit/ui/utils/message.dart';

import 'package:tim_ui_kit/ui/utils/shared_theme.dart';

import '../../../utils/color.dart';
import 'package:tim_ui_kit/base_widgets/tim_ui_kit_base.dart';

class TIMUIKitGroupTrtcTipsElem extends StatefulWidget {
  final V2TimMessage? customMessage;

  const TIMUIKitGroupTrtcTipsElem({
    Key? key,
    this.customMessage,
  }) : super(key: key);

  static CallingMessage? getCallMessage(V2TimCustomElem? customElem) {
    try {
      if (customElem?.data != null) {
        final customMessage = jsonDecode(customElem!.data!);
        return CallingMessage.fromJSON(customMessage);
      }
      return null;
    } catch (err) {
      return null;
    }
  }

  static String twoDigits(int n) {
    if (n >= 10) return "$n";
    return "0$n";
  }

  static String getActionType(int actionType) {
    final actionMessage = {
      1: "发起通话",
      2: "取消通话",
      3: "接受通话",
      4: "拒绝通话",
      5: "超时未接听",
    };
    return actionMessage[actionType] ?? "";
  }

  static isCallEndExist(CallingMessage callMsg) {
    int? callEnd = callMsg.callEnd;
    int? actionType = callMsg.actionType;
    if (actionType == 2) return false;
    return callEnd == null
        ? false
        : callEnd > 0
            ? true
            : false;
  }

  static getShowTime(int seconds) {
    int secondsShow = seconds % 60;
    int minutsShow = seconds ~/ 60;
    return "${twoDigits(minutsShow)}:${twoDigits(secondsShow)}";
  }

  @override
  State<StatefulWidget> createState() => _TIMUIKitGroupTrtcTipsElemState();
}

class _TIMUIKitGroupTrtcTipsElemState
    extends TIMUIKitState<TIMUIKitGroupTrtcTipsElem> {
  final GroupServices groupServices = serviceLocator<GroupServices>();
  // CustomMessage最终展示的内容
  String customMessageShowText = "[自定义]";

  @override
  void initState() {
    super.initState();
    final customElem = widget.customMessage?.customElem;
    final groupId = widget.customMessage?.groupID;
    final callingMessage = TIMUIKitGroupTrtcTipsElem.getCallMessage(customElem);
    getShowActionType(callingMessage!, groupId: groupId);
  }

  String getShowName(V2TimGroupMemberFullInfo info) {
    return info.friendRemark ?? info.nickName ?? info.nameCard ?? info.userID;
  }

  getShowNameListFromGroupList(
      List<String> inviteList, List<V2TimGroupMemberFullInfo?> groupInfoList) {
    final showNameList = [];
    for (var info in groupInfoList) {
      final isContains = inviteList.contains(info!.userID);
      if (isContains) {
        showNameList.add(getShowName(info));
      }
    }

    return showNameList;
  }

// 先更新为userID的封装
  handleShowUserIDFrominviteList(
      List<String> inviteeList, String actionTypeText) {
    String nameStr = "";
    for (String showName in inviteeList) {
      nameStr = "$nameStr、$showName";
    }
    nameStr = nameStr.substring(1);
    setState(() {
      customMessageShowText = "$nameStr$actionTypeText";
    });
  }

  // 后更新showNamd的封装
  handleShowNameStringFromList(
      List<dynamic> showNameList, String actionTypeText) {
    if (showNameList.isEmpty) {
      return;
    }
    if (mounted) {
      if (showNameList.length == 1) {
        setState(() {
          customMessageShowText = "${showNameList[0]}$actionTypeText";
        });
      } else {
        String nameStr = "";
        for (String showName in showNameList) {
          nameStr = "$nameStr、$showName";
        }
        nameStr = nameStr.substring(1);
        setState(() {
          customMessageShowText = "$nameStr$actionTypeText";
        });
      }
    }
  }

  // 封装需要节流获取情况用户成员的情况
  handleThrotGetShwoName(
      String groupId, String actionTypeText, CallingMessage callingMessage) {
    handleShowUserIDFrominviteList(callingMessage.inviteeList!, actionTypeText);
    // groupServices.getGroupMembersInfoThrottle(
    //     groupID: groupId,
    //     memberList: callingMessage.inviteeList!,
    //     callBack: (List<V2TimGroupMemberFullInfo?> list) {
    //       List<dynamic> showNameList =
    //           getShowNameListFromGroupList(callingMessage.inviteeList!, list);
    //       // 如果是自己会有为空的情况,需啊自己手动添加一下
    //       if (showNameList.isEmpty) {
    //         final CoreServicesImpl _coreInstance = TIMUIKitCore.getInstance();
    //         final selfShowName = _coreInstance.loginUserInfo?.nickName ??
    //             _coreInstance.loginUserInfo!.userID;
    //         showNameList.add(selfShowName);
    //       }
    //       handleShowNameStringFromList(showNameList, actionTypeText);
    //     });
  }

  getShowActionType(CallingMessage callingMessage, {String? groupId}) {
    final actionType = callingMessage.actionType!;
    final actionTypeText = TIMUIKitGroupTrtcTipsElem.getActionType(actionType);
    // 1发起通话
    if (actionType == 1 && groupId != null) {
      String nameStr = "";
      groupServices.getGroupMembersInfo(groupID: groupId, memberList: [
        callingMessage.inviter!
      ]).then((V2TimValueCallback<List<V2TimGroupMemberFullInfo>> res) {
        List<V2TimGroupMemberFullInfo>? infoList = res.data ?? [];
        for (var element in infoList) {
          final showName = getShowName(element);
          nameStr = "$nameStr$showName";
        }

        setState(() {
          customMessageShowText = "$nameStr$actionTypeText";
        });
      });
    }
    // 2取消通话
    if (actionType == 2 && groupId != null) {
      setState(() {
        customMessageShowText = actionTypeText;
      });
    }
    // 3为接受
    if (actionType == 3 && groupId != null) {
      handleThrotGetShwoName(groupId, actionTypeText, callingMessage);
    }
    // 4为拒绝
    if (actionType == 4 && groupId != null) {
      handleThrotGetShwoName(groupId, actionTypeText, callingMessage);
    }
    // 5 为超时
    if (actionType == 5 && groupId != null) {
      String nameStr = "";
      groupServices
          .getGroupMembersInfo(
              groupID: groupId, memberList: callingMessage.inviteeList!)
          .then((V2TimValueCallback<List<V2TimGroupMemberFullInfo>> res) {
        List<V2TimGroupMemberFullInfo>? infoList = res.data ?? [];
        for (var element in infoList) {
          final showName = getShowName(element);
          nameStr = "$nameStr、$showName";
        }
        nameStr = nameStr.substring(1);

        setState(() {
          customMessageShowText = "$nameStr$actionTypeText";
        });
      });
    }

    // return TIMUIKitCustomElem.getActionType(actionType);
  }

  static isCallEndExist(CallingMessage callMsg) {
    int? callEnd = callMsg.callEnd;
    int? actionType = callMsg.actionType;
    if (actionType == 2) return false;
    return callEnd == null
        ? false
        : callEnd > 0
            ? true
            : false;
  }

  Widget _callElemBuilder(BuildContext context) {
    final customElem = widget.customMessage?.customElem;
    final callingMessage = TIMUIKitGroupTrtcTipsElem.getCallMessage(customElem);
    if (callingMessage != null) {
      String showText = "[自定义]";
      // 如果是结束消息
      final isCallEnd = isCallEndExist(callingMessage);

      String? option2 = "";
      if (isCallEnd) {
        option2 =
            TIMUIKitGroupTrtcTipsElem.getShowTime(callingMessage.callEnd!);
      }
      showText = isCallEnd
          ? TIM_t_para("通话时间：{{option2}}", "通话时间：$option2")(option2: option2)
          : customMessageShowText;

      return Text(
        showText,
        style: TextStyle(
            fontSize: 12,
            fontWeight: FontWeight.w400,
            color: hexToColor("888888")),
        textAlign: TextAlign.center,
        softWrap: true,
      );
    } else {
      return const Text("[自定义]");
    }
  }

  @override
  Widget tuiBuild(BuildContext context, TUIKitBuildValue value) {
    final TUITheme theme = value.theme;

    return MessageUtils.wrapMessageTips(_callElemBuilder(context), theme);
  }
}
文件：/im-flutter-uikit/package_src/tim_ui_kit/lib/ui/views/TIMUIKitChat/TIMUIKitMessageItem/tim_uikit_chat_image_elem.dart
// ignore_for_file: prefer_typing_uninitialized_variables,  unused_import

import 'dart:async';
import 'dart:io';
import 'dart:math';
import 'dart:typed_data';

import 'package:cached_network_image/cached_network_image.dart';
import 'package:dio/dio.dart';

import 'package:flutter/material.dart';
import 'package:flutter_screenutil/flutter_screenutil.dart';
import 'package:provider/provider.dart';
import 'package:tim_ui_kit/base_widgets/tim_ui_kit_base.dart';
import 'package:tim_ui_kit/base_widgets/tim_ui_kit_state.dart';

import 'package:tim_ui_kit/business_logic/view_models/tui_chat_view_model.dart';
import 'package:tim_ui_kit/business_logic/view_models/tui_theme_view_model.dart';
import 'package:tim_ui_kit/data_services/services_locatar.dart';
import 'package:tim_ui_kit/tim_ui_kit.dart';
import 'package:tim_ui_kit/ui/constants/history_message_constant.dart';
import 'package:tim_ui_kit/ui/utils/message.dart';
import 'package:tim_ui_kit/ui/utils/permission.dart';
import 'package:tim_ui_kit/ui/utils/platform.dart';
import 'package:tim_ui_kit/ui/widgets/image_screen.dart';
import 'package:tim_ui_kit/ui/widgets/toast.dart';
import 'package:transparent_image/transparent_image.dart';
import 'package:image_gallery_saver/image_gallery_saver.dart';

import 'package:tim_ui_kit/ui/utils/shared_theme.dart';

class TIMUIKitImageElem extends StatefulWidget {
  final V2TimMessage message;
  final bool isShowJump;
  final VoidCallback? clearJump;
  final String? isFrom;

  const TIMUIKitImageElem(
      {required this.message,
      this.isShowJump = false,
      this.clearJump,
      this.isFrom,
      Key? key})
      : super(key: key);

  @override
  State<StatefulWidget> createState() => _TIMUIKitImageElem();
}

class _TIMUIKitImageElem extends TIMUIKitState<TIMUIKitImageElem> {
  bool isShowBorder = false;
  double? networkImagePositionRadio; // 加这个字段用于异步获取被安全打击后的兜底图的比例
  final TUIChatViewModel model = serviceLocator<TUIChatViewModel>();
  Widget? imageItem;
  bool isSent = false;

  /*
  为了解决，重复渲染的跳闪问题
  当现有图片队列只有一个，且上一个图片队列不存在时才进行更新，因为此时是发送了新的图片
  */

  @override
  didUpdateWidget(oldWidget) {
    super.didUpdateWidget(oldWidget);
  }

  String getBigPicUrl() {
    // 实际拿的是原图
    V2TimImage? img = MessageUtils.getImageFromImgList(
        widget.message.imageElem!.imageList,
        HistoryMessageDartConstant.oriImgPrior);
    return img == null ? widget.message.imageElem!.path! : img.url!;
  }

  Widget errorDisplay(BuildContext context, TUITheme? theme) {
    return Container(
      decoration: BoxDecoration(
          borderRadius: const BorderRadius.all(Radius.circular(5)),
          border: Border.all(
            width: 1,
            color: Colors.black12,
          )),
      height: 100,
      child: Center(
        child: Row(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Icon(
              Icons.warning_amber_outlined,
              color: theme?.cautionColor,
              size: 16,
            ),
          ],
        ),
      ),
    );
  }

  Widget getImage(image, {imageElem}) {
    Widget res = ClipRRect(
      clipper: ImageClipper(),
      child: image,
    );

    return res;
  }

  //保存网络图片到本地
  _saveImageToLocal(context, String imageUrl, {bool isAsset = true}) async {
    var response;
    if (PlatformUtils().isIOS) {
      if (!await Permissions.checkPermission(
          context, Permission.photosAddOnly.value)) {
        return;
      }
    } else {
      if (!await Permissions.checkPermission(
          context, Permission.storage.value)) {
        return;
      }
    }

    // 本地资源的情况下
    if (isAsset) {
      File file = File(imageUrl);
      response = await file.readAsBytes();
    } else {
      var res = await Dio()
          .get(imageUrl, options: Options(responseType: ResponseType.bytes),
              onReceiveProgress: (recv, total) {
        if (total != -1) {
          model.setMessageProgress(
              widget.message.msgID!, (recv / total * 100).ceil());
        }
      });
      response = res.data;
    }
    model.setMessageProgress(widget.message.msgID!, 0);
    var result =
        await ImageGallerySaver.saveImage(Uint8List.fromList(response));

    if (PlatformUtils().isIOS) {
      if (result['isSuccess']) {
        onTIMCallback(TIMCallback(
            type: TIMCallbackType.INFO,
            infoRecommendText: TIM_t("图片保存成功"),
            infoCode: 6660406));
      } else {
        onTIMCallback(TIMCallback(
            type: TIMCallbackType.INFO,
            infoRecommendText: TIM_t("图片保存失败"),
            infoCode: 6660407));
      }
    } else {
      if (result != null) {
        onTIMCallback(TIMCallback(
            type: TIMCallbackType.INFO,
            infoRecommendText: TIM_t("图片保存成功"),
            infoCode: 6660406));
      } else {
        onTIMCallback(TIMCallback(
            type: TIMCallbackType.INFO,
            infoRecommendText: TIM_t("图片保存失败"),
            infoCode: 6660407));
      }
    }
  }

  void _showJumpColor() {
    int shineAmount = 10;
    setState(() {
      isShowBorder = true;
    });
    Future.delayed(const Duration(milliseconds: 100), () {
      widget.clearJump!();
    });
    Timer.periodic(const Duration(milliseconds: 400), (timer) {
      if (mounted) {
        setState(() {
          isShowBorder = shineAmount.isOdd ? true : false;
        });
      }
      if (shineAmount == 0 || !mounted) {
        timer.cancel();
      }
      shineAmount--;
    });
  }

  getImgWidthAndHeight(
      BoxConstraints constraints, double height, double width) {
    // 消息列表展示缩略图的大小
    double hwrate = height / width;
    double curWidth = min(width, constraints.maxWidth * 0.5);
    double curHeight = curWidth * hwrate;
    return {height: curHeight, width: curWidth};
  }

  void _saveImg() {
    String? path = widget.message.imageElem!.path;
    if (path != null && File(path).existsSync()) {
      _saveImageToLocal(context, path, isAsset: true);
    } else {
      String imgUrl = getBigPicUrl();
      _saveImageToLocal(context, imgUrl, isAsset: false);
    }
  }

  V2TimImage? getImageFromList(V2_TIM_IMAGE_TYPES_ENUM imgType) {
    V2TimImage? img = MessageUtils.getImageFromImgList(
        widget.message.imageElem!.imageList,
        HistoryMessageDartConstant.imgPriorMap[imgType] ??
            HistoryMessageDartConstant.oriImgPrior);

    return img;
  }

  Widget errorPage(theme) => Container(
      height: MediaQuery.of(context).size.height,
      color: Colors.black,
      child: GestureDetector(
        onTap: () {
          Navigator.of(context).pop();
        },
        child: errorDisplay(context, theme),
      ));

  Widget _renderLocalImage(
      String imgPath, dynamic heroTag, double positionRadio, TUITheme? theme) {
    double? currentPositionRadio;

    File imgF = File(imgPath);
    bool isExist = imgF.existsSync();

    if (!isExist) {
      return errorDisplay(context, theme);
    }
    Image image = Image.file(imgF);

    image.image
        .resolve(const ImageConfiguration())
        .addListener(ImageStreamListener((image, synchronousCall) {
      if (image.image.width != 0 && image.image.height != 0) {
        currentPositionRadio = image.image.width / image.image.height;
      }
    }));
    final message = widget.message;
    final preloadImage = model.preloadImageMap[
        message.seq! + message.timestamp.toString() + (message.msgID ?? "")];

    return Stack(
      alignment: AlignmentDirectional.topStart,
      children: [
        AspectRatio(
          aspectRatio: currentPositionRadio ?? positionRadio,
          child: Container(
            decoration: const BoxDecoration(color: Colors.transparent),
          ),
        ),
        getImage(
            GestureDetector(
                onTap: () {
                  Navigator.of(context).push(
                    PageRouteBuilder(
                      opaque: false, // set to false
                      pageBuilder: (_, __, ___) => ImageScreen(
                          imageProvider: FileImage(File(imgPath)),
                          heroTag: heroTag,
                          messageID: widget.message.msgID,
                          downloadFn: () => _saveImg()),
                    ),
                  );
                },
                child: Hero(
                  tag: heroTag,
                  child: preloadImage != null
                      ? RawImage(
                          image: preloadImage,
                          fit: BoxFit.fitWidth,
                          width: double.infinity,
                        )
                      : Image.file(
                          File(imgPath),
                          fit: BoxFit.fitWidth,
                          width: double.infinity,
                        ),
                )),
            imageElem: null)
      ],
    );
  }

  @override
  void initState() {
    super.initState();
    // 先暂时下掉用网络图片计算尺寸比例的feature，在没有找到准确的判断图片是否被打击前
    // setOnlineImageRatio();
  }

  void setOnlineImageRatio() {
    if (networkImagePositionRadio == null) {
      V2TimImage? smallImg = getImageFromList(V2_TIM_IMAGE_TYPES_ENUM.small);
      V2TimImage? originalImg =
          getImageFromList(V2_TIM_IMAGE_TYPES_ENUM.original);
      Image image = Image.network(smallImg?.url ?? originalImg?.url ?? "");

      image.image
          .resolve(const ImageConfiguration())
          .addListener(ImageStreamListener((ImageInfo info, bool _) {
        if (info.image.width != 0 && info.image.height != 0) {
          setState(() {
            networkImagePositionRadio = (info.image.width / info.image.height);
          });
        }
      }));
    }
  }

  Widget _renderNetworkImage(
      dynamic heroTag, double positionRadio, TUITheme? theme,
      {V2TimImage? originalImg, V2TimImage? smallImg}) {
    try {
      String bigImgUrl = originalImg?.url ?? getBigPicUrl();
      if (bigImgUrl.isEmpty && smallImg?.url != null) {
        bigImgUrl = smallImg!.url!;
      }
      return Stack(
        alignment: AlignmentDirectional.topStart,
        children: [
          AspectRatio(
            aspectRatio: networkImagePositionRadio ?? positionRadio,
            child: Container(
              decoration: const BoxDecoration(color: Colors.white),
            ),
          ),
          getImage(
              GestureDetector(
                onTap: () {
                  Navigator.of(context).push(
                    PageRouteBuilder(
                        opaque: false, // set to false
                        pageBuilder: (_, __, ___) => ImageScreen(
                            imageProvider: CachedNetworkImageProvider(
                              bigImgUrl,
                              cacheKey: widget.message.msgID,
                            ),
                            heroTag: heroTag,
                            messageID: widget.message.msgID,
                            downloadFn: () => _saveImg())),
                  );
                },
                child: Hero(
                    tag: heroTag,
                    child:
                        // Image.network(smallImg?.url ?? ""),
                        CachedNetworkImage(
                      width: double.infinity,
                      alignment: Alignment.topCenter,
                      imageUrl: smallImg?.url ?? originalImg!.url!,
                      // use small image in message list as priority
                      errorWidget: (context, error, stackTrace) =>
                          errorPage(theme),
                      fit: BoxFit.fitWidth,
                      cacheKey: smallImg?.uuid ?? originalImg!.uuid,
                      placeholder: (context, url) =>
                          Image(image: MemoryImage(kTransparentImage)),
                      fadeInDuration: const Duration(milliseconds: 0),
                    )),
              ),
              imageElem: e)
        ],
      );
    } catch (e) {
      return errorDisplay(context, theme);
    }
  }

  Widget? _renderImage(dynamic heroTag, TUITheme? theme,
      {V2TimImage? originalImg, V2TimImage? smallImg}) {
    double positionRadio = 1.0;
    if (smallImg?.width != null &&
        smallImg?.height != null &&
        smallImg?.width != 0 &&
        smallImg?.height != 0) {
      positionRadio = (smallImg!.width! / smallImg.height!);
    }
    if (isSent ||
        widget.message.imageElem!.path!.isNotEmpty &&
            File(widget.message.imageElem!.path!).existsSync()) {
      try {
        return _renderLocalImage(widget.message.imageElem!.path!, heroTag,
            networkImagePositionRadio ?? positionRadio, theme);
      } catch (e) {
        return _renderNetworkImage(heroTag, positionRadio, theme,
            smallImg: smallImg, originalImg: originalImg);
      }
    } else if (smallImg?.localUrl != null &&
        smallImg?.localUrl != "" &&
        File((smallImg?.localUrl!)!).existsSync()) {
      try {
        return _renderLocalImage(smallImg!.localUrl!, heroTag,
            networkImagePositionRadio ?? positionRadio, theme);
      } catch (e) {
        return _renderNetworkImage(heroTag, positionRadio, theme,
            smallImg: smallImg, originalImg: originalImg);
      }
    } else if ((smallImg?.url ?? originalImg?.url) != null) {
      return _renderNetworkImage(heroTag, positionRadio, theme,
          smallImg: smallImg, originalImg: originalImg);
    } else {
      return errorDisplay(context, theme);
    }
  }

  @override
  Widget tuiBuild(BuildContext context, TUIKitBuildValue value) {
    final theme = value.theme;
    if (widget.message.status == MessageStatus.V2TIM_MSG_STATUS_SENDING) {
      isSent = true;
    }
    final heroTag =
        "${widget.message.msgID ?? widget.message.id ?? widget.message.timestamp ?? DateTime.now().millisecondsSinceEpoch}${widget.isFrom}";

    V2TimImage? originalImg =
        getImageFromList(V2_TIM_IMAGE_TYPES_ENUM.original);
    V2TimImage? smallImg = getImageFromList(V2_TIM_IMAGE_TYPES_ENUM.small);
    if (widget.isShowJump) {
      Future.delayed(Duration.zero, () {
        _showJumpColor();
      });
    }
    return Container(
        decoration: BoxDecoration(
            borderRadius: const BorderRadius.all(Radius.circular(5)),
            border: Border.all(
                color: Color.fromRGBO(245, 166, 35, (isShowBorder ? 1 : 0)),
                width: 2)),
        child: LayoutBuilder(
            builder: (BuildContext context, BoxConstraints constraints) {
          return ConstrainedBox(
            constraints: BoxConstraints(
              maxWidth: constraints.maxWidth * 0.5,
              minWidth: 64,
              maxHeight: 256,
            ),
            child: _renderImage(heroTag, theme,
                originalImg: originalImg, smallImg: smallImg),
          );
        }));
  }
}

class ImageClipper extends CustomClipper<RRect> {
  @override
  RRect getClip(Size size) {
    return RRect.fromRectAndRadius(
        Rect.fromLTWH(0, 0, size.width, min(size.height, 256)),
        const Radius.circular(5));
  }

  @override
  bool shouldReclip(CustomClipper<RRect> oldClipper) {
    return oldClipper != this;
  }
}
文件：/im-flutter-uikit/package_src/tim_ui_kit/lib/ui/views/TIMUIKitChat/TIMUIKitMessageItem/tim_uikit_chat_reply_elem.dart
// ignore_for_file: unused_import

import 'dart:async';
import 'dart:convert';

import 'package:flutter/material.dart';
import 'package:fluttertoast/fluttertoast.dart';
import 'package:provider/provider.dart';
import 'package:tencent_im_base/tencent_im_base.dart';
import 'package:tim_ui_kit/base_widgets/tim_ui_kit_base.dart';
import 'package:tim_ui_kit/base_widgets/tim_ui_kit_state.dart';
import 'package:tim_ui_kit/business_logic/view_models/tui_chat_view_model.dart';
import 'package:tim_ui_kit/business_logic/view_models/tui_theme_view_model.dart';
import 'package:tim_ui_kit/data_services/services_locatar.dart';

import 'package:tim_ui_kit/ui/utils/tui_theme.dart';
import 'package:tim_ui_kit/ui/views/TIMUIKitChat/TIMUIKitMessageItem/main.dart';
import 'package:tim_ui_kit/ui/views/TIMUIKitChat/TIMUIKitMessageItem/tim_uikit_chat_face_elem.dart';

import 'package:tim_ui_kit/ui/utils/shared_theme.dart';
import 'package:tim_ui_kit/ui/widgets/link_preview/link_preview_entry.dart';

class CloudCustomData {
  late Map<String, dynamic> messageReply;
  late String messageAbstract;
  late String messageSender;
  late String messageID;

  CloudCustomData.fromJson(json) {
    messageReply = json["messageReply"];
    messageAbstract = messageReply["messageAbstract"];
    messageSender = messageReply["messageSender"] ?? "";
    messageID = messageReply["messageID"];
  }
}

class TIMUIKitReplyElem extends StatefulWidget {
  final V2TimMessage message;
  final Function scrollToIndex;
  final bool isShowJump;
  final VoidCallback clearJump;
  final TextStyle? fontStyle;
  final BorderRadius? borderRadius;
  final Color? backgroundColor;
  final EdgeInsetsGeometry? textPadding;

  const TIMUIKitReplyElem({
    Key? key,
    required this.message,
    required this.scrollToIndex,
    this.isShowJump = false,
    required this.clearJump,
    this.fontStyle,
    this.borderRadius,
    this.backgroundColor,
    this.textPadding,
  }) : super(key: key);

  @override
  State<StatefulWidget> createState() => _TIMUIKitReplyElemState();
}

class _TIMUIKitReplyElemState extends TIMUIKitState<TIMUIKitReplyElem> {
  TUIChatViewModel model = serviceLocator<TUIChatViewModel>();
  CloudCustomData? repliedMessage;
  V2TimMessage? rawMessage;
  Color backgroundColorNormal = const Color.fromRGBO(236, 236, 236, 1);
  Color backgroundColorJump = const Color.fromRGBO(245, 166, 35, 1);
  Color backgroundColor = const Color.fromRGBO(236, 236, 236, 1);

  CloudCustomData? _getRepliedMessage() {
    try {
      final messageCloudCustomData =
          json.decode(widget.message.cloudCustomData!);
      final repliedMessage = CloudCustomData.fromJson(messageCloudCustomData);
      return repliedMessage;
    } catch (error) {
      return null;
    }
  }

  _getMessageByMessageID() async {
    final cloudCustomData = _getRepliedMessage();
    if (cloudCustomData != null) {
      final messageID = cloudCustomData.messageID;
      final message = await model.findMessage(messageID);
      if (message != null) {
        setState(() {
          rawMessage = message;
        });
      }
    }
    setState(() {
      repliedMessage = cloudCustomData;
    });
  }

  Widget _defaultRawMessageText(String text, TUITheme? theme) {
    return Text(text,
        style: TextStyle(
            fontSize: 12,
            color: theme?.weakTextColor,
            fontWeight: FontWeight.w400));
  }

  _rawMessageBuilder(V2TimMessage? message, TUITheme? theme) {
    if (message == null) {
      return _defaultRawMessageText(repliedMessage!.messageAbstract, theme);
    }
    final messageType = message.elemType;
    final isSelf = message.isSelf ?? false;
    if (model.abstractMessageBuilder != null) {
      return _defaultRawMessageText(
        model.abstractMessageBuilder!(message),
        theme,
      );
    }
    switch (messageType) {
      case MessageElemType.V2TIM_ELEM_TYPE_CUSTOM:
        return _defaultRawMessageText(TIM_t("[自定义]"), theme);
      case MessageElemType.V2TIM_ELEM_TYPE_SOUND:
        return _defaultRawMessageText(TIM_t("[语音消息]"), theme);
      case MessageElemType.V2TIM_ELEM_TYPE_TEXT:
        return _defaultRawMessageText(message.textElem?.text ?? "", theme);
      case MessageElemType.V2TIM_ELEM_TYPE_FACE:
        return TIMUIKitFaceElem(
          path: message.faceElem!.data ?? "",
        );
      case MessageElemType.V2TIM_ELEM_TYPE_FILE:
        return TIMUIKitFileElem(
            messageID: message.msgID,
            fileElem: message.fileElem,
            isSelf: isSelf);
      case MessageElemType.V2TIM_ELEM_TYPE_IMAGE:
        return TIMUIKitImageElem(message: message, isFrom: "reply");
      case MessageElemType.V2TIM_ELEM_TYPE_VIDEO:
        return TIMUIKitVideoElem(message, isFrom: "reply");
      case MessageElemType.V2TIM_ELEM_TYPE_LOCATION:
        return _defaultRawMessageText(TIM_t("[位置]"), theme);
      case MessageElemType.V2TIM_ELEM_TYPE_MERGER:
        return TIMUIKitMergerElem(
            mergerElem: message.mergerElem!,
            messageID: message.msgID ?? "",
            isSelf: isSelf);
      default:
        return _defaultRawMessageText(TIM_t("[未知消息]"), theme);
    }
  }

  @override
  void initState() {
    _getMessageByMessageID();
    super.initState();
  }

  @override
  void didUpdateWidget(covariant TIMUIKitReplyElem oldWidget) {
    WidgetsBinding.instance?.addPostFrameCallback((mag) {
      super.didUpdateWidget(oldWidget);
      _getMessageByMessageID();
    });
  }

  void _showJumpColor() {
    int shineAmount = 10;
    setState(() {
      backgroundColor = backgroundColorJump;
    });
    Future.delayed(const Duration(milliseconds: 100), () {
      widget.clearJump();
    });
    Timer.periodic(const Duration(milliseconds: 400), (timer) {
      if (mounted) {
        setState(() {
          backgroundColor =
              shineAmount.isOdd ? backgroundColorJump : backgroundColorNormal;
        });
      }
      if (shineAmount == 0 || !mounted) {
        timer.cancel();
      }
      shineAmount--;
    });
  }

  void _jumpToRawMsg() {
    if (rawMessage?.timestamp != null) {
      widget.scrollToIndex(rawMessage);
    } else {
      onTIMCallback(TIMCallback(
          type: TIMCallbackType.INFO,
          infoRecommendText: TIM_t("无法定位到原消息"),
          infoCode: 6660401));
    }
  }

  @override
  Widget tuiBuild(BuildContext context, TUIKitBuildValue value) {
    final theme = value.theme;
    final isSelf = widget.message.isSelf ?? false;
    backgroundColorNormal = widget.backgroundColor ??
        (isSelf
            ? theme.lightPrimaryMaterialColor.shade50
            : theme.weakBackgroundColor ??
                const Color.fromRGBO(236, 236, 236, 1));
    backgroundColor = backgroundColorNormal;
    if (repliedMessage == null) {
      return Container();
    }
    final isFromSelf = widget.message.isSelf ?? false;

    final borderRadius = isFromSelf
        ? const BorderRadius.only(
            topLeft: Radius.circular(10),
            topRight: Radius.circular(2),
            bottomLeft: Radius.circular(10),
            bottomRight: Radius.circular(10))
        : const BorderRadius.only(
            topLeft: Radius.circular(2),
            topRight: Radius.circular(10),
            bottomLeft: Radius.circular(10),
            bottomRight: Radius.circular(10));
    if (widget.isShowJump) {
      Future.delayed(Duration.zero, () {
        _showJumpColor();
      });
    }
    final textWithLink = LinkPreviewEntry.getHyperlinksText(widget.message);
    return Container(
      padding: widget.textPadding ?? const EdgeInsets.all(10),
      decoration: BoxDecoration(
        color: backgroundColor,
        borderRadius: widget.borderRadius ?? borderRadius,
      ),
      constraints: const BoxConstraints(maxWidth: 240),
      child: GestureDetector(
        onTap: _jumpToRawMsg,
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Container(
              // 这里是引用的部分
              padding: const EdgeInsets.symmetric(vertical: 3, horizontal: 6),
              constraints: const BoxConstraints(minWidth: 120),
              decoration: const BoxDecoration(
                  color: Color.fromRGBO(68, 68, 68, 0.05),
                  border: Border(
                      left: BorderSide(
                          color: Color.fromRGBO(68, 68, 68, 0.1), width: 2))),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(
                    "${repliedMessage!.messageSender}:",
                    style: TextStyle(
                        fontSize: 12,
                        color: theme.weakTextColor,
                        fontWeight: FontWeight.w500),
                  ),
                  const SizedBox(
                    height: 4,
                  ),
                  _rawMessageBuilder(rawMessage, theme)
                ],
              ),
            ),
            const SizedBox(
              height: 12,
            ),
            textWithLink!(
              style: widget.fontStyle ??
                  const TextStyle(
                    fontSize: 16,
                  ),
            )
          ],
        ),
      ),
    );
  }
}
文件：/im-flutter-uikit/package_src/tim_ui_kit/lib/ui/views/TIMUIKitChat/TIMUIKitMessageItem/tim_uikit_chat_sound_elem.dart
import 'dart:async';
import 'dart:math';

import 'package:flutter/material.dart';
import 'package:flutter_plugin_record_plus/const/play_state.dart';
import 'package:tim_ui_kit/base_widgets/tim_ui_kit_base.dart';
import 'package:tim_ui_kit/base_widgets/tim_ui_kit_state.dart';
import 'package:tim_ui_kit/data_services/services_locatar.dart';
import 'package:tim_ui_kit/ui/constants/history_message_constant.dart';
import 'package:tim_ui_kit/ui/utils/color.dart';
import 'package:tencent_im_base/tencent_im_base.dart';
import 'package:tim_ui_kit/ui/utils/sound_record.dart';
import 'package:tim_ui_kit/business_logic/view_models/tui_chat_view_model.dart';

class TIMUIKitSoundElem extends StatefulWidget {
  final V2TimSoundElem soundElem;
  final String msgID;
  final bool isFromSelf;
  final int? localCustomInt;
  final bool isShowJump;
  final VoidCallback? clearJump;
  final TextStyle? fontStyle;
  final BorderRadius? borderRadius;
  final Color? backgroundColor;
  final EdgeInsetsGeometry? textPadding;

  const TIMUIKitSoundElem(
      {Key? key,
      required this.soundElem,
      required this.msgID,
      required this.isFromSelf,
      this.isShowJump = false,
      this.clearJump,
      this.localCustomInt,
      this.fontStyle,
      this.borderRadius,
      this.backgroundColor,
      this.textPadding})
      : super(key: key);

  @override
  State<StatefulWidget> createState() => _TIMUIKitSoundElemState();
}

class _TIMUIKitSoundElemState extends TIMUIKitState<TIMUIKitSoundElem> {
  final int charLen = 8;
  bool isPlaying = false;
  StreamSubscription<Object>? subscription;
  final TUIChatViewModel model = serviceLocator<TUIChatViewModel>();
  bool isShowJumpState = false;

  _playSound() async {
    if (!SoundPlayer.isInited) {
      // bool hasMicrophonePermission = await Permissions.checkPermission(
      //     context, Permission.microphone.value);
      // bool hasStoragePermission = Platform.isIOS ||
      //     await Permissions.checkPermission(context, Permission.storage.value);
      // if (!hasMicrophonePermission || !hasStoragePermission) {
      //   return;
      // }
      SoundPlayer.initSoundPlayer();
    }
    if (widget.localCustomInt == null ||
        widget.localCustomInt != HistoryMessageDartConstant.read) {
      model.setLocalCustomInt(widget.msgID, HistoryMessageDartConstant.read);
    }
    if (isPlaying) {
      SoundPlayer.stop();
      model.currentSelectedMsgId = "";
    } else {
      SoundPlayer.play(url: widget.soundElem.url!);
      model.currentSelectedMsgId = widget.msgID;
      // SoundPlayer.setSoundInterruptListener(() {
      //   // setState(() {
      //   isPlaying = false;
      //   // });
      // });
    }
  }

  @override
  void didUpdateWidget(oldWidget) {
    super.didUpdateWidget(oldWidget);
    setState(() {
      isPlaying = model.currentSelectedMsgId != '' &&
          model.currentSelectedMsgId == widget.msgID;
    });
  }

  @override
  void initState() {
    super.initState();
    subscription = SoundPlayer.playStateListener(listener: (PlayState data) {
      if (data.playState == 'complete') {
        model.currentSelectedMsgId = "";
        // SoundPlayer.removeSoundInterruptListener();
      }
    });
  }

  @override
  void dispose() {
    if (isPlaying) {
      SoundPlayer.stop();
      model.currentSelectedMsgId = "";
    }
    subscription?.cancel();
    super.dispose();
  }

  double _getSoundLen() {
    double soundLen = 32;
    if (widget.soundElem.duration != null) {
      final realSoundLen = widget.soundElem.duration!;
      int sdLen = 32;
      if (realSoundLen > 10) {
        sdLen = 12 * charLen + ((realSoundLen - 10) * charLen / 0.5).floor();
      } else if (realSoundLen > 2) {
        sdLen = 2 * charLen + realSoundLen * charLen;
      }
      sdLen = min(sdLen, 20 * charLen);
      soundLen = sdLen.toDouble();
    }

    return soundLen;
  }

  _showJumpColor() {
    int shineAmount = 10;
    setState(() {
      isShowJumpState = true;
    });
    Future.delayed(const Duration(milliseconds: 100), () {
      widget.clearJump!();
    });
    Timer.periodic(const Duration(milliseconds: 400), (timer) {
      if (mounted) {
        setState(() {
          isShowJumpState = shineAmount.isOdd ? true : false;
        });
      }
      if (shineAmount == 0 || !mounted) {
        timer.cancel();
      }
      shineAmount--;
    });
  }

  @override
  Widget tuiBuild(BuildContext context, TUIKitBuildValue value) {
    final theme = value.theme;
    final backgroundColor = widget.isFromSelf
        ? theme.lightPrimaryMaterialColor.shade50
        : theme.weakBackgroundColor ?? CommonColor.weakBackgroundColor;
    final borderRadius = widget.isFromSelf
        ? const BorderRadius.only(
            topLeft: Radius.circular(10),
            topRight: Radius.circular(2),
            bottomLeft: Radius.circular(10),
            bottomRight: Radius.circular(10))
        : const BorderRadius.only(
            topLeft: Radius.circular(2),
            topRight: Radius.circular(10),
            bottomLeft: Radius.circular(10),
            bottomRight: Radius.circular(10));
    if (widget.isShowJump) {
      Future.delayed(Duration.zero, () {
        _showJumpColor();
      });
    }
    return InkWell(
      onTap: _playSound,
      child: Container(
        padding: widget.textPadding ?? const EdgeInsets.all(10),
        decoration: BoxDecoration(
          color: isShowJumpState
              ? const Color.fromRGBO(245, 166, 35, 1)
              : (widget.backgroundColor ?? backgroundColor),
          borderRadius: widget.borderRadius ?? borderRadius,
        ),
        constraints: const BoxConstraints(maxWidth: 240),
        child: Row(
          mainAxisSize: MainAxisSize.min,
          children: widget.isFromSelf
              ? [
                  Container(width: _getSoundLen()),
                  Text(
                    "''${widget.soundElem.duration} ",
                    style: widget.fontStyle,
                  ),
                  isPlaying
                      ? Image.asset(
                          'images/play_voice_send.gif',
                          package: 'tim_ui_kit',
                          width: 16,
                          height: 16,
                        )
                      : Image.asset(
                          'images/voice_send.png',
                          package: 'tim_ui_kit',
                          width: 16,
                          height: 16,
                        ),
                ]
              : [
                  isPlaying
                      ? Image.asset(
                          'images/play_voice_receive.gif',
                          package: 'tim_ui_kit',
                          width: 16,
                          height: 16,
                        )
                      : Image.asset(
                          'images/voice_receive.png',
                          width: 16,
                          height: 16,
                          package: 'tim_ui_kit',
                        ),
                  Text(
                    " ${widget.soundElem.duration}''",
                    style: widget.fontStyle,
                  ),
                  Container(width: _getSoundLen()),
                ],
        ),
      ),
    );
  }
}
文件：/im-flutter-uikit/package_src/tim_ui_kit/lib/ui/views/TIMUIKitChat/TIMUIKitMessageItem/tim_uikit_chat_text_elem.dart
import 'dart:async';
import 'dart:convert';

import 'package:flutter/material.dart';
import 'package:tim_ui_kit/base_widgets/tim_ui_kit_base.dart';
import 'package:tim_ui_kit/base_widgets/tim_ui_kit_state.dart';
import 'package:tim_ui_kit/business_logic/view_models/tui_chat_view_model.dart';
import 'package:tim_ui_kit/tim_ui_kit.dart';
import 'package:tim_ui_kit/ui/widgets/link_preview/link_preview_entry.dart';
import 'package:tim_ui_kit/ui/widgets/link_preview/widgets/link_preview.dart';

class TIMUIKitTextElem extends StatefulWidget {
  final V2TimMessage message;
  final bool isFromSelf;
  final bool isShowJump;
  final VoidCallback clearJump;
  final TextStyle? fontStyle;
  final BorderRadius? borderRadius;
  final Color? backgroundColor;
  final EdgeInsetsGeometry? textPadding;
  final TUIChatViewModel chatModel;

  const TIMUIKitTextElem(
      {Key? key,
      required this.message,
      required this.isFromSelf,
      required this.isShowJump,
      required this.clearJump,
      this.fontStyle,
      this.borderRadius,
      this.backgroundColor,
      this.textPadding,
      required this.chatModel})
      : super(key: key);

  @override
  State<StatefulWidget> createState() => _TIMUIKitTextElemState();
}

class _TIMUIKitTextElemState extends TIMUIKitState<TIMUIKitTextElem> {
  bool isShowJumpState = false;

  @override
  void initState() {
    super.initState();
    // get the link preview info
    _getLinkPreview();
  }

  @override
  void didUpdateWidget(TIMUIKitTextElem oldWidget) {
    super.didUpdateWidget(oldWidget);
    if (oldWidget.message.msgID == null && widget.message.msgID != null) {
      _getLinkPreview();
    }
  }

  _showJumpColor() {
    int shineAmount = 10;
    setState(() {
      isShowJumpState = true;
    });
    Future.delayed(const Duration(milliseconds: 100), () {
      widget.clearJump();
    });
    Timer.periodic(const Duration(milliseconds: 400), (timer) {
      if (mounted) {
        setState(() {
          isShowJumpState = shineAmount.isOdd ? true : false;
        });
      }
      if (shineAmount == 0 || !mounted) {
        timer.cancel();
      }
      shineAmount--;
    });
  }

  // get the link preview info
  _getLinkPreview() {
    if (widget.chatModel.chatConfig.urlPreviewType !=
        UrlPreviewType.previewCardAndHyperlink) {
      return;
    }
    if (widget.message.localCustomData != null &&
        widget.message.localCustomData!.isNotEmpty) {
      final String localJSON = widget.message.localCustomData!;
      final LinkPreviewModel? localPreviewInfo =
          LinkPreviewModel.fromMap(json.decode(localJSON));
      // If [localCustomData] is not empty, check if the link preview info exists
      if (localPreviewInfo == null || localPreviewInfo.isEmpty()) {
        // If not exists, get it
        _initLinkPreview();
      }
    } else {
      // It [localCustomData] is empty, get the link info
      _initLinkPreview();
    }
  }

  _initLinkPreview() async {
    // Get the link preview info from extension, let it update the message UI automatically by providing a [onUpdateMessage].
    // The `onUpdateMessage` can use the `updateMessage()` from the [TIMUIKitChatController] directly.
    LinkPreviewEntry.getFirstLinkPreviewContent(
        message: widget.message,
        onUpdateMessage: () {
          widget.chatModel
              .updateMessageFromController(msgID: widget.message.msgID!);
        });
  }

  Widget? _renderPreviewWidget() {
    // If the link preview info from [localCustomData] is available, use it to render the preview card.
    // Otherwise, it will returns null.
    if (widget.message.localCustomData != null &&
        widget.message.localCustomData!.isNotEmpty) {
      final String localJSON = widget.message.localCustomData!;
      final LinkPreviewModel? localPreviewInfo =
          LinkPreviewModel.fromMap(json.decode(localJSON));
      if (localPreviewInfo != null && !localPreviewInfo.isEmpty()) {
        return Container(
          margin: const EdgeInsets.only(top: 8),
          child:
              // You can use this default widget [LinkPreviewWidget] to render preview card, or you can use custom widget.
              LinkPreviewWidget(linkPreview: localPreviewInfo),
        );
      } else {
        return null;
      }
    } else {
      return null;
    }
  }

  @override
  Widget tuiBuild(BuildContext context, TUIKitBuildValue value) {
    final theme = value.theme;
    final textWithLink = LinkPreviewEntry.getHyperlinksText(widget.message);
    final borderRadius = widget.isFromSelf
        ? const BorderRadius.only(
            topLeft: Radius.circular(10),
            topRight: Radius.circular(2),
            bottomLeft: Radius.circular(10),
            bottomRight: Radius.circular(10))
        : const BorderRadius.only(
            topLeft: Radius.circular(2),
            topRight: Radius.circular(10),
            bottomLeft: Radius.circular(10),
            bottomRight: Radius.circular(10));
    if (widget.isShowJump) {
      Future.delayed(Duration.zero, () {
        _showJumpColor();
      });
    }
    final defaultStyle = widget.isFromSelf
        ? theme.lightPrimaryMaterialColor.shade50
        : theme.weakBackgroundColor;
    final backgroundColor = isShowJumpState
        ? const Color.fromRGBO(245, 166, 35, 1)
        : (widget.backgroundColor ?? defaultStyle);
    return Container(
      padding: widget.textPadding ?? const EdgeInsets.all(10),
      decoration: BoxDecoration(
        color: backgroundColor,
        borderRadius: widget.borderRadius ?? borderRadius,
      ),
      constraints: const BoxConstraints(maxWidth: 240),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          // If the [elemType] is text message, it will not be null here.
          // You can render the widget from extension directly, with a [TextStyle] optionally.
          widget.chatModel.chatConfig.urlPreviewType != UrlPreviewType.none
              ? textWithLink!(
                  style: widget.fontStyle ?? const TextStyle(fontSize: 16))
              : Text(widget.message.textElem?.text ?? "",
                  softWrap: true,
                  style: widget.fontStyle ?? const TextStyle(fontSize: 16)),
          // If the link preview info is available, render the preview card.
          if (_renderPreviewWidget() != null &&
              widget.chatModel.chatConfig.urlPreviewType ==
                  UrlPreviewType.previewCardAndHyperlink)
            _renderPreviewWidget()!,
        ],
      ),
    );
  }
}
文件：/im-flutter-uikit/package_src/tim_ui_kit/lib/ui/views/TIMUIKitChat/TIMUIKitMessageItem/tim_uikit_chat_video_elem.dart
import 'dart:async';
import 'dart:io';

import 'package:cached_network_image/cached_network_image.dart';
import 'package:flutter/material.dart';
import 'package:flutter_screenutil/flutter_screenutil.dart';
import 'package:tim_ui_kit/base_widgets/tim_ui_kit_base.dart';
import 'package:tim_ui_kit/base_widgets/tim_ui_kit_state.dart';
import 'package:tencent_im_base/tencent_im_base.dart';

import 'package:tim_ui_kit/ui/utils/color.dart';
import 'package:tim_ui_kit/ui/utils/message.dart';
import 'package:tim_ui_kit/ui/utils/tui_theme.dart';
import 'package:tim_ui_kit/ui/widgets/video_screen.dart';
import 'package:transparent_image/transparent_image.dart';

class TIMUIKitVideoElem extends StatefulWidget {
  final V2TimMessage message;
  final bool isShowJump;
  final VoidCallback? clearJump;
  final String? isFrom;

  const TIMUIKitVideoElem(this.message,
      {Key? key, this.isShowJump = false, this.clearJump, this.isFrom})
      : super(key: key);

  @override
  State<StatefulWidget> createState() => _TIMUIKitVideoElemState();
}

class _TIMUIKitVideoElemState extends TIMUIKitState<TIMUIKitVideoElem> {
  bool isShowBorder = false;

  void _showJumpColor() {
    int shineAmount = 10;
    setState(() {
      isShowBorder = true;
    });
    Future.delayed(const Duration(milliseconds: 100), () {
      widget.clearJump!();
    });
    Timer.periodic(const Duration(milliseconds: 400), (timer) {
      if (mounted) {
        setState(() {
          isShowBorder = shineAmount.isOdd ? true : false;
        });
      }
      if (shineAmount == 0 || !mounted) {
        timer.cancel();
      }
      shineAmount--;
    });
  }

  Widget errorDisplay(TUITheme? theme) {
    return Container(
      decoration: BoxDecoration(
          border: Border.all(
        width: 1,
        color: Colors.black12,
      )),
      height: 100,
      child: Center(
        child: Row(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Icon(
              Icons.warning_amber_outlined,
              color: theme?.cautionColor,
              size: 16,
            ),
            Text(
              TIM_t("视频加载失败"),
              style: TextStyle(color: theme?.cautionColor),
            ),
          ],
        ),
      ),
    );
  }

  @override
  Widget tuiBuild(BuildContext context, TUIKitBuildValue value) {
    final theme = value.theme;
    final heroTag =
        "${widget.message.msgID ?? widget.message.id ?? widget.message.timestamp ?? DateTime.now().millisecondsSinceEpoch}${widget.isFrom}";
    if (widget.isShowJump) {
      _showJumpColor();
    }

    return GestureDetector(
      onTap: () {
        Navigator.of(context).push(
          PageRouteBuilder(
            opaque: false, // set to false
            pageBuilder: (_, __, ___) => VideoScreen(
              message: widget.message,
              heroTag: heroTag,
            ),
          ),
        );
      },
      child: Hero(
          tag: heroTag,
          child: Container(
            // constraints: BoxConstraints(
            //     maxWidth: adaptWidth["width"], maxHeight: adaptWidth["height"]),
            decoration: BoxDecoration(
              border: Border.all(
                color: isShowBorder
                    ? const Color.fromRGBO(245, 166, 35, 1)
                    : (theme.weakDividerColor ?? CommonColor.weakDividerColor),
                width: 1,
                style: BorderStyle.solid,
              ),
              borderRadius: const BorderRadius.all(Radius.circular(10)),
            ),
            child: ClipRRect(
              borderRadius: const BorderRadius.all(Radius.circular(5)),
              child: LayoutBuilder(
                  builder: (BuildContext context, BoxConstraints constraints) {
                double positionRadio = 1.0;
                if (widget.message.videoElem?.snapshotWidth != null &&
                    widget.message.videoElem?.snapshotHeight != null &&
                    widget.message.videoElem?.snapshotWidth != 0 &&
                    widget.message.videoElem?.snapshotHeight != 0) {
                  positionRadio = (widget.message.videoElem!.snapshotWidth! /
                      widget.message.videoElem!.snapshotHeight!);
                }

                return ConstrainedBox(
                    constraints: BoxConstraints(
                        maxWidth: constraints.maxWidth * 0.5, minWidth: 0),
                    child: Stack(
                      children: <Widget>[
                        AspectRatio(
                          aspectRatio: positionRadio,
                          child: Container(
                            decoration:
                                const BoxDecoration(color: Colors.white),
                          ),
                        ),
                        Positioned(
                            // 当消息处于发送状态时，请使用本地资源
                            child: widget.message.videoElem!.snapshotUrl ==
                                        null ||
                                    widget.message.status ==
                                        MessageStatus.V2TIM_MSG_STATUS_SENDING
                                ? ConstrainedBox(
                                    constraints: BoxConstraints(
                                        maxHeight: 420.h, //宽度尽可能大
                                        maxWidth: 320.w //最小高度为50像素
                                        ),
                                    child: Image.file(
                                        File(widget
                                            .message.videoElem!.snapshotPath!),
                                        fit: BoxFit.fitWidth),
                                  )
                                : (widget.message.videoElem?.localSnapshotUrl ==
                                            null ||
                                        widget.message.videoElem
                                                ?.localSnapshotUrl ==
                                            "")
                                    ? CachedNetworkImage(
                                        placeholder: (context, url) => Image(
                                            image:
                                                MemoryImage(kTransparentImage)),
                                        cacheKey:
                                            widget.message.videoElem!.UUID,
                                        fit: BoxFit.fitWidth,
                                        imageUrl: widget
                                            .message.videoElem!.snapshotUrl!,
                                        errorWidget: (context, url, error) =>
                                            errorDisplay(theme),
                                      )
                                    : Image.file(
                                        File(widget.message.videoElem!
                                            .localSnapshotUrl!),
                                        fit: BoxFit.fitWidth)),
                        Positioned.fill(
                          // alignment: Alignment.center,
                          child: Center(
                              child: Image.asset('images/play.png',
                                  package: 'tim_ui_kit', height: 64)),
                        ),
                        Positioned(
                            right: 10,
                            bottom: 10,
                            child: Text(
                                MessageUtils.formatVideoTime(
                                        widget.message.videoElem?.duration ?? 0)
                                    .toString(),
                                style: const TextStyle(
                                    color: Colors.white, fontSize: 12))),
                      ],
                    ));
              }),
            ),
          )),
    );
  }
}
文件：/im-flutter-uikit/package_src/tim_ui_kit/lib/ui/views/TIMUIKitChat/TIMUIKitMessageItem/tim_uikit_merger_message_elem.dart
import 'package:flutter/material.dart';
import 'package:tim_ui_kit/base_widgets/tim_ui_kit_statelesswidget.dart';
import 'package:tim_ui_kit/business_logic/view_models/tui_chat_view_model.dart';
import 'package:tim_ui_kit/data_services/services_locatar.dart';
import 'package:tim_ui_kit/ui/utils/color.dart';
import 'package:tim_ui_kit/ui/utils/tui_theme.dart';
import 'package:tim_ui_kit/ui/widgets/merger_message_screen.dart';

import 'package:tim_ui_kit/base_widgets/tim_ui_kit_base.dart';
import 'package:tencent_im_base/tencent_im_base.dart';

class TIMUIKitMergerElem extends TIMUIKitStatelessWidget {
  final TUIChatViewModel model = serviceLocator<TUIChatViewModel>();
  final V2TimMergerElem mergerElem;
  final String messageID;
  final bool isSelf;

  TIMUIKitMergerElem(
      {Key? key,
      required this.mergerElem,
      required this.isSelf,
      required this.messageID})
      : super(key: key);

  _handleTap(BuildContext context) async {
    if (messageID != "") {
      final mergerMessageList = await model.downloadMergerMessage(messageID);
      if (mergerMessageList != null) {
        Navigator.push(
            context,
            MaterialPageRoute(
              builder: (context) =>
                  MergerMessageScreen(messageList: mergerMessageList),
            ));
      }
    }
  }

  List<String>? _getAbstractList() {
    final length = mergerElem.abstractList!.length;
    if (length <= 4) {
      return mergerElem.abstractList;
    }
    return mergerElem.abstractList!.getRange(0, 4).toList();
  }

  @override
  Widget tuiBuild(BuildContext context, TUIKitBuildValue value) {
    final TUITheme theme = value.theme;

    return Container(
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.only(
          topLeft: isSelf ? const Radius.circular(10) : Radius.zero,
          bottomLeft: const Radius.circular(10),
          topRight: isSelf ? Radius.zero : const Radius.circular(10),
          bottomRight: const Radius.circular(10),
        ),
        border: Border.all(
          color: theme.weakDividerColor ?? CommonColor.weakDividerColor,
          width: 1,
        ),
      ),
      child: GestureDetector(
        onTap: () {
          _handleTap(context);
        },
        child: Container(
          padding: const EdgeInsets.all(12),
          child: Column(
            children: [
              Row(
                children: [
                  Expanded(
                    child: Text(
                      mergerElem.title!,
                      softWrap: true,
                      overflow: TextOverflow.ellipsis,
                      textAlign: TextAlign.left,
                      maxLines: 1,
                      style: const TextStyle(
                        fontSize: 16,
                        color: Colors.black,
                      ),
                    ),
                  )
                ],
              ),
              const SizedBox(
                height: 4,
              ),
              // const Divider(),
              Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                mainAxisAlignment: MainAxisAlignment.start,
                children: _getAbstractList()!
                    .map(
                      (e) => Row(
                        children: [
                          Expanded(
                            child: Text(
                              e,
                              textAlign: TextAlign.left,
                              softWrap: true,
                              overflow: TextOverflow.ellipsis,
                              maxLines: 2,
                              style: TextStyle(
                                color: theme.weakTextColor,
                                fontSize: 12,
                              ),
                            ),
                          ),
                        ],
                      ),
                    )
                    .toList(),
              ),
              const SizedBox(
                height: 4,
              ),
              const Divider(),
              Row(
                mainAxisAlignment: MainAxisAlignment.start,
                children: [
                  Text(
                    TIM_t("聊天记录"),
                    style: TextStyle(
                      color: theme.weakTextColor,
                      fontSize: 10,
                    ),
                  ),
                ],
              )
            ],
          ),
        ),
      ),
    );
  }
}
文件：/im-flutter-uikit/package_src/tim_ui_kit/lib/ui/views/TIMUIKitChat/TIMUIKitTextField/intl_camer_picker.dart
import 'package:tencent_im_base/tencent_im_base.dart';
import 'package:wechat_camera_picker/wechat_camera_picker.dart';

class IntlCameraPickerTextDelegate extends CameraPickerTextDelegate {
  /// Confirm string for the confirm button.
  /// 确认按钮的字段
  @override
  String get confirm => TIM_t('确认');

  /// Tips string above the shooting button before shooting.
  /// 拍摄前确认按钮上方的提示文字
  @override
  String get shootingTips => TIM_t('轻触拍照，长按摄像');

  /// Load failed string for item.
  /// 资源加载失败时的字段
  @override
  String get loadFailed => TIM_t('加载失败');

  /// Semantics fields.
  ///
  /// Fields below are only for semantics usage. For customizable these fields,
  /// head over to [EnglishCameraPickerTextDelegate] for better understanding.
  @override
  String get sActionManuallyFocusHint => TIM_t('手动聚焦');

  @override
  String get sActionPreviewHint => TIM_t('预览');

  @override
  String get sActionRecordHint => TIM_t('录像');

  @override
  String get sActionShootHint => TIM_t('拍照');

  @override
  String get sActionShootingButtonTooltip => TIM_t('拍照按钮');

  @override
  String get sActionStopRecordingHint => TIM_t('停止录像');

  @override
  String sCameraLensDirectionLabel(CameraLensDirection value) {
    switch (value) {
      case CameraLensDirection.front:
        return TIM_t('前置');
      case CameraLensDirection.back:
        return TIM_t('后置');
      case CameraLensDirection.external:
        return TIM_t('外置');
    }
  }

  @override
  String? sCameraPreviewLabel(CameraLensDirection? value) {
    if (value == null) {
      return null;
    }
    final option1 = sCameraLensDirectionLabel(value);
    return TIM_t_para("{{option1}} 画面预览", "$option1 画面预览")(option1: option1);
  }

  @override
  String sFlashModeLabel(FlashMode mode) {
    final String _modeString;
    switch (mode) {
      case FlashMode.off:
        _modeString = TIM_t('关闭');
        break;
      case FlashMode.auto:
        _modeString = TIM_t('自动');
        break;
      case FlashMode.always:
        _modeString = TIM_t('拍照时闪光');
        break;
      case FlashMode.torch:
        _modeString = TIM_t('始终闪光');
        break;
    }
    final option2 = _modeString;
    return TIM_t_para("闪光模式: {{option2}}", "闪光模式: $option2")(option2: option2);
  }

  @override
  String sSwitchCameraLensDirectionLabel(CameraLensDirection value) {
    final option3 = sCameraLensDirectionLabel(value);
    return TIM_t_para("切换至 {{option3}} 摄像头", "切换至 $option3 摄像头")(
        option3: option3);
  }
}
文件：/im-flutter-uikit/package_src/tim_ui_kit/lib/ui/views/TIMUIKitChat/TIMUIKitTextField/tim_uikit_at_text.dart
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:tim_ui_kit/base_widgets/tim_ui_kit_state.dart';
import 'package:tim_ui_kit/business_logic/view_models/tui_group_profile_view_model.dart';
import 'package:tim_ui_kit/ui/utils/color.dart';
import 'package:tim_ui_kit/ui/utils/tui_theme.dart';
import 'package:tencent_im_base/tencent_im_base.dart';
import 'package:tim_ui_kit/ui/views/TIMUIKitGroupProfile/widgets/tim_ui_group_member_search.dart';
import 'package:tim_ui_kit/ui/widgets/group_member_list.dart';

import 'package:tim_ui_kit/base_widgets/tim_ui_kit_base.dart';

class AtText extends StatefulWidget {
  final String? groupID;
  // some Group type cant @all
  final String? groupType;
  const AtText({
    this.groupID,
    this.groupType,
    Key? key,
  }) : super(key: key);

  @override
  State<StatefulWidget> createState() => _AtTextState();
}

class _AtTextState extends TIMUIKitState<AtText> {
  final TUIGroupProfileViewModel _model = TUIGroupProfileViewModel();
  List<V2TimGroupMemberFullInfo?>? _groupMemberList;
  @override
  void initState() {
    super.initState();
    if (widget.groupID != null) {
      _model.loadData(widget.groupID!);
    }
  }

  @override
  void dispose() {
    super.dispose();
    _model.dispose();
  }

  _onTapMemberItem(V2TimGroupMemberFullInfo memberInfo) {
    Navigator.pop(context, memberInfo);
  }

  handleSearchGroupMembers(String searchText, context) async {
    List<V2TimGroupMemberFullInfo?> currentGroupMember =
        Provider.of<TUIGroupProfileViewModel>(context, listen: false)
                .groupMemberList ??
            [];
    final res = await _model.searchGroupMember(V2TimGroupMemberSearchParam(
      keywordList: [searchText],
      groupIDList: [widget.groupID!],
    ));

    if (res.code == 0) {
      List<V2TimGroupMemberFullInfo?> list = [];
      final searchResult = res.data!.groupMemberSearchResultItems!;
      searchResult.forEach((key, value) {
        if (value is List) {
          for (V2TimGroupMemberFullInfo item in value) {
            list.add(item);
          }
        }
      });
      currentGroupMember = list;
    }

    setState(() {
      _groupMemberList =
          isSearchTextExist(searchText) ? currentGroupMember : null;
    });
  }

  bool isSearchTextExist(String? searchText) {
    return searchText != null && searchText != "";
  }

  @override
  Widget tuiBuild(BuildContext context, TUIKitBuildValue value) {
    final TUITheme theme = value.theme;

    return Scaffold(
        appBar: AppBar(
          shadowColor: theme.weakBackgroundColor,
          iconTheme: const IconThemeData(
            color: Colors.white,
          ),
          flexibleSpace: Container(
            decoration: BoxDecoration(
              gradient: LinearGradient(colors: [
                theme.lightPrimaryColor ?? CommonColor.lightPrimaryColor,
                theme.primaryColor ?? CommonColor.primaryColor
              ]),
            ),
          ),
          leading: Row(
            children: [
              IconButton(
                padding: const EdgeInsets.only(left: 16),
                constraints: const BoxConstraints(),
                icon: Image.asset(
                  'images/arrow_back.png',
                  package: 'tim_ui_kit',
                  height: 34,
                  width: 34,
                ),
                onPressed: () async {
                  Navigator.pop(context);
                },
              ),
            ],
          ),
          centerTitle: true,
          leadingWidth: 100,
          title: Text(
            TIM_t("选择提醒人"),
            style: const TextStyle(
              color: Colors.white,
              fontSize: 17,
            ),
          ),
        ),
        body: ChangeNotifierProvider.value(
            value: _model,
            child: Consumer<TUIGroupProfileViewModel>(
                builder: ((context, value, child) {
              return GroupProfileMemberList(
                  groupType: widget.groupType ?? "",
                  memberList: _groupMemberList ?? value.groupMemberList ?? [],
                  onTapMemberItem: _onTapMemberItem,
                  canAtAll: true,
                  canSlideDelete: false,
                  touchBottomCallBack: () {
                    _model.loadMoreData(groupID: _model.groupInfo!.groupID);
                  },
                  customTopArea: GroupMemberSearchTextField(
                    onTextChange: (text) =>
                        handleSearchGroupMembers(text, context),
                  ));
            }))));
  }
}
文件：/im-flutter-uikit/package_src/tim_ui_kit/lib/ui/views/TIMUIKitChat/TIMUIKitTextField/tim_uikit_call_invite_list.dart
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:tim_ui_kit/base_widgets/tim_ui_kit_state.dart';
import 'package:tim_ui_kit/business_logic/view_models/tui_group_profile_view_model.dart';
import 'package:tim_ui_kit/data_services/services_locatar.dart';
import 'package:tim_ui_kit/tim_ui_kit.dart';
import 'package:tim_ui_kit/ui/utils/color.dart';
import 'package:tim_ui_kit/ui/views/TIMUIKitGroupProfile/widgets/tim_ui_group_member_search.dart';
import 'package:tim_ui_kit/ui/widgets/group_member_list.dart';
import 'package:tim_ui_kit/base_widgets/tim_ui_kit_base.dart';

class SelectCallInviter extends StatefulWidget {
  final String? groupID;
  const SelectCallInviter({
    this.groupID,
    Key? key,
  }) : super(key: key);

  @override
  State<StatefulWidget> createState() => _SelectCallInviterState();
}

class _SelectCallInviterState extends TIMUIKitState<SelectCallInviter> {
  final TUIGroupProfileViewModel _model = TUIGroupProfileViewModel();
  final CoreServicesImpl _coreServicesImpl = serviceLocator<CoreServicesImpl>();
  List<V2TimGroupMemberFullInfo> selectedMember = [];
  List<V2TimGroupMemberFullInfo?>? searchMemberList;
  String? searchText;

  @override
  void initState() {
    super.initState();
    if (widget.groupID != null) {
      _model.loadData(widget.groupID!);
    }
  }

  @override
  void dispose() {
    super.dispose();
    _model.dispose();
  }

  bool isSearchTextExist(String? searchText) {
    return searchText != null && searchText != "";
  }

  handleSearchGroupMembers(String searchText, context) async {
    searchText = searchText;
    List<V2TimGroupMemberFullInfo?> currentGroupMember =
        Provider.of<TUIGroupProfileViewModel>(context, listen: false)
                .groupMemberList
                ?.where((element) =>
                    element?.userID != _coreServicesImpl.loginInfo.userID)
                .toList() ??
            [];
    final res = await _model.searchGroupMember(V2TimGroupMemberSearchParam(
      keywordList: [searchText],
      groupIDList: [_model.groupInfo!.groupID],
    ));

    if (res.code == 0) {
      List<V2TimGroupMemberFullInfo?> list = [];
      final searchResult = res.data!.groupMemberSearchResultItems!;
      searchResult.forEach((key, value) {
        if (value is List) {
          for (V2TimGroupMemberFullInfo item in value) {
            list.add(item);
          }
        }
      });

      currentGroupMember = list;
    } else {
      currentGroupMember = [];
    }
    setState(() {
      searchMemberList =
          isSearchTextExist(searchText) ? currentGroupMember : null;
    });
  }

  @override
  Widget tuiBuild(BuildContext context, TUIKitBuildValue value) {
    final TUITheme theme = value.theme;

    return Scaffold(
        appBar: AppBar(
          shadowColor: theme.weakBackgroundColor,
          iconTheme: const IconThemeData(
            color: Colors.white,
          ),
          flexibleSpace: Container(
            decoration: BoxDecoration(
              gradient: LinearGradient(colors: [
                theme.lightPrimaryColor ?? CommonColor.lightPrimaryColor,
                theme.primaryColor ?? CommonColor.primaryColor
              ]),
            ),
          ),
          leading: TextButton(
            onPressed: () {
              Navigator.pop(context);
            },
            child: Text(
              TIM_t("取消"),
              style: const TextStyle(
                color: Colors.white,
                fontSize: 16,
              ),
            ),
          ),
          actions: [
            TextButton(
              onPressed: () {
                if (selectedMember.isNotEmpty) {
                  Navigator.pop(context, selectedMember);
                }
              },
              child: Text(
                TIM_t("完成"),
                style: const TextStyle(
                  color: Colors.white,
                  fontSize: 16,
                ),
              ),
            )
          ],
          centerTitle: true,
          leadingWidth: 100,
          title: const Text(
            "发起呼叫",
            style: TextStyle(
              color: Colors.white,
              fontSize: 17,
            ),
          ),
        ),
        body: ChangeNotifierProvider.value(
            value: _model,
            child: Consumer<TUIGroupProfileViewModel>(
                builder: ((context, value, child) {
              return GroupProfileMemberList(
                customTopArea: GroupMemberSearchTextField(
                  onTextChange: (text) =>
                      handleSearchGroupMembers(text, context),
                ),
                memberList: (searchMemberList ?? value.groupMemberList ?? [])
                    .where((element) =>
                        element?.userID != _coreServicesImpl.loginInfo.userID)
                    .toList(),
                canSlideDelete: false,
                canSelectMember: true,
                onSelectedMemberChange: (member) {
                  selectedMember = member;
                  setState(() {});
                },
                touchBottomCallBack: () {
                  _model.loadMoreData(groupID: _model.groupInfo!.groupID);
                },
              );
            }))));
  }
}
文件：/im-flutter-uikit/package_src/tim_ui_kit/lib/ui/views/TIMUIKitChat/TIMUIKitTextField/tim_uikit_emoji_panel.dart
import 'package:flutter/material.dart';
import 'package:tim_ui_kit/base_widgets/tim_ui_kit_statelesswidget.dart';
import 'package:tim_ui_kit/ui/constants/emoji.dart';
import 'package:tencent_im_base/tencent_im_base.dart';
import 'package:tim_ui_kit/ui/widgets/emoji.dart';

import 'package:tim_ui_kit/base_widgets/tim_ui_kit_base.dart';

class EmojiPanel extends TIMUIKitStatelessWidget {
  final void Function(int unicode) onTapEmoji;
  final void Function() onSubmitted;
  final void Function() delete;
  final bool showBottomContainer;

  EmojiPanel({
    Key? key,
    required this.onTapEmoji,
    required this.onSubmitted,
    required this.delete,
    this.showBottomContainer = true, // 可选参数，是否展示下方的底部导航栏
  }) : super(key: key);

  @override
  Widget tuiBuild(BuildContext context, TUIKitBuildValue value) {
    return SingleChildScrollView(
        child: Column(
      children: [
        Container(
          height: showBottomContainer ? 190 : 248,
          // color: theme.weakBackgroundColor,
          padding: const EdgeInsets.fromLTRB(24, 16, 24, 16),
          child: Stack(
            children: [
              GridView(
                gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
                  crossAxisCount: 8,
                  childAspectRatio: 1,
                ),
                children: [
                  ...emojiData.map(
                    (e) {
                      var item = Emoji.fromJson(e);
                      return InkWell(
                        onTap: () {
                          onTapEmoji(item.unicode);
                        },
                        child: EmojiItem(
                          name: item.name,
                          unicode: item.unicode,
                        ),
                      );
                    },
                  ).toList(),
                ],
              ),
              Align(
                alignment: Alignment.bottomRight,
                child: SingleChildScrollView(
                  child: GestureDetector(
                    onTap: () {
                      delete();
                    },
                    child: Container(
                        // color: theme.weakBackgroundColor,
                        margin: const EdgeInsets.only(right: 15),
                        width: 35,
                        // height: MediaQuery.of(context).padding.bottom,
                        child: Center(
                          child: Image.asset(
                            'images/delete_emoji.png',
                            package: 'tim_ui_kit',
                            width: 35,
                            height: 20,
                          ),
                        )),
                  ),
                ),
              ),
            ],
          ),
        ),
        showBottomContainer
            ? Row(
                mainAxisAlignment: MainAxisAlignment.end,
                crossAxisAlignment: CrossAxisAlignment.center,
                children: [
                  SingleChildScrollView(
                    child: Container(
                        // color: Colors.white,
                        margin: const EdgeInsets.only(right: 25),
                        // height: MediaQuery.of(context).padding.bottom,
                        child: ElevatedButton(
                            child: Text(TIM_t("发送")),
                            style: ElevatedButton.styleFrom(),
                            onPressed: () {
                              onSubmitted();
                            })),
                  ),
                ],
              )
            : Container()
      ],
    ));
  }
}

class EmojiItem extends TIMUIKitStatelessWidget {
  EmojiItem({Key? key, required this.name, required this.unicode})
      : super(key: key);
  final String name;
  final int unicode;
  // final String toUser;
  // final int type;
  // final Function close;
  @override
  Widget tuiBuild(BuildContext context, TUIKitBuildValue value) {
    return Text(
      String.fromCharCode(unicode),
      style: const TextStyle(
        fontSize: 26,
      ),
    );
  }
}
文件：/im-flutter-uikit/package_src/tim_ui_kit/lib/ui/views/TIMUIKitChat/TIMUIKitTextField/tim_uikit_more_panel.dart
// ignore_for_file: unused_field, avoid_print, unused_import

import 'dart:io';

import 'package:flutter/material.dart';
import 'package:flutter_svg/svg.dart';
import 'package:image_picker/image_picker.dart';
import 'package:file_picker/file_picker.dart';
import 'package:path_provider/path_provider.dart';
import 'package:permission_handler/permission_handler.dart';
import 'package:provider/provider.dart';
import 'package:tencent_im_base/tencent_im_base.dart';
import 'package:tim_ui_kit/base_widgets/tim_ui_kit_state.dart';
import 'package:tim_ui_kit/business_logic/view_models/tui_chat_view_model.dart';
import 'package:tim_ui_kit/business_logic/view_models/tui_self_info_view_model.dart';
import 'package:tim_ui_kit/business_logic/view_models/tui_theme_view_model.dart';
import 'package:tim_ui_kit/data_services/services_locatar.dart';
import 'package:tim_ui_kit/ui/utils/color.dart';
import 'package:tim_ui_kit/ui/utils/message.dart';
import 'package:tim_ui_kit/ui/utils/permission.dart';
import 'package:tim_ui_kit/ui/utils/platform.dart';
import 'package:tim_ui_kit/ui/utils/tui_theme.dart';
import 'package:tim_ui_kit/ui/views/TIMUIKitChat/TIMUIKitTextField/intl_camer_picker.dart';
import 'package:tim_ui_kit/ui/widgets/toast.dart';
import 'package:video_thumbnail/video_thumbnail.dart' as video_thumbnail;
import 'package:wechat_assets_picker/wechat_assets_picker.dart';
import 'package:wechat_camera_picker/wechat_camera_picker.dart';
import 'package:tim_ui_kit/base_widgets/tim_ui_kit_base.dart';

import 'package:tim_ui_kit/ui/utils/shared_theme.dart';

class MorePanelConfig {
  final bool showGalleryPickAction;
  final bool showCameraAction;
  final bool showFilePickAction;
  final List<MorePanelItem>? extraAction;
  final Widget Function(MorePanelItem item)? actionBuilder;

  MorePanelConfig({
    this.showFilePickAction = true,
    this.showGalleryPickAction = true,
    this.showCameraAction = true,
    this.extraAction,
    this.actionBuilder,
  });
}

class MorePanelItem {
  final String title;
  final String id;
  final Widget icon;
  final Function(BuildContext context)? onTap;

  MorePanelItem(
      {this.onTap, required this.icon, required this.id, required this.title});
}

class MorePanel extends StatefulWidget {
  /// 会话ID
  final String conversationID;

  /// 会话类型
  final int conversationType;

  final MorePanelConfig? morePanelConfig;

  const MorePanel(
      {required this.conversationID,
      required this.conversationType,
      Key? key,
      this.morePanelConfig})
      : super(key: key);
  @override
  State<StatefulWidget> createState() => _MorePanelState();
}

class _MorePanelState extends TIMUIKitState<MorePanel> {
  final ImagePicker _picker = ImagePicker();
  final TUIChatViewModel model = serviceLocator<TUIChatViewModel>();
  final TUISelfInfoViewModel _selfInfoViewModel =
      serviceLocator<TUISelfInfoViewModel>();

  List<MorePanelItem> itemList() {
    final config = widget.morePanelConfig ?? MorePanelConfig();
    return [
      MorePanelItem(
          id: "screen",
          title: TIM_t("拍摄"),
          onTap: (c) {
            _onFeatureTap("screen", c);
          },
          icon: Container(
            height: 64,
            width: 64,
            margin: const EdgeInsets.only(bottom: 4),
            decoration: const BoxDecoration(
                color: Colors.white,
                borderRadius: BorderRadius.all(Radius.circular(5))),
            child: SvgPicture.asset(
              "images/screen.svg",
              package: 'tim_ui_kit',
              height: 64,
              width: 64,
            ),
          )),
      MorePanelItem(
          id: "photo",
          title: TIM_t("照片"),
          onTap: (c) {
            _onFeatureTap("photo", c);
          },
          icon: Container(
            height: 64,
            width: 64,
            margin: const EdgeInsets.only(bottom: 4),
            decoration: const BoxDecoration(
                color: Colors.white,
                borderRadius: BorderRadius.all(Radius.circular(5))),
            child: SvgPicture.asset(
              "images/photo.svg",
              package: 'tim_ui_kit',
              height: 64,
              width: 64,
            ),
          )),
      MorePanelItem(
          id: "file",
          title: TIM_t("文件"),
          onTap: (c) {
            _onFeatureTap("file", c);
          },
          icon: Container(
            height: 64,
            width: 64,
            margin: const EdgeInsets.only(bottom: 4),
            decoration: const BoxDecoration(
                color: Colors.white,
                borderRadius: BorderRadius.all(Radius.circular(5))),
            child: SvgPicture.asset(
              "images/file.svg",
              package: 'tim_ui_kit',
              height: 64,
              width: 64,
            ),
          )),
      if (config.extraAction != null) ...?config.extraAction,
    ].where((element) {
      if (element.id == "screen") {
        return config.showCameraAction;
      }

      if (element.id == "file") {
        return config.showFilePickAction;
      }

      if (element.id == "photo") {
        return config.showGalleryPickAction;
      }
      return true;
    }).toList();
  }

  _sendVideoMessage(AssetEntity asset) async {
    final originFile = await asset.originFile;
    final size = await originFile!.length();
    if (size >= 104857600) {
      onTIMCallback(TIMCallback(
          type: TIMCallbackType.INFO,
          infoRecommendText: TIM_t("发送失败,视频不能大于100MB"),
          infoCode: 6660405));
      return;
    }

    final duration = asset.videoDuration.inSeconds;
    final filePath = originFile.path;
    final convID = widget.conversationID;
    final convType =
        widget.conversationType == 1 ? ConvType.c2c : ConvType.group;

    String tempPath = (await getTemporaryDirectory()).path;

    String? thumbnail = await video_thumbnail.VideoThumbnail.thumbnailFile(
      video: originFile.path,
      thumbnailPath: tempPath,
      imageFormat: video_thumbnail.ImageFormat.JPEG,
      maxWidth:
          128, // specify the width of the thumbnail, let the height auto-scaled to keep the source aspect ratio
      quality: 25,
    );
    MessageUtils.handleMessageError(
        model.sendVideoMessage(
            videoPath: filePath,
            duration: duration,
            snapshotPath: thumbnail ?? '',
            convID: convID,
            convType: convType),
        context);
  }

  _sendImageMessage() async {
    try {
      final bool isAndroid = PlatformUtils().isAndroid;
      if (!await Permissions.checkPermission(context,
          isAndroid ? Permission.storage.value : Permission.photos.value)) {
        return;
      }
      final convID = widget.conversationID;
      final convType =
          widget.conversationType == 1 ? ConvType.c2c : ConvType.group;
      final pickedAssets = await AssetPicker.pickAssets(context);

      if (pickedAssets != null) {
        for (var asset in pickedAssets) {
          final originFile = await asset.originFile;
          final filePath = originFile?.path;
          final type = asset.type;
          if (filePath != null) {
            if (type == AssetType.image) {
              MessageUtils.handleMessageError(
                  model.sendImageMessage(
                      imagePath: filePath, convID: convID, convType: convType),
                  context);
            }

            if (type == AssetType.video) {
              _sendVideoMessage(asset);
            }
          }
        }
      }
    } catch (err) {
      print("err: $err");
    }
  }

  _sendImageFromCamera() async {
    try {
      if (!await Permissions.checkPermission(
          context, Permission.camera.value)) {
        return;
      }
      final convID = widget.conversationID;
      final convType =
          widget.conversationType == 1 ? ConvType.c2c : ConvType.group;
      // If here shows in English, not your language, you can add 'Localized resources can be mixed' with TRUE in "ios => Runner => info.plist"
      // final imageFile = await _picker.pickImage(source: ImageSource.camera);
      final pickedFile = await CameraPicker.pickFromCamera(context,
          pickerConfig: CameraPickerConfig(
              enableRecording: true,
              textDelegate: IntlCameraPickerTextDelegate()));
      final originFile = await pickedFile?.originFile;
      if (originFile != null) {
        final type = pickedFile!.type;
        if (type == AssetType.image) {
          MessageUtils.handleMessageError(
              model.sendImageMessage(
                  imagePath: originFile.path,
                  convID: convID,
                  convType: convType),
              context);
        }

        if (type == AssetType.video) {
          _sendVideoMessage(pickedFile);
        }
      } else {
        // Toast.showToast(ToastType.fail, TIM_t("图片不能为空"), context);
      }
    } catch (error) {
      print("err: $error");
    }
  }

  _sendFile() async {
    try {
      // if (!await Permissions.checkPermission(
      //     context, Permission.storage.value)) {
      //   return;
      // }
      FilePickerResult? result = await FilePicker.platform.pickFiles();
      final convID = widget.conversationID;
      final convType =
          widget.conversationType == 1 ? ConvType.c2c : ConvType.group;
      if (result != null) {
        String? option2 = result.files.single.path ?? "";
        print(TIM_t_para("选择成功{{option2}}", "选择成功$option2")(option2: option2));
        File file = File(result.files.single.path!);
        int size = file.lengthSync();
        String savePtah = file.path;

        MessageUtils.handleMessageError(
            model.sendFileMessage(
                filePath: savePtah,
                size: size,
                convID: convID,
                convType: convType),
            context);
      } else {
        throw NullThrownError();
      }
    } catch (e) {
      print("_sendFileErr: ${e.toString()}");
    }
  }

  _onFeatureTap(String id, BuildContext context) async {
    switch (id) {
      case "photo":
        _sendImageMessage();
        break;
      case "screen":
        _sendImageFromCamera();
        break;
      case "file":
        _sendFile();
        break;
    }
  }

  @override
  Widget tuiBuild(BuildContext context, TUIKitBuildValue value) {
    final TUITheme theme = value.theme;

    final screenWidth = MediaQuery.of(context).size.width;
    return Container(
      height: 248,
      decoration: BoxDecoration(
        // color: hexToColor("EBF0F6"),
        border: Border(
          top: BorderSide(width: 1, color: Colors.grey.shade300),
        ),
      ),
      padding: const EdgeInsets.symmetric(vertical: 10, horizontal: 23),
      width: screenWidth,
      child: Wrap(
        spacing: (screenWidth - (23 * 2) - 64 * 4) / 3,
        runSpacing: 20,
        children: itemList()
            .map((item) => InkWell(
                onTap: () {
                  if (item.onTap != null) {
                    item.onTap!(context);
                  }
                },
                child: widget.morePanelConfig?.actionBuilder != null
                    ? widget.morePanelConfig?.actionBuilder!(item)
                    : SizedBox(
                        height: 94,
                        width: 64,
                        child: Column(
                          children: [
                            Container(
                              height: 64,
                              width: 64,
                              margin: const EdgeInsets.only(bottom: 4),
                              decoration: const BoxDecoration(
                                  borderRadius:
                                      BorderRadius.all(Radius.circular(5))),
                              child: item.icon,
                            ),
                            Text(
                              item.title,
                              style: TextStyle(
                                  fontSize: 12, color: theme.darkTextColor),
                            )
                          ],
                        ),
                      )))
            .toList(),
      ),
    );
  }
}
文件：/im-flutter-uikit/package_src/tim_ui_kit/lib/ui/views/TIMUIKitChat/TIMUIKitTextField/tim_uikit_send_sound_message.dart
// ignore_for_file:  avoid_print, unused_import

import 'dart:async';
import 'dart:io';

import 'package:flutter/material.dart';
import 'package:permission_handler/permission_handler.dart';
import 'package:tencent_im_base/tencent_im_base.dart';
import 'package:provider/provider.dart';
import 'package:tim_ui_kit/base_widgets/tim_ui_kit_state.dart';
import 'package:tim_ui_kit/business_logic/view_models/tui_chat_view_model.dart';
import 'package:tim_ui_kit/business_logic/view_models/tui_theme_view_model.dart';
import 'package:tim_ui_kit/data_services/services_locatar.dart';

import 'package:tim_ui_kit/ui/utils/message.dart';
import 'package:tim_ui_kit/ui/utils/permission.dart';
import 'package:tim_ui_kit/ui/utils/sound_record.dart';
import 'package:tim_ui_kit/ui/utils/tui_theme.dart';
import 'package:tim_ui_kit/ui/widgets/toast.dart';
import 'package:tim_ui_kit/base_widgets/tim_ui_kit_base.dart';

class SendSoundMessage extends StatefulWidget {
  /// conversation ID
  final String conversationID;

  /// control the list to bottom
  final VoidCallback onDownBottom;

  /// the conversation type
  final int conversationType;

  const SendSoundMessage(
      {required this.conversationID,
      required this.conversationType,
      Key? key,
      required this.onDownBottom})
      : super(key: key);

  @override
  State<StatefulWidget> createState() => _SendSoundMessageState();
}

class _SendSoundMessageState extends TIMUIKitState<SendSoundMessage> {
  final TUIChatViewModel model = serviceLocator<TUIChatViewModel>();
  String soundTipsText = "";
  bool isRecording = false;
  bool isInit = false;
  bool isCancelSend = false;
  DateTime startTime = DateTime.now();
  List<StreamSubscription<Object>> subscriptions = [];

  OverlayEntry? overlayEntry;
  String voiceIcon = "images/voice_volume_1.png";

  buildOverLayView(BuildContext context) {
    if (overlayEntry == null) {
      overlayEntry = OverlayEntry(builder: (content) {
        return Positioned(
          top: 0,
          left: 0,
          width: MediaQuery.of(context).size.width,
          height: MediaQuery.of(context).size.height,
          child: Material(
            color: Colors.transparent,
            type: MaterialType.canvas,
            child: Center(
              child: Opacity(
                opacity: 0.8,
                child: Container(
                  width: 160,
                  height: 160,
                  decoration: const BoxDecoration(
                    color: Color(0xff77797A),
                    borderRadius: BorderRadius.all(Radius.circular(20.0)),
                  ),
                  child: Column(
                    children: <Widget>[
                      Container(
                        margin: const EdgeInsets.only(top: 10),
                        child: Image.asset(
                          voiceIcon,
                          width: 100,
                          height: 100,
                          package: 'flutter_plugin_record_plus',
                        ),
                      ),
                      Text(
                        soundTipsText,
                        style: const TextStyle(
                          fontStyle: FontStyle.normal,
                          color: Colors.white,
                          fontSize: 14,
                        ),
                      )
                    ],
                  ),
                ),
              ),
            ),
          ),
        );
      });
      Overlay.of(context)!.insert(overlayEntry!);
    }
  }

  onLongPressStart(_) {
    if (isInit) {
      setState(() {
        soundTipsText = TIM_t("手指上滑，取消发送");
      });
      startTime = DateTime.now();
      SoundPlayer.startRecord();
      buildOverLayView(context);
    }
  }

  onLongPressUpdate(e) {
    double height = MediaQuery.of(context).size.height * 0.5 - 240;
    double dy = e.localPosition.dy;

    if (dy.abs() > height) {
      if (mounted && soundTipsText != TIM_t("松开取消")) {
        setState(() {
          soundTipsText = TIM_t("松开取消");
        });
      }
    } else {
      if (mounted && soundTipsText == TIM_t("松开取消")) {
        setState(() {
          soundTipsText = TIM_t("手指上滑，取消发送");
        });
      }
    }
  }

  onLongPressEnd(e) {
    double dy = e.localPosition.dy;
    // 此高度为 160为录音取消组件距离顶部的预留距离
    double height = MediaQuery.of(context).size.height * 0.5 - 240;
    if (dy.abs() > height) {
      isCancelSend = true;
    } else {
      isCancelSend = false;
    }
    if (overlayEntry != null) {
      overlayEntry!.remove();
      overlayEntry = null;
    }
    // Did not receive onStop from FlutterPluginRecord if the duration is too short.
    if (DateTime.now().difference(startTime).inSeconds < 1) {
      isCancelSend = true;
      onTIMCallback(TIMCallback(
          type: TIMCallbackType.INFO,
          infoRecommendText: TIM_t("说话时间太短"),
          infoCode: 6660404));
    }
    stop();
  }

  onLonePressCancel() {
    if (isRecording) {
      isCancelSend = true;
      if (overlayEntry != null) {
        overlayEntry!.remove();
        overlayEntry = null;
      }
      stop();
    }
  }

  void stop() {
    setState(() {
      isRecording = false;
    });
    SoundPlayer.stopRecord();
    setState(() {
      soundTipsText = TIM_t("手指上滑，取消发送");
    });
  }

  sendSound({required String path, required int duration}) {
    final convID = widget.conversationID;
    final convType =
        widget.conversationType == 1 ? ConvType.c2c : ConvType.group;

    if (duration > 0) {
      if (!isCancelSend) {
        MessageUtils.handleMessageError(
            model.sendSoundMessage(
                soundPath: path,
                duration: duration,
                convID: convID,
                convType: convType),
            context);
        widget.onDownBottom();
      } else {
        isCancelSend = false;
      }
    } else {
      onTIMCallback(TIMCallback(
          type: TIMCallbackType.INFO,
          infoRecommendText: TIM_t("说话时间太短"),
          infoCode: 6660404));
    }
  }

  @override
  dispose() {
    for (var subscription in subscriptions) {
      subscription.cancel();
    }
    super.dispose();
  }

  initRecordSound() {
    final responseSubscription = SoundPlayer.responseListener((recordResponse) {
      final status = recordResponse.msg;
      if (status == "onStop") {
        if (!isCancelSend) {
          final soundPath = recordResponse.path;
          final recordDuration = recordResponse.audioTimeLength;
          sendSound(path: soundPath!, duration: recordDuration!.ceil());
        }
      } else if (status == "onStart") {
        print("start record");
        setState(() {
          isRecording = true;
        });
      } else {
        print(status);
      }
    });
    final amplitutdeResponseSubscription =
        SoundPlayer.responseFromAmplitudeListener((recordResponse) {
      final voiceData = double.parse(recordResponse.msg!);
      setState(() {
        if (voiceData > 0 && voiceData < 0.1) {
          voiceIcon = "images/voice_volume_2.png";
        } else if (voiceData > 0.2 && voiceData < 0.3) {
          voiceIcon = "images/voice_volume_3.png";
        } else if (voiceData > 0.3 && voiceData < 0.4) {
          voiceIcon = "images/voice_volume_4.png";
        } else if (voiceData > 0.4 && voiceData < 0.5) {
          voiceIcon = "images/voice_volume_5.png";
        } else if (voiceData > 0.5 && voiceData < 0.6) {
          voiceIcon = "images/voice_volume_6.png";
        } else if (voiceData > 0.6 && voiceData < 0.7) {
          voiceIcon = "images/voice_volume_7.png";
        } else if (voiceData > 0.7 && voiceData < 1) {
          voiceIcon = "images/voice_volume_7.png";
        } else {
          voiceIcon = "images/voice_volume_1.png";
        }
        if (overlayEntry != null) {
          overlayEntry!.markNeedsBuild();
        }
      });
    });
    subscriptions = [responseSubscription, amplitutdeResponseSubscription];
    SoundPlayer.initSoundPlayer();
    isInit = true;
  }

  @override
  Widget tuiBuild(BuildContext context, TUIKitBuildValue value) {
    final TUITheme theme = value.theme;

    return GestureDetector(
      onTapDown: (detail) async {
        if (!isInit) {
          bool hasMicrophonePermission = await Permissions.checkPermission(
              context, Permission.microphone.value);
          if (!hasMicrophonePermission) {
            return;
          }
          initRecordSound();
        }
      },
      onLongPressStart: onLongPressStart,
      onLongPressMoveUpdate: onLongPressUpdate,
      onLongPressEnd: onLongPressEnd,
      onLongPressCancel: onLonePressCancel,
      child: Container(
        height: 35,
        color: isRecording ? theme.weakBackgroundColor : Colors.white,
        alignment: Alignment.center,
        child: Text(
          TIM_t("按住说话"),
          textAlign: TextAlign.center,
          style: TextStyle(
            fontWeight: FontWeight.bold,
            fontSize: 16,
            color: theme.darkTextColor,
          ),
        ),
      ),
    );
  }
}
文件：/im-flutter-uikit/package_src/tim_ui_kit/lib/ui/views/TIMUIKitChat/TIMUIKitTextField/tim_uikit_text_field.dart
import 'dart:async';

import 'package:flutter/material.dart';
import 'package:flutter_svg/svg.dart';
import 'package:provider/provider.dart';
import 'package:scroll_to_index/scroll_to_index.dart';
import 'package:tim_ui_kit/base_widgets/tim_ui_kit_state.dart';
import 'package:tim_ui_kit/business_logic/view_models/tui_chat_view_model.dart';
import 'package:tim_ui_kit/business_logic/view_models/tui_conversation_view_model.dart';
import 'package:tim_ui_kit/business_logic/view_models/tui_group_profile_view_model.dart';
import 'package:tim_ui_kit/business_logic/view_models/tui_self_info_view_model.dart';
import 'package:tim_ui_kit/data_services/services_locatar.dart';
import 'package:tim_ui_kit/tim_ui_kit.dart';
import 'package:tim_ui_kit/ui/utils/color.dart';
import 'package:tim_ui_kit/ui/utils/message.dart';
import 'package:tim_ui_kit/ui/views/TIMUIKitChat/TIMUIKitTextField/tim_uikit_at_text.dart';
import 'package:tim_ui_kit/ui/views/TIMUIKitChat/TIMUIKitTextField/tim_uikit_emoji_panel.dart';
import 'package:tim_ui_kit/base_widgets/tim_ui_kit_base.dart';
import 'package:tim_ui_kit/ui/views/TIMUIKitChat/TIMUIKitTextField/tim_uikit_send_sound_message.dart';

import 'package:tim_ui_kit/ui/utils/permission.dart';

enum MuteStatus { none, me, all }

class TIMUIKitInputTextField extends StatefulWidget {
  /// conversation id
  final String conversationID;

  /// conversation type
  final int conversationType;

  /// init text, use for draft text re-view
  final String? initText;

  /// messageList widget scroll controller
  final AutoScrollController? scrollController;

  /// hint text for textField widget
  final String? hintText;

  /// config for more pannel
  final MorePanelConfig? morePanelConfig;

  /// show send audio icon
  final bool showSendAudio;

  /// show send emoji icon
  final bool showSendEmoji;

  /// show more pannel
  final bool showMorePannel;

  /// background color
  final Color? backgroundColor;

  /// controll input field behavior
  final TIMUIKitInputTextFieldController? controller;

  /// on text changed
  final void Function(String)? onChanged;

  /// sticker panel customiziation
  final Widget Function(
      {void Function() sendTextMessage,
      void Function(int index, String data) sendFaceMessage,
      void Function() deleteText,
      void Function(int unicode) addText})? customStickerPanel;

  const TIMUIKitInputTextField(
      {Key? key,
      required this.conversationID,
      required this.conversationType,
      this.initText,
      this.hintText,
      this.scrollController,
      this.morePanelConfig,
      this.customStickerPanel,
      this.showSendAudio = true,
      this.showSendEmoji = true,
      this.showMorePannel = true,
      this.backgroundColor,
      this.controller,
      this.onChanged})
      : super(key: key);

  @override
  State<StatefulWidget> createState() => _InputTextFieldState();
}

class _InputTextFieldState extends TIMUIKitState<TIMUIKitInputTextField> {
  bool showMore = false;
  bool showSendSoundText = false;
  bool showEmojiPanel = false;
  bool showKeyboard = false;
  late FocusNode focusNode;
  String zeroWidthSpace = '\ufeff';
  String lastText = "";
  double lastkeyboardHeight = 0;

  Map<String, V2TimGroupMemberFullInfo> memberInfoMap = {};

  late TextEditingController textEditingController;
  final TUIChatViewModel model = serviceLocator<TUIChatViewModel>();
  final TUIConversationViewModel conversationModel =
      serviceLocator<TUIConversationViewModel>();
  final TUISelfInfoViewModel selfModel = serviceLocator<TUISelfInfoViewModel>();
  MuteStatus muteStatus = MuteStatus.none;

  listenKeyBoardStatus() {
    final currentKeyboardHeight = MediaQuery.of(context).viewInsets.bottom;
    // 键盘弹出
    if (currentKeyboardHeight - lastkeyboardHeight > 0) {
      // 保证弹出时showKeyboard为true
      setState(() {
        showKeyboard = true;
      });

      /// 键盘收回
    } else if (currentKeyboardHeight - lastkeyboardHeight < 0) {}

    lastkeyboardHeight = MediaQuery.of(context).viewInsets.bottom;
  }

  Widget _getBottomContainer() {
    if (showEmojiPanel) {
      return widget.customStickerPanel != null
          ? widget.customStickerPanel!(
              sendTextMessage: () {
                onEmojiSubmitted();
              },
              sendFaceMessage: onCustomEmojiFaceSubmitted,
              deleteText: () {
                backSpaceText();
              },
              addText: (int unicode) {
                final oldText = textEditingController.text;
                final newText = String.fromCharCode(unicode);
                textEditingController.text = "$oldText$newText";
                // handleSetDraftText();
              },
            )
          : EmojiPanel(onTapEmoji: (unicode) {
              final oldText = textEditingController.text;
              final newText = String.fromCharCode(unicode);
              textEditingController.text = "$oldText$newText";
              // handleSetDraftText();
            }, onSubmitted: () {
              onEmojiSubmitted();
            }, delete: () {
              backSpaceText();
            });
    }

    if (showMore) {
      return MorePanel(
          morePanelConfig: widget.morePanelConfig,
          conversationID: widget.conversationID,
          conversationType: widget.conversationType);
    }

    return Container();
  }

  double _getBottomHeight() {
    listenKeyBoardStatus();
    // if (showKeyboard) {
    //   // return MediaQuery.of(context).viewInsets.bottom;
    //   return 0;
    // } else
    if (showMore || showEmojiPanel) {
      return 248.0;
    }
    // 在文本框多行拓展时增加保护区高度
    else if (textEditingController.text.length >= 46 && showKeyboard == false) {
      return 25;
    } else {
      return 0;
    }
  }

  _openMore() {
    if (!showMore) {
      focusNode.unfocus();
    }
    setState(() {
      showKeyboard = false;
      showEmojiPanel = false;
      showSendSoundText = false;
      showMore = !showMore;
    });
  }

  _openEmojiPanel() {
    if (showEmojiPanel) {
      focusNode.requestFocus();
    } else {
      focusNode.unfocus();
    }

    setState(() {
      showKeyboard = showEmojiPanel;
      showMore = false;
      showSendSoundText = false;
      showEmojiPanel = !showEmojiPanel;
    });
  }

  String _filterU200b(String text) {
    return text.replaceAll(RegExp(r'\ufeff'), "");
  }

  getShowName(message) {
    return message.friendRemark == null || message.friendRemark == ''
        ? message.nickName == null || message.nickName == ''
            ? message.sender
            : message.nickName
        : message.friendRemark;
  }

  handleSetDraftText() async {
    String convID = widget.conversationID;
    String conversationID =
        widget.conversationType == ConversationType.V2TIM_C2C
            ? "c2c_$convID"
            : "group_$convID";
    String text = textEditingController.text;
    String? draftText = _filterU200b(text);

    if (draftText.isEmpty) {
      draftText = "";
    }
    await conversationModel.setConversationDraft(
        conversationID: conversationID, draftText: draftText);
  }

  _buildRepliedMessage(V2TimMessage? repliedMessage) {
    final haveRepliedMessage = repliedMessage != null;
    if (haveRepliedMessage) {
      final text =
          "${MessageUtils.getDisplayName(model.repliedMessage!)}:${model.abstractMessageBuilder != null ? model.abstractMessageBuilder!(model.repliedMessage!) : MessageUtils.getAbstractMessage(model.repliedMessage!)}";
      return Container(
        color: hexToColor("EBF0F6"),
        alignment: Alignment.centerLeft,
        padding: const EdgeInsets.symmetric(vertical: 10, horizontal: 16),
        child: Row(
          mainAxisAlignment: MainAxisAlignment.spaceBetween,
          children: [
            Expanded(
              child: Text(
                text,
                softWrap: true,
                overflow: TextOverflow.ellipsis,
                style: TextStyle(color: hexToColor("8F96A0"), fontSize: 14),
              ),
            ),
            InkWell(
              onTap: () {
                model.setRepliedMessage(null);
              },
              child: SizedBox(
                height: 18,
                width: 18,
                child: Image.asset(
                  'images/clear.png',
                  package: 'tim_ui_kit',
                ),
              ),
            )
          ],
        ),
      );
    }
    return Container();
  }

  backSpaceText() {
    String originalText = textEditingController.text;
    dynamic text;

    if (originalText == zeroWidthSpace) {
      _handleSoftKeyBoardDelete();
      // _addDeleteTag();
    } else {
      text = originalText.characters.skipLast(1);
      textEditingController.text = "$text";
      // handleSetDraftText();
    }

    // if (originalText.isNotEmpty) {
    //   text = originalText.characters.skipLast(1);
    //   textEditingController.text = "$text";
    // }
  }

// 和onSubmitted一样，只是保持焦点的不同
  onEmojiSubmitted() {
    final text = textEditingController.text.trim();
    final convType =
        widget.conversationType == 1 ? ConvType.c2c : ConvType.group;
    if (text.isNotEmpty && text != zeroWidthSpace) {
      if (model.repliedMessage != null) {
        MessageUtils.handleMessageError(
            model.sendReplyMessage(
                text: text, convID: widget.conversationID, convType: convType),
            context);
      } else {
        MessageUtils.handleMessageError(
            model.sendTextMessage(
                text: text, convID: widget.conversationID, convType: convType),
            context);
      }
      textEditingController.clear();
      goDownBottom();
    }
  }

  onCustomEmojiFaceSubmitted(int index, String data) {
    final convType =
        widget.conversationType == 1 ? ConvType.c2c : ConvType.group;
    if (model.repliedMessage != null) {
      MessageUtils.handleMessageError(
          model.sendFaceMessage(
              index: index,
              data: data,
              convID: widget.conversationID,
              convType: convType),
          context);
    } else {
      MessageUtils.handleMessageError(
          model.sendFaceMessage(
              index: index,
              data: data,
              convID: widget.conversationID,
              convType: convType),
          context);
    }
  }

  List<String> getUserIdFromMemberInfoMap() {
    List<String> userList = [];
    memberInfoMap.forEach((String key, V2TimGroupMemberFullInfo info) {
      userList.add(info.userID);
    });

    return userList;
  }

  onSubmitted() async {
    final text = textEditingController.text.trim();
    final convType =
        widget.conversationType == 1 ? ConvType.c2c : ConvType.group;
    if (text.isNotEmpty && text != zeroWidthSpace) {
      if (model.repliedMessage != null) {
        MessageUtils.handleMessageError(
            model.sendReplyMessage(
                text: text, convID: widget.conversationID, convType: convType),
            context);
      } else if (memberInfoMap.isNotEmpty) {
        model.sendTextAtMessage(
            text: text,
            convType:
                widget.conversationType == 1 ? ConvType.c2c : ConvType.group,
            convID: widget.conversationID,
            atUserList: getUserIdFromMemberInfoMap());
      } else {
        MessageUtils.handleMessageError(
            model.sendTextMessage(
                text: text, convID: widget.conversationID, convType: convType),
            context);
      }
      textEditingController.clear();
      focusNode.requestFocus();
      lastText = "";
      memberInfoMap = {};
      setState(() {
        showKeyboard = true;
      });
      goDownBottom();
    }
  }

  void goDownBottom() {
    Future.delayed(const Duration(milliseconds: 50), () {
      if (widget.scrollController != null) {
        widget.scrollController!.animateTo(
          widget.scrollController!.position.minScrollExtent,
          duration: const Duration(milliseconds: 200),
          curve: Curves.ease,
        );
      }
    });
  }

  _hideAllPanel() {
    focusNode.unfocus();
    if (showKeyboard != false || showMore != false || showEmojiPanel != false) {
      setState(() {
        showKeyboard = false;
        showMore = false;
        showEmojiPanel = false;
      });
    }
  }

  void onModelChanged() {
    if (model.repliedMessage != null) {
      focusNode.requestFocus();
      _addDeleteTag();
      setState(() {
        showKeyboard = true;
      });
    } else {}
    if (model.editRevokedMsg != "") {
      focusNode.requestFocus();
      setState(() {
        showKeyboard = true;
      });
      textEditingController.clear();
      textEditingController.text = model.editRevokedMsg;
      textEditingController.selection = TextSelection.fromPosition(TextPosition(
          affinity: TextAffinity.downstream,
          offset: model.editRevokedMsg.length));
      model.editRevokedMsg = "";
    }
  }

  _addDeleteTag() {
    final originalText = textEditingController.text;
    textEditingController.text = zeroWidthSpace + originalText;
    textEditingController.selection = TextSelection.fromPosition(
        TextPosition(offset: textEditingController.text.length));
  }

  _handleSoftKeyBoardDelete() {
    if (model.repliedMessage != null) {
      model.setRepliedMessage(null);
    }
  }

  _getShowName(V2TimGroupMemberFullInfo? item) {
    final nameCard = item?.nameCard ?? "";
    final nickName = item?.nickName ?? "";
    final userID = item?.userID ?? "";
    return nameCard.isNotEmpty
        ? nameCard
        : nickName.isNotEmpty
            ? nickName
            : userID;
  }

  _longPressToAt(String? userID, String? nickName) {
    final memberInfo = V2TimGroupMemberFullInfo(
      userID: userID ?? "",
      nickName: nickName,
    );
    final showName = _getShowName(memberInfo);
    memberInfoMap["@$showName"] = memberInfo;
    String text = "$lastText@$showName ";
    //please do not delete space
    textEditingController.text = text;
    textEditingController.selection =
        TextSelection.fromPosition(TextPosition(offset: text.length));
    lastText = text;
  }

  _handleAtText(String text) async {
    String? groupID = widget.conversationType == ConversationType.V2TIM_GROUP
        ? widget.conversationID
        : null;

    if (groupID == null) {
      lastText = text;
      return;
    }

    RegExp atTextReg = RegExp(r'@([^@\s]*)');

    int textLength = text.length;
    // 删除的话
    if (lastText.length > textLength && text != "@") {
      Map<String, V2TimGroupMemberFullInfo> map = {};
      Iterable<Match> matches = atTextReg.allMatches(text);
      List<String?> parseAtList = [];
      for (final item in matches) {
        final str = item.group(0);
        parseAtList.add(str);
      }
      for (String? key in parseAtList) {
        if (key != null && memberInfoMap[key] != null) {
          map[key] = memberInfoMap[key]!;
        }
      }
      memberInfoMap = map;
    }
    // 有@的情况并且是文本新增的时候
    if (text[textLength - 1] == "@" &&
        (lastText.length < textLength || text == "@")) {
      V2TimGroupMemberFullInfo? memberInfo = await Navigator.push(
        context,
        MaterialPageRoute(
          builder: (context) => AtText(
              groupID: groupID,
              groupType: conversationModel.selectedConversation?.groupType),
        ),
      );
      final showName = _getShowName(memberInfo);
      if (memberInfo != null) {
        memberInfoMap["@$showName"] = memberInfo;
        //please don not delete space
        textEditingController.text = "$text$showName ";
      }
    }
    lastText = text;
  }

  _debounce(
    Function(String text) fun, [
    Duration delay = const Duration(milliseconds: 100),
  ]) {
    Timer? timer;
    return (String text) {
      if (timer != null) {
        timer?.cancel();
      }

      timer = Timer(delay, () {
        fun(text);
      });
    };
  }

  @override
  void initState() {
    super.initState();
    focusNode = FocusNode();
    textEditingController =
        widget.controller?.textEditingController ?? TextEditingController();
    if (widget.controller != null) {
      widget.controller?.addListener(() {
        final actionType = widget.controller?.actionType;
        if (actionType == ActionType.hideAllPanel) {
          _hideAllPanel();
        }
        if (actionType == ActionType.longPressToAt) {
          _longPressToAt(
              widget.controller?.atUserID, widget.controller?.atUserName);
        }
      });
    }
    model.addListener(onModelChanged);
    if (widget.initText != null) {
      textEditingController.text = widget.initText!;
    }
  }

  @override
  void dispose() {
    handleSetDraftText();
    model.removeListener(onModelChanged);
    focusNode.dispose();
    // textEditingController.dispose();
    super.dispose();
  }

  _getMuteType(TUIGroupProfileViewModel groupProfileViewModel) async {
    if (widget.conversationType == 2) {
      if ((groupProfileViewModel.groupInfo?.isAllMuted ?? false) &&
          muteStatus != MuteStatus.all) {
        Future.delayed(const Duration(seconds: 0), () {
          setState(() {
            muteStatus = MuteStatus.all;
          });
        });
      } else if (selfModel.loginInfo?.userID != null &&
          await groupProfileViewModel
              .getMemberMuteStatus(selfModel.loginInfo!.userID!) &&
          muteStatus != MuteStatus.me) {
        Future.delayed(const Duration(seconds: 0), () {
          setState(() {
            muteStatus = MuteStatus.me;
          });
        });
      } else if (!(groupProfileViewModel.groupInfo?.isAllMuted ?? false) &&
          !(selfModel.loginInfo?.userID != null &&
              await groupProfileViewModel
                  .getMemberMuteStatus(selfModel.loginInfo!.userID!)) &&
          muteStatus != MuteStatus.none) {
        Future.delayed(const Duration(seconds: 0), () {
          setState(() {
            muteStatus = MuteStatus.none;
          });
        });
      }
    }
  }

  @override
  Widget tuiBuild(BuildContext context, TUIKitBuildValue value) {
    final TUIGroupProfileViewModel groupProfileViewModel =
        Provider.of<TUIGroupProfileViewModel>(context);
    final theme = value.theme;
    _getMuteType(groupProfileViewModel);
    final debounceFunc = _debounce((value) {
      if (widget.onChanged != null) {
        widget.onChanged!(value);
      }
      _handleAtText(value);
      final isEmpty = value.isEmpty;
      if (isEmpty) {
        _handleSoftKeyBoardDelete();
      }
    }, const Duration(milliseconds: 80));
    return Selector<TUIChatViewModel, V2TimMessage?>(
        builder: ((context, value, child) {
          return Column(
            children: [
              _buildRepliedMessage(value),
              Container(
                color: widget.backgroundColor ?? hexToColor("EBF0F6"),
                child: SafeArea(
                  child: Column(
                    children: [
                      Container(
                        padding: const EdgeInsets.symmetric(
                            vertical: 8, horizontal: 16),
                        constraints: const BoxConstraints(minHeight: 50),
                        child: Row(
                          children: [
                            if (muteStatus != MuteStatus.none)
                              Expanded(
                                  child: Container(
                                height: 35,
                                color: theme.weakBackgroundColor,
                                alignment: Alignment.center,
                                child: Text(
                                  TIM_t(muteStatus == MuteStatus.all
                                      ? "全员禁言中"
                                      : "您被禁言"),
                                  textAlign: TextAlign.center,
                                  style: TextStyle(
                                    fontWeight: FontWeight.bold,
                                    fontSize: 16,
                                    color: theme.weakTextColor,
                                  ),
                                ),
                              )),
                            if (widget.showSendAudio &&
                                muteStatus == MuteStatus.none)
                              InkWell(
                                onTap: () async {
                                  if (showSendSoundText) {
                                    focusNode.requestFocus();
                                    setState(() {
                                      showKeyboard = true;
                                    });
                                  }
                                  if (await Permissions.checkPermission(
                                      context, Permission.microphone.value)) {
                                    setState(() {
                                      showEmojiPanel = false;
                                      showMore = false;
                                      showSendSoundText = !showSendSoundText;
                                    });
                                  }
                                },
                                child: SvgPicture.asset(
                                  showSendSoundText
                                      ? 'images/keyboard.svg'
                                      : 'images/voice.svg',
                                  package: 'tim_ui_kit',
                                  color: const Color.fromRGBO(68, 68, 68, 1),
                                  height: 28,
                                  width: 28,
                                ),
                              ),
                            if (muteStatus == MuteStatus.none)
                              const SizedBox(
                                width: 10,
                              ),
                            if (muteStatus == MuteStatus.none)
                              Expanded(
                                child: showSendSoundText
                                    ? SendSoundMessage(
                                        onDownBottom: goDownBottom,
                                        conversationID: widget.conversationID,
                                        conversationType:
                                            widget.conversationType)
                                    : TextField(
                                        onChanged: debounceFunc,
                                        maxLines: 4,
                                        minLines: 1,
                                        controller: textEditingController,
                                        focusNode: focusNode,
                                        onTap: () {
                                          goDownBottom();
                                          setState(() {
                                            showKeyboard = true;
                                            showEmojiPanel = false;
                                            showMore = false;
                                          });
                                        },
                                        keyboardType: TextInputType.text,
                                        textInputAction: TextInputAction.send,
                                        onEditingComplete: onSubmitted,
                                        textAlignVertical:
                                            TextAlignVertical.center,
                                        decoration: InputDecoration(
                                            border: InputBorder.none,
                                            hintStyle: const TextStyle(
                                              // fontSize: 10,
                                              color: Color(0xffAEA4A3),
                                            ),
                                            fillColor: Colors.white,
                                            filled: true,
                                            isDense: true,
                                            hintText: widget.hintText ?? ''),
                                      ),
                              ),
                            if (muteStatus == MuteStatus.none)
                              const SizedBox(
                                width: 10,
                              ),
                            if (widget.showSendEmoji &&
                                muteStatus == MuteStatus.none)
                              InkWell(
                                onTap: () {
                                  _openEmojiPanel();
                                  goDownBottom();
                                },
                                child: SvgPicture.asset(
                                  showEmojiPanel
                                      ? 'images/keyboard.svg'
                                      : 'images/face.svg',
                                  package: 'tim_ui_kit',
                                  color: const Color.fromRGBO(68, 68, 68, 1),
                                  height: 28,
                                  width: 28,
                                ),
                              ),
                            if (muteStatus == MuteStatus.none)
                              const SizedBox(
                                width: 10,
                              ),
                            if (widget.showMorePannel &&
                                muteStatus == MuteStatus.none)
                              InkWell(
                                onTap: () {
                                  _openMore();
                                  goDownBottom();
                                },
                                child: SvgPicture.asset(
                                  'images/add.svg',
                                  package: 'tim_ui_kit',
                                  color: const Color.fromRGBO(68, 68, 68, 1),
                                  height: 28,
                                  width: 28,
                                ),
                              )
                          ],
                        ),
                      ),
                      AnimatedContainer(
                        duration: const Duration(milliseconds: 150),
                        height: _getBottomHeight(),
                        child: _getBottomContainer(),
                      )
                    ],
                  ),
                ),
              )
            ],
          );
        }),
        selector: (c, model) => model.repliedMessage);
  }
}
文件：/im-flutter-uikit/package_src/tim_ui_kit/lib/ui/views/TIMUIKitChat/TIMUIKitTextField/tim_uikit_text_field_controller.dart
import 'package:flutter/material.dart';

enum ActionType { hideAllPanel, longPressToAt }

class TIMUIKitInputTextFieldController extends ChangeNotifier {
  TextEditingController? textEditingController = TextEditingController();
  ActionType? actionType;
  String? atUserName;
  String? atUserID;

  TIMUIKitInputTextFieldController([TextEditingController? controller]) {
    if (controller != null) {
      textEditingController = controller;
    }
  }

  /// text field unfocus and hide all panel
  hideAllPanel() {
    actionType = ActionType.hideAllPanel;
    notifyListeners();
  }

  longPressToAt(String? userName, String? userID) {
    actionType = ActionType.longPressToAt;
    atUserName = userName;
    atUserID = userID;
    notifyListeners();
  }
}
文件：/im-flutter-uikit/package_src/tim_ui_kit/lib/ui/views/TIMUIKitContact/tim_uikit_contact.dart
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:tim_ui_kit/base_widgets/tim_ui_kit_state.dart';
import 'package:tim_ui_kit/business_logic/life_cycle/friend_list_life_cycle.dart';
import 'package:tim_ui_kit/business_logic/view_models/tui_contact_view_model.dart';
import 'package:tim_ui_kit/data_services/services_locatar.dart';
import 'package:tim_ui_kit/tim_ui_kit.dart';

export 'package:tim_ui_kit/ui/widgets/contact_list.dart';
import 'package:tim_ui_kit/base_widgets/tim_ui_kit_base.dart';

class TIMUIKitContact extends StatefulWidget {
  /// the callback after clicking contact item
  final void Function(V2TimFriendInfo item)? onTapItem;

  /// the list on top
  final List<TopListItem>? topList;

  /// the builder for the list on top
  final Widget? Function(TopListItem item)? topListItemBuilder;

  /// the builder for the empty item, especially when there is no contact
  final Widget Function(BuildContext context)? emptyBuilder;

  /// the life cycle hooks for friend list or contacts list business logic
  final FriendListLifeCycle? lifeCycle;

  const TIMUIKitContact(
      {Key? key,
      this.onTapItem,
      this.lifeCycle,
      this.topList,
      this.topListItemBuilder,
      this.emptyBuilder})
      : super(key: key);

  @override
  State<StatefulWidget> createState() => _TIMUIKitContactState();
}

class _TIMUIKitContactState extends TIMUIKitState<TIMUIKitContact> {
  final TUIContactViewModel model = serviceLocator<TUIContactViewModel>();

  @override
  void initState() {
    super.initState();
    model.loadData();
    model.setFriendshipListener();
  }

  @override
  void dispose() {
    super.dispose();
    model.removeFriendShipListener();
    // model.dispose();
  }

  @override
  Widget tuiBuild(BuildContext context, TUIKitBuildValue value) {
    return MultiProvider(
        providers: [
          ChangeNotifierProvider.value(value: model),
        ],
        builder: (context, w) {
          final model = Provider.of<TUIContactViewModel>(context);
          model.lifeCycle = widget.lifeCycle;
          final memberList = model.friendList;

          return ContactList(
            contactList: memberList ?? [],
            onTapItem: widget.onTapItem,
            topList: widget.topList,
            topListItemBuilder: widget.topListItemBuilder,
          );
        });
  }
}
文件：/im-flutter-uikit/package_src/tim_ui_kit/lib/ui/views/TIMUIKitConversation/tim_uikit_conversation.dart
import 'package:flutter/material.dart';
import 'package:flutter_easyrefresh/easy_refresh.dart';
import 'package:flutter_slidable/flutter_slidable.dart';
import 'package:provider/provider.dart';
import 'package:tim_ui_kit/base_widgets/tim_ui_kit_state.dart';
import 'package:tim_ui_kit/base_widgets/tim_ui_kit_statelesswidget.dart';
import 'package:tim_ui_kit/business_logic/life_cycle/conversation_life_cycle.dart';
import 'package:tim_ui_kit/business_logic/view_models/tui_conversation_view_model.dart';
import 'package:tim_ui_kit/business_logic/view_models/tui_theme_view_model.dart';
import 'package:tim_ui_kit/data_services/services_locatar.dart';
import 'package:tim_ui_kit/ui/controller/tim_uikit_conversation_controller.dart';
import 'package:tim_ui_kit/ui/utils/color.dart';
import 'package:tim_ui_kit/ui/views/TIMUIKitConversation/tim_uikit_conversation_item.dart';
import 'package:tim_ui_kit/ui/widgets/customize_ball_pulse_header.dart';
import 'package:tim_ui_kit/base_widgets/tim_ui_kit_base.dart';
import 'package:tencent_im_base/tencent_im_base.dart';

typedef ConversationItemBuilder = Widget Function(
    V2TimConversation conversationItem);

typedef ConversationItemSlidableBuilder = List<ConversationItemSlidablePanel>
    Function(V2TimConversation conversationItem);

class TIMUIKitConversation extends StatefulWidget {
  /// the callback after clicking contact item
  final ValueChanged<V2TimConversation>? onTapItem;

  /// conversation controller
  final TIMUIKitConversationController? controller;

  /// the builder for conversation item
  final ConversationItemBuilder? itembuilder;

  /// the builder for slidable item for each conversation item
  final ConversationItemSlidableBuilder? itemSlidableBuilder;

  /// the widget shows when no conversation exists
  final Widget Function()? emptyBuilder;

  /// the filter for conversation
  final bool Function(V2TimConversation? conversation)? conversationCollector;

  /// the builder for the second line in each conservation item, usually shows the summary of the last message
  final LastMessageBuilder? lastMessageBuilder;

  /// The life cycle hooks for `TIMUIKitConversation`
  final ConversationLifeCycle? lifeCycle;

  const TIMUIKitConversation(
      {Key? key,
      this.lifeCycle,
      this.onTapItem,
      this.controller,
      this.itembuilder,
      this.itemSlidableBuilder,
      this.conversationCollector,
      this.emptyBuilder,
      this.lastMessageBuilder})
      : super(key: key);

  @override
  State<StatefulWidget> createState() {
    return _TIMUIKitConversationState();
  }
}

class ConversationItemSlidablePanel extends TIMUIKitStatelessWidget {
  ConversationItemSlidablePanel({
    Key? key,
    this.flex = 1,
    this.backgroundColor = Colors.white,
    this.foregroundColor,
    this.autoClose = true,
    required this.onPressed,
    this.icon,
    this.spacing = 4,
    this.label,
  })  : assert(flex > 0),
        assert(icon != null || label != null),
        super(key: key);

  /// {@macro slidable.actions.flex}
  final int flex;

  /// {@macro slidable.actions.backgroundColor}
  final Color backgroundColor;

  /// {@macro slidable.actions.foregroundColor}
  final Color? foregroundColor;

  /// {@macro slidable.actions.autoClose}
  final bool autoClose;

  /// {@macro slidable.actions.onPressed}
  final SlidableActionCallback? onPressed;

  /// An icon to display above the [label].
  final IconData? icon;

  /// The space between [icon] and [label] if both set.
  ///
  /// Defaults to 4.
  final double spacing;

  /// A label to display below the [icon].
  final String? label;

  @override
  Widget tuiBuild(BuildContext context, TUIKitBuildValue value) {
    return SlidableAction(
      onPressed: onPressed,
      flex: flex,
      backgroundColor: backgroundColor,
      foregroundColor: foregroundColor,
      autoClose: autoClose,
      label: label,
      spacing: spacing,
    );
  }
}

class _TIMUIKitConversationState extends TIMUIKitState<TIMUIKitConversation> {
  late TUIConversationViewModel model;
  late TIMUIKitConversationController _timuiKitConversationController;
  final TUIThemeViewModel _themeViewModel = serviceLocator<TUIThemeViewModel>();

  @override
  void initState() {
    super.initState();
    final controller = getController();
    model = controller.model;
    _timuiKitConversationController = controller;
    _timuiKitConversationController.loadData();
  }

  TIMUIKitConversationController getController() {
    return widget.controller ?? TIMUIKitConversationController();
  }

  void onTapConvItem(V2TimConversation conversation) {
    if (widget.onTapItem != null) {
      widget.onTapItem!(conversation);
    }
    model.setSelectedConversation(conversation);
  }

  _clearHistory(V2TimConversation conversationItem) {
    _timuiKitConversationController.clearHistoryMessage(
        conversation: conversationItem);
  }

  _pinConversation(V2TimConversation conversation) {
    _timuiKitConversationController.pinConversation(
        conversationID: conversation.conversationID,
        isPinned: !conversation.isPinned!);
  }

  _deleteConversation(V2TimConversation conversation) {
    _timuiKitConversationController.deleteConversation(
        conversationID: conversation.conversationID);
  }

  List<ConversationItemSlidablePanel> _defaultSlidableBuilder(
    V2TimConversation conversationItem,
  ) {
    final theme = _themeViewModel.theme;
    return [
      ConversationItemSlidablePanel(
        onPressed: (context) {
          _clearHistory(conversationItem);
        },
        backgroundColor: theme.primaryColor ?? CommonColor.primaryColor,
        foregroundColor: Colors.white,
        label: TIM_t("清除聊天"),
        spacing: 0,
        autoClose: true,
      ),
      ConversationItemSlidablePanel(
        onPressed: (context) {
          _pinConversation(conversationItem);
        },
        backgroundColor: theme.infoColor ?? CommonColor.infoColor,
        foregroundColor: Colors.white,
        label: conversationItem.isPinned! ? TIM_t("取消置顶") : TIM_t("置顶"),
      ),
      ConversationItemSlidablePanel(
        onPressed: (context) {
          _deleteConversation(conversationItem);
        },
        backgroundColor: Colors.red,
        foregroundColor: Colors.white,
        label: TIM_t("删除"),
      )
    ];
  }

  ConversationItemSlidableBuilder _getSlidableBuilder() {
    return widget.itemSlidableBuilder ?? _defaultSlidableBuilder;
  }

  @override
  void dispose() {
    super.dispose();
    // model.dispose();
  }

  @override
  Widget tuiBuild(BuildContext context, TUIKitBuildValue value) {
    return MultiProvider(
        providers: [
          ChangeNotifierProvider.value(value: model),
          ChangeNotifierProvider.value(value: _themeViewModel)
        ],
        builder: (BuildContext context, Widget? w) {
          final _model = Provider.of<TUIConversationViewModel>(context);
          _model.lifeCycle = widget.lifeCycle;
          List<V2TimConversation?> filteredConversationList =
              _model.conversationList;
          bool haveMoreData = _model.haveMoreData;
          if (widget.conversationCollector != null) {
            filteredConversationList = filteredConversationList
                .where(widget.conversationCollector!)
                .toList();
          }
          return SlidableAutoCloseBehavior(
            child: EasyRefresh(
              header: CustomizeBallPulseHeader(
                  color: _themeViewModel.theme.primaryColor),
              onRefresh: () async {
                model.clear();
                model.loadData(count: 100);
              },
              child: filteredConversationList.isNotEmpty
                  ? ListView.builder(
                      shrinkWrap: true,
                      itemCount: filteredConversationList.length,
                      itemBuilder: (context, index) {
                        if (index == filteredConversationList.length - 1) {
                          if (haveMoreData) {
                            _timuiKitConversationController.loadData();
                          }
                        }

                        final conversationItem =
                            filteredConversationList[index];
                        if (widget.itembuilder != null) {
                          return widget.itembuilder!(conversationItem!);
                        }

                        final slidableChildren =
                            _getSlidableBuilder()(conversationItem!);
                        return Slidable(
                            groupTag: 'conversation-list',
                            child: InkWell(
                              child: TIMUIKitConversationItem(
                                lastMessageBuilder: widget.lastMessageBuilder,
                                faceUrl: conversationItem.faceUrl ?? "",
                                nickName: conversationItem.showName ?? "",
                                isDisturb: conversationItem.recvOpt != 0,
                                lastMsg: conversationItem.lastMessage,
                                isPined: conversationItem.isPinned ?? false,
                                groupAtInfoList:
                                    conversationItem.groupAtInfoList ?? [],
                                unreadCount: conversationItem.unreadCount ?? 0,
                                draftText: conversationItem.draftText,
                                draftTimestamp: conversationItem.draftTimestamp,
                              ),
                              onTap: () => onTapConvItem(conversationItem),
                            ),
                            endActionPane: ActionPane(
                                extentRatio:
                                    slidableChildren.length > 2 ? 0.7 : 0.5,
                                motion: const DrawerMotion(),
                                children: slidableChildren));
                      })
                  : (widget.emptyBuilder != null
                      ? widget.emptyBuilder!()
                      : Container()),
            ),
          );
        });
  }
}
文件：/im-flutter-uikit/package_src/tim_ui_kit/lib/ui/views/TIMUIKitConversation/tim_uikit_conversation_draft_text.dart
import 'package:flutter/material.dart';
import 'package:tim_ui_kit/base_widgets/tim_ui_kit_statelesswidget.dart';
import 'package:tim_ui_kit/base_widgets/tim_ui_kit_base.dart';
import 'package:tim_ui_kit/ui/utils/tui_theme.dart';
import 'package:tencent_im_base/tencent_im_base.dart';

class TIMUIKitDraftText extends TIMUIKitStatelessWidget {
  final BuildContext context;
  final String draftText;

  TIMUIKitDraftText({
    Key? key,
    required this.context,
    required this.draftText,
  }) : super(key: key);

  String _getDraftShowText() {
    final draftShowText = TIM_t("草稿");

    return '[$draftShowText] ';
  }

  @override
  Widget tuiBuild(BuildContext context, TUIKitBuildValue value) {
    final TUITheme theme = value.theme;
    return Row(children: [
      Text(_getDraftShowText(), style: TextStyle(color: theme.cautionColor)),
      Expanded(
          child: Text(
        draftText,
        softWrap: true,
        overflow: TextOverflow.ellipsis,
        style: TextStyle(height: 1.5, color: theme.weakTextColor, fontSize: 14),
      )),
    ]);
  }
}
文件：/im-flutter-uikit/package_src/tim_ui_kit/lib/ui/views/TIMUIKitConversation/tim_uikit_conversation_item.dart
// ignore_for_file: avoid_print, empty_catches

import 'package:flutter/material.dart';
import 'package:tencent_im_base/tencent_im_base.dart';
import 'package:tim_ui_kit/base_widgets/tim_ui_kit_statelesswidget.dart';
import 'package:tim_ui_kit/ui/utils/color.dart';
import 'package:tim_ui_kit/ui/utils/time_ago.dart';
import 'package:tim_ui_kit/ui/utils/tui_theme.dart';
import 'package:tim_ui_kit/ui/views/TIMUIKitConversation/tim_uikit_conversation_draft_text.dart';
import 'package:tim_ui_kit/ui/views/TIMUIKitConversation/tim_uikit_conversation_last_msg.dart';
import 'package:tim_ui_kit/ui/widgets/avatar.dart';
import 'package:tim_ui_kit/ui/widgets/unread_message.dart';
import 'package:tim_ui_kit/base_widgets/tim_ui_kit_base.dart';

typedef LastMessageBuilder = Widget Function(
    V2TimMessage? lastMsg, List<V2TimGroupAtInfo?> groupAtInfoList);

class TIMUIKitConversationItem extends TIMUIKitStatelessWidget {
  final String faceUrl;
  final String nickName;
  final V2TimMessage? lastMsg;
  final int unreadCount;
  final bool isPined;
  final List<V2TimGroupAtInfo?> groupAtInfoList;
  final String? draftText;
  final int? draftTimestamp;
  final bool isDisturb;
  final LastMessageBuilder? lastMessageBuilder;

  TIMUIKitConversationItem(
      {Key? key,
      required this.faceUrl,
      required this.nickName,
      required this.lastMsg,
      required this.isPined,
      required this.unreadCount,
      required this.groupAtInfoList,
      required this.isDisturb,
      this.draftText,
      this.draftTimestamp,
      this.lastMessageBuilder})
      : super(key: key);

  Widget _getShowMsgWidget(BuildContext context) {
    if (draftText != null && draftText != "") {
      return TIMUIKitDraftText(
        context: context,
        draftText: draftText ?? "",
      );
    } else if (lastMsg != null) {
      if (lastMessageBuilder != null) {
        return lastMessageBuilder!(lastMsg, groupAtInfoList);
      }
      return TIMUIKitLastMsg(
        groupAtInfoList: groupAtInfoList,
        lastMsg: lastMsg,
        context: context,
      );
    }

    return Container(
      height: 14,
    );
  }

  Widget _getTimeStringForChatWidget(BuildContext context, TUITheme theme) {
    try {
      if (draftTimestamp != null && draftTimestamp != 0) {
        return Text(TimeAgo().getTimeStringForChat(draftTimestamp as int),
            style: TextStyle(
              fontSize: 12,
              color: theme.weakTextColor,
            ));
      } else if (lastMsg != null) {
        return Text(TimeAgo().getTimeStringForChat(lastMsg!.timestamp as int),
            style: TextStyle(
              fontSize: 12,
              color: theme.weakTextColor,
            ));
      }
    } catch (err) {}

    return Container();
  }

  @override
  Widget tuiBuild(BuildContext context, TUIKitBuildValue value) {
    final TUITheme theme = value.theme;
    return Container(
      padding: const EdgeInsets.only(top: 6, bottom: 6, left: 16, right: 16),
      decoration: BoxDecoration(
          color: isPined ? theme.weakBackgroundColor : Colors.white,
          border: Border(
              bottom: BorderSide(
                  color: theme.weakDividerColor ?? CommonColor.weakDividerColor,
                  width: 1))),
      child: Row(
        crossAxisAlignment: CrossAxisAlignment.center,
        children: [
          Container(
            padding: const EdgeInsets.only(top: 0, bottom: 2, right: 0),
            child: SizedBox(
              width: 44,
              height: 44,
              child: Stack(
                fit: StackFit.expand,
                clipBehavior: Clip.none,
                children: [
                  Avatar(faceUrl: faceUrl, showName: nickName),
                  if (unreadCount != 0)
                    Positioned(
                      top: isDisturb ? -2.5 : -4.5,
                      right: isDisturb ? -2.5 : -4.5,
                      child: UnconstrainedBox(
                        child: UnreadMessage(
                            width: isDisturb ? 10 : 22,
                            height: isDisturb ? 10 : 22,
                            unreadCount: isDisturb ? 0 : unreadCount),
                      ),
                    )
                ],
              ),
            ),
          ),
          Expanded(
              child: Container(
            height: 60,
            margin: const EdgeInsets.only(left: 12),
            padding: const EdgeInsets.only(top: 0, bottom: 0),
            child: Column(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                Row(
                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                  children: [
                    Expanded(
                        child: Text(
                      nickName,
                      softWrap: true,
                      textAlign: TextAlign.left,
                      overflow: TextOverflow.ellipsis,
                      maxLines: 1,
                      style: const TextStyle(
                          height: 1,
                          color: Colors.black,
                          fontSize: 18,
                          fontWeight: FontWeight.w400),
                    )),
                    _getTimeStringForChatWidget(context, theme),
                  ],
                ),
                Row(
                  children: [
                    Expanded(child: _getShowMsgWidget(context)),
                    if (isDisturb)
                      SizedBox(
                        width: 18,
                        height: 18,
                        child: Icon(
                          Icons.notifications_off,
                          color: theme.weakTextColor,
                          size: 16.0,
                        ),
                      )
                  ],
                ),
              ],
            ),
          ))
        ],
      ),
    );
  }
}
文件：/im-flutter-uikit/package_src/tim_ui_kit/lib/ui/views/TIMUIKitConversation/tim_uikit_conversation_last_msg.dart
// ignore_for_file: unrelated_type_equality_checks

import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:tim_ui_kit/base_widgets/tim_ui_kit_statelesswidget.dart';
import 'package:tim_ui_kit/business_logic/view_models/tui_theme_view_model.dart';

import 'package:tim_ui_kit/ui/utils/message.dart';
import 'package:tim_ui_kit/ui/utils/tui_theme.dart';
import 'package:tim_ui_kit/ui/views/TIMUIKitChat/TIMUIKitMessageItem/tim_uikit_chat_custom_elem.dart';
import 'package:tim_ui_kit/base_widgets/tim_ui_kit_base.dart';
import 'package:tencent_im_base/tencent_im_base.dart';

class TIMUIKitLastMsg extends TIMUIKitStatelessWidget {
  final V2TimMessage? lastMsg;
  final List<V2TimGroupAtInfo?> groupAtInfoList;
  final BuildContext context;
  TIMUIKitLastMsg(
      {Key? key,
      this.lastMsg,
      required this.groupAtInfoList,
      required this.context})
      : super(key: key);

  String _getMsgElem() {
    final isRevokedMessage = lastMsg!.status == 6;
    if (isRevokedMessage) {
      final isSelf = lastMsg!.isSelf ?? false;
      final option1 =
          isSelf ? TIM_t("您") : lastMsg!.nickName ?? lastMsg?.sender;
      return TIM_t_para("{{option1}}撤回了一条消息", "$option1撤回了一条消息")(
          option1: option1);
    }
    return _getLastMsgShowText(lastMsg, context);
  }

  static String handleCustomMessage(V2TimMessage message) {
    final customElem = message.customElem;
    final callingMessage = TIMUIKitCustomElem.getCallMessage(customElem);
    String callingLastMsgShow = TIM_t("自定义");
    if (callingMessage != null) {
      // 如果是结束消息
      final isCallEnd = TIMUIKitCustomElem.isCallEndExist(callingMessage);

      final isVoiceCall = callingMessage.callType == 1;

      String? callTime = "";

      if (isCallEnd) {
        callTime = TIMUIKitCustomElem.getShowTime(callingMessage.callEnd!);
      }

      final option3 = callTime;
      callingLastMsgShow = isCallEnd
          ? TIM_t_para("通话时间：{{option1}}", "通话时间：$option3")(option1: option3)
          : TIMUIKitCustomElem.getActionType(callingMessage.actionType!);

      final option1 = callingLastMsgShow;
      final option2 = callingLastMsgShow;
      callingLastMsgShow = isVoiceCall
          ? TIM_t_para("[语音通话]：{{option1}}", "[语音通话]：$option1")(
              option1: option1)
          : TIM_t_para("[视频通话]：{{option2}}", "[视频通话]：$option2")(
              option2: option2);
    }
    return callingLastMsgShow;
  }

  String _getLastMsgShowText(V2TimMessage? message, BuildContext context) {
    final msgType = message!.elemType;
    switch (msgType) {
      case MessageElemType.V2TIM_ELEM_TYPE_CUSTOM:
        return handleCustomMessage(message);
      // TIM_t("[自定义]");
      case MessageElemType.V2TIM_ELEM_TYPE_SOUND:
        return TIM_t("[语音]");
      case MessageElemType.V2TIM_ELEM_TYPE_TEXT:
        return lastMsg!.textElem!.text as String;
      case MessageElemType.V2TIM_ELEM_TYPE_FACE:
        return TIM_t("[表情]");
      case MessageElemType.V2TIM_ELEM_TYPE_FILE:
        final option1 = lastMsg!.fileElem!.fileName;
        return TIM_t_para("[文件] {{option1}}", "[文件] $option1")(
            option1: option1);
      case MessageElemType.V2TIM_ELEM_TYPE_GROUP_TIPS:
        return MessageUtils.groupTipsMessageAbstract(lastMsg!.groupTipsElem!);
      case MessageElemType.V2TIM_ELEM_TYPE_IMAGE:
        return TIM_t("[图片]");
      case MessageElemType.V2TIM_ELEM_TYPE_VIDEO:
        return TIM_t("[视频]");
      case MessageElemType.V2TIM_ELEM_TYPE_LOCATION:
        return TIM_t("[位置]");
      case MessageElemType.V2TIM_ELEM_TYPE_MERGER:
        return TIM_t("[聊天记录]");
      default:
        return TIM_t("未知消息");
    }
  }

  Icon? _getIconByMsgStatus(BuildContext context) {
    final msgStatus = lastMsg!.status;
    final theme = Provider.of<TUIThemeViewModel>(context).theme;
    if (msgStatus == MessageStatus.V2TIM_MSG_STATUS_SEND_FAIL) {
      return Icon(Icons.error, color: theme.cautionColor, size: 16);
    }
    if (msgStatus == MessageStatus.V2TIM_MSG_STATUS_SENDING) {
      return Icon(Icons.arrow_back, color: theme.weakTextColor, size: 16);
    }
    return null;
  }

  String _getAtMessage() {
    String msg = "";
    for (var item in groupAtInfoList) {
      if (item!.atType == 1) {
        msg = TIM_t("[有人@我] ");
      } else {
        msg = TIM_t("[@所有人] ");
      }
    }
    return msg;
  }

  @override
  Widget tuiBuild(BuildContext context, TUIKitBuildValue value) {
    final TUITheme theme = value.theme;
    final icon = _getIconByMsgStatus(context);
    return Row(children: [
      if (icon != null)
        Container(
          margin: const EdgeInsets.only(right: 2),
          child: icon,
        ),
      if (groupAtInfoList.isNotEmpty)
        Text(_getAtMessage(),
            style: TextStyle(color: theme.cautionColor, fontSize: 14)),
      Expanded(
          child: Text(
        _getMsgElem(),
        softWrap: true,
        overflow: TextOverflow.ellipsis,
        style: TextStyle(height: 1.5, color: theme.weakTextColor, fontSize: 14),
      )),
    ]);
  }
}
文件：/im-flutter-uikit/package_src/tim_ui_kit/lib/ui/views/TIMUIKitGroup/tim_uikit_group.dart
import 'package:azlistview/azlistview.dart';
import 'package:flutter/material.dart';
import 'package:lpinyin/lpinyin.dart';
import 'package:provider/provider.dart';
import 'package:tencent_im_base/tencent_im_base.dart';
import 'package:tim_ui_kit/base_widgets/tim_ui_kit_state.dart';
import 'package:tim_ui_kit/business_logic/view_models/tui_group_view_model.dart';
import 'package:tim_ui_kit/business_logic/view_models/tui_theme_view_model.dart';
import 'package:tim_ui_kit/data_services/services_locatar.dart';
import 'package:tim_ui_kit/ui/utils/color.dart';
import 'package:tim_ui_kit/ui/widgets/avatar.dart';
import 'package:tim_ui_kit/ui/widgets/az_list_view.dart';
import 'package:tim_ui_kit/base_widgets/tim_ui_kit_base.dart';

typedef GroupItemBuilder = Widget Function(
    BuildContext context, V2TimGroupInfo groupInfo);

class TIMUIKitGroup extends StatefulWidget {
  final void Function(V2TimGroupInfo groupInfo)? onTapItem;
  final Widget Function(BuildContext context)? emptyBuilder;
  final GroupItemBuilder? itemBuilder;

  /// the filter for group conversation
  final bool Function(V2TimGroupInfo? groupInfo)? groupCollector;

  const TIMUIKitGroup(
      {Key? key,
      this.onTapItem,
      this.emptyBuilder,
      this.itemBuilder,
      this.groupCollector})
      : super(key: key);

  @override
  State<StatefulWidget> createState() => _TIMUIKitGroupState();
}

class _TIMUIKitGroupState extends TIMUIKitState<TIMUIKitGroup> {
  final TUIGroupViewModel _groupViewModel = TUIGroupViewModel();

  List<ISuspensionBeanImpl<V2TimGroupInfo>> _getShowList(
      List<V2TimGroupInfo> groupList) {
    final List<ISuspensionBeanImpl<V2TimGroupInfo>> showList =
        List.empty(growable: true);
    for (var i = 0; i < groupList.length; i++) {
      final item = groupList[i];

      final showName = item.groupName ?? item.groupID;
      String pinyin = PinyinHelper.getPinyinE(showName);
      String tag = pinyin.substring(0, 1).toUpperCase();
      if (RegExp("[A-Z]").hasMatch(tag)) {
        showList.add(ISuspensionBeanImpl(memberInfo: item, tagIndex: tag));
      } else {
        showList.add(ISuspensionBeanImpl(memberInfo: item, tagIndex: "#"));
      }
    }

    SuspensionUtil.sortListBySuspensionTag(showList);

    return showList;
  }

  Widget _itemBuilder(BuildContext context, V2TimGroupInfo groupInfo) {
    final theme = Provider.of<TUIThemeViewModel>(context).theme;
    final showName = groupInfo.groupName ?? groupInfo.groupID;
    final faceUrl = groupInfo.faceUrl ?? "";
    return Container(
      padding: const EdgeInsets.only(top: 10, left: 16),
      child: InkWell(
        onTap: (() {
          if (widget.onTapItem != null) {
            widget.onTapItem!(groupInfo);
          }
        }),
        child: Row(
          children: [
            Container(
              padding: const EdgeInsets.only(bottom: 12),
              margin: const EdgeInsets.only(right: 12),
              child: SizedBox(
                height: 40,
                width: 40,
                child: Avatar(faceUrl: faceUrl, showName: showName),
              ),
            ),
            Expanded(
                child: Container(
              alignment: Alignment.centerLeft,
              padding: const EdgeInsets.only(top: 10, bottom: 20),
              decoration: BoxDecoration(
                  border: Border(
                      bottom: BorderSide(
                          color: theme.weakDividerColor ??
                              CommonColor.weakDividerColor))),
              child: Text(
                showName,
                style: const TextStyle(color: Colors.black, fontSize: 18),
              ),
            ))
          ],
        ),
      ),
    );
  }

  GroupItemBuilder _getItemBuilder() {
    return widget.itemBuilder ?? _itemBuilder;
  }

  @override
  void initState() {
    super.initState();
    _groupViewModel.loadData();
  }

  @override
  Widget tuiBuild(BuildContext context, TUIKitBuildValue value) {
    return MultiProvider(
      providers: [
        ChangeNotifierProvider.value(value: _groupViewModel),
        ChangeNotifierProvider.value(
            value: serviceLocator<TUIThemeViewModel>()),
      ],
      builder: (BuildContext context, Widget? w) {
        List<V2TimGroupInfo> groupList =
            Provider.of<TUIGroupViewModel>(context).groupList;
        if (widget.groupCollector != null) {
          groupList = groupList.where(widget.groupCollector!).toList();
        }
        if (groupList.isNotEmpty) {
          final showList = _getShowList(groupList);
          return AZListViewContainer(
              isShowIndexBar: false,
              memberList: showList,
              itemBuilder: (context, index) {
                final groupInfo = showList[index].memberInfo;
                final itemBuilder = _getItemBuilder();
                return itemBuilder(context, groupInfo);
              });
        }

        if (widget.emptyBuilder != null) {
          return widget.emptyBuilder!(context);
        }

        return Container();
      },
    );
  }
}
文件：/im-flutter-uikit/package_src/tim_ui_kit/lib/ui/views/TIMUIKitGroup/tim_uikit_group_application_list.dart
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:tim_ui_kit/base_widgets/tim_ui_kit_state.dart';
import 'package:tim_ui_kit/business_logic/view_models/tui_chat_view_model.dart';

import 'package:tim_ui_kit/business_logic/view_models/tui_theme_view_model.dart';
import 'package:tim_ui_kit/data_services/group/group_services.dart';
import 'package:tim_ui_kit/data_services/services_locatar.dart';
import 'package:tim_ui_kit/ui/utils/color.dart';
import 'package:tim_ui_kit/ui/utils/tui_theme.dart';
import 'package:tim_ui_kit/ui/widgets/avatar.dart';

import 'package:tim_ui_kit/base_widgets/tim_ui_kit_base.dart';
import 'package:tencent_im_base/tencent_im_base.dart';

typedef GroupApplicationItemBuilder = Widget Function(
    BuildContext context, V2TimGroupApplication applicationInfo, int index);

enum ApplicationStatus {
  none,
  accept,
  reject,
}

class TIMUIKitGroupApplicationList extends StatefulWidget {
  /// the builder for the request item
  final GroupApplicationItemBuilder? itemBuilder;

  /// group ID
  final String groupID;

  const TIMUIKitGroupApplicationList(
      {Key? key, this.itemBuilder, required this.groupID})
      : super(key: key);

  @override
  State<StatefulWidget> createState() => TIMUIKitGroupApplicationListState();
}

class TIMUIKitGroupApplicationListState
    extends TIMUIKitState<TIMUIKitGroupApplicationList> {
  final TUIChatViewModel model = serviceLocator<TUIChatViewModel>();
  final GroupServices _groupServices = serviceLocator<GroupServices>();
  List<V2TimGroupApplication> groupApplicationList = [];
  List<ApplicationStatus> applicationStatusList = [];

  @override
  void initState() {
    super.initState();
    groupApplicationList = model.groupApplicationList
        .where((item) => (item.groupID == widget.groupID))
        .toList();
    applicationStatusList =
        groupApplicationList.map((item) => ApplicationStatus.none).toList();
  }

  GroupApplicationItemBuilder _getItemBuilder() {
    return widget.itemBuilder ?? _defaultItemBuilder;
  }

  Widget _defaultItemBuilder(
      BuildContext context, V2TimGroupApplication applicationInfo, int index) {
    final theme = Provider.of<TUIThemeViewModel>(context).theme;
    final ApplicationStatus currentStatus = applicationStatusList[index];

    String _getUserName() {
      if (applicationInfo.fromUserNickName != null &&
          applicationInfo.fromUserNickName!.isNotEmpty &&
          applicationInfo.fromUserNickName != applicationInfo.fromUser) {
        return "${applicationInfo.fromUserNickName} (${applicationInfo.fromUser})";
      } else {
        return "${applicationInfo.fromUser}";
      }
    }

    String _getRequestMessage() {
      String option2 = applicationInfo.requestMsg!;
      return TIM_t_para("验证消息: {{option2}}", "验证消息: $option2")(
          option2: option2);
    }

    return Container(
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: Colors.white,
        border: Border(
            bottom: BorderSide(
                color: theme.weakDividerColor ?? const Color(0xFFDBDBDB))),
      ),
      child: Row(
        crossAxisAlignment: CrossAxisAlignment.center,
        children: [
          Container(
            margin: const EdgeInsets.only(right: 12),
            child: SizedBox(
              height: 40,
              width: 40,
              child: Avatar(
                  faceUrl: applicationInfo.fromUserFaceUrl ?? "",
                  showName: applicationInfo.fromUserNickName ??
                      applicationInfo.fromUser ??
                      ""),
            ),
          ),
          Expanded(
              child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text(
                _getUserName(),
                style: TextStyle(
                    fontSize: 16,
                    fontWeight: FontWeight.w600,
                    color: theme.darkTextColor),
              ),
              Text(
                _getRequestMessage(),
                style: TextStyle(fontSize: 15, color: theme.weakTextColor),
              ),
            ],
          )),
          if (currentStatus == ApplicationStatus.none &&
              applicationInfo.handleStatus == 0)
            Container(
              margin: const EdgeInsets.only(left: 8, right: 8),
              child: InkWell(
                  child: Container(
                    padding:
                        const EdgeInsets.symmetric(horizontal: 10, vertical: 4),
                    decoration: BoxDecoration(
                        borderRadius: BorderRadius.circular(4),
                        color: theme.primaryColor,
                        border: Border.all(
                            width: 1,
                            color: theme.weakTextColor ??
                                CommonColor.weakTextColor)),
                    child: Text(
                      TIM_t("同意"), // agree
                      style: const TextStyle(
                        color: Colors.white,
                      ),
                    ),
                  ),
                  onTap: () async {
                    final res = await _groupServices.acceptGroupApplication(
                      groupID: applicationInfo.groupID,
                      fromUser: applicationInfo.fromUser!,
                      toUser: applicationInfo.toUser!,
                      type: applicationInfo.type,
                      addTime: applicationInfo.addTime ?? 0,
                    );
                    if (res.code == 0) {
                      setState(() {
                        applicationStatusList[index] = ApplicationStatus.accept;
                      });
                      Future.delayed(const Duration(seconds: 1), () {
                        model.refreshGroupApplicationList();
                      });
                    }
                  }),
            ),
          if (currentStatus == ApplicationStatus.none &&
              applicationInfo.handleStatus == 0)
            InkWell(
              child: Container(
                decoration: BoxDecoration(
                    borderRadius: BorderRadius.circular(4),
                    color: Colors.white,
                    border: Border.all(
                        width: 1,
                        color:
                            theme.weakTextColor ?? CommonColor.weakTextColor)),
                padding:
                    const EdgeInsets.symmetric(horizontal: 10, vertical: 4),
                child: Text(
                  TIM_t("拒绝"), // reject
                  style: TextStyle(
                    color: theme.primaryColor,
                  ),
                ),
              ),
              onTap: () async {
                final res = await _groupServices.refuseGroupApplication(
                    addTime: applicationInfo.addTime!,
                    groupID: applicationInfo.groupID,
                    fromUser: applicationInfo.fromUser!,
                    toUser: applicationInfo.toUser!,
                    type:
                        GroupApplicationTypeEnum.values[applicationInfo.type]);
                if (res.code == 0) {
                  setState(() {
                    applicationStatusList[index] = ApplicationStatus.reject;
                  });
                  Future.delayed(const Duration(seconds: 1), () {
                    model.refreshGroupApplicationList();
                  });
                }
              },
            ),
          if (currentStatus == ApplicationStatus.accept ||
              applicationInfo.handleStatus == 1)
            Container(
              margin: const EdgeInsets.only(left: 8),
              child: Text(
                TIM_t("已同意"),
                style: TextStyle(fontSize: 15, color: theme.weakTextColor),
              ),
            ),
          if (currentStatus == ApplicationStatus.reject ||
              applicationInfo.handleStatus == 2)
            Container(
              margin: const EdgeInsets.only(left: 8),
              child: Text(
                TIM_t("已拒绝"),
                style: TextStyle(fontSize: 15, color: theme.weakTextColor),
              ),
            )
        ],
      ),
    );
  }

  @override
  Widget tuiBuild(BuildContext context, TUIKitBuildValue value) {
    final TUITheme theme = value.theme;

    return MultiProvider(
      providers: [ChangeNotifierProvider.value(value: model)],
      builder: (context, w) {
        return Container(
          decoration: BoxDecoration(color: theme.weakBackgroundColor),
          child: ListView.builder(
            itemCount: groupApplicationList.length,
            itemBuilder: (context, index) {
              final applicationInfo = groupApplicationList[index];
              final itemBuilder = _getItemBuilder();
              return itemBuilder(context, applicationInfo, index);
            },
          ),
        );
      },
    );
  }
}
文件：/im-flutter-uikit/package_src/tim_ui_kit/lib/ui/views/TIMUIKitGroup/tim_uikit_group_application_list_item.dart
import 'package:flutter/material.dart';
import 'package:tencent_im_base/tencent_im_base.dart';
import 'package:tim_ui_kit/base_widgets/tim_ui_kit_state.dart';
import 'package:tim_ui_kit/ui/utils/tui_theme.dart';
import 'package:tim_ui_kit/ui/widgets/avatar.dart';
import 'package:tim_ui_kit/base_widgets/tim_ui_kit_base.dart';

enum ApplicationStatus {
  none,
  accept,
  refuse,
}

class TIMUIKitGroupApplicationListItem extends StatefulWidget {
  final V2TimGroupApplication applicationInfo;

  const TIMUIKitGroupApplicationListItem(
      {Key? key, required this.applicationInfo})
      : super(key: key);

  @override
  State<StatefulWidget> createState() =>
      TIMUIKitGroupApplicationListItemState();
}

class TIMUIKitGroupApplicationListItemState
    extends TIMUIKitState<TIMUIKitGroupApplicationListItem> {
  ApplicationStatus applicationStatus = ApplicationStatus.none;

  @override
  void initState() {
    super.initState();
  }

  String _getUserName() {
    if (widget.applicationInfo.fromUserNickName != null &&
        widget.applicationInfo.fromUserNickName!.isNotEmpty &&
        widget.applicationInfo.fromUserNickName !=
            widget.applicationInfo.fromUser) {
      return "${widget.applicationInfo.fromUserNickName} (${widget.applicationInfo.fromUser})";
    } else {
      return "${widget.applicationInfo.fromUser}";
    }
  }

  @override
  Widget tuiBuild(BuildContext context, TUIKitBuildValue value) {
    final TUITheme theme = value.theme;
    return Container(
      padding: const EdgeInsets.all(16),
      decoration: const BoxDecoration(color: Colors.white),
      child: Row(
        crossAxisAlignment: CrossAxisAlignment.center,
        children: [
          Container(
            margin: const EdgeInsets.only(right: 12),
            child: SizedBox(
              height: 40,
              width: 40,
              child: Avatar(
                  faceUrl: widget.applicationInfo.fromUserFaceUrl ?? "",
                  showName: widget.applicationInfo.fromUserNickName ??
                      widget.applicationInfo.fromUser ??
                      ""),
            ),
          ),
          Column(
            children: [
              Text(
                _getUserName(),
                style: TextStyle(
                    fontSize: 16,
                    fontWeight: FontWeight.w600,
                    color: theme.darkTextColor),
              ),
              Text(
                _getUserName(),
                style: TextStyle(
                    fontSize: 16,
                    fontWeight: FontWeight.w600,
                    color: theme.darkTextColor),
              ),
            ],
          )
        ],
      ),
    );
  }
}
文件：/im-flutter-uikit/package_src/tim_ui_kit/lib/ui/views/TIMUIKitGroupProfile/group_profile_widget.dart
import 'package:flutter/cupertino.dart';
import 'package:tencent_im_base/tencent_im_base.dart';

enum GroupProfileWidgetEnum {
  /// The detail card for group.
  detailCard,

  /// The tile shows the members in the group.
  memberListTile,

  /// The entrance to the page editing the group notice.
  groupNotice,

  /// The entrance to the page managing the group.
  /// Works only for group owner and group admin.
  groupManage,

  /// The entrance to the search page with conversation ID.
  searchMessage,

  /// The divider between sets of profile widget.
  operationDivider,

  /// Shows the group type,
  /// includes "work group", "public group", "meeting group" and "AVChatRoom".
  groupTypeBar,

  /// Shows and modify the mode or options users add the group.
  /// Includes "disallow group joining", "automatic approval" and "admin approval".
  groupJoiningModeBar,

  /// Shows and modify the nickname for user in a specific group,
  /// only shows and used in this group, as the name card here.
  nameCardBar,

  /// The switch of if mute the message notification from a specific group
  muteGroupMessageBar,

  /// The switch of if pin this group to the top in conversation list.
  pinedConversationBar,

  /// The button area, includes
  /// "clear chat history", "transfer group owner", "disband group" and "quit group"
  /// as default.
  buttonArea,

  /// Custom area, you may define anything you want here.
  customBuilderOne,

  /// Custom area, you may define anything you want here.
  customBuilderTwo,

  /// Custom area, you may define anything you want here.
  customBuilderThree,

  /// Custom area, you may define anything you want here.
  customBuilderFour,

  /// Custom area, you may define anything you want here.
  customBuilderFive
}

class GroupProfileWidgetBuilder {
  /// The detail card for group.
  Widget Function(V2TimGroupInfo groupInfo,
      Function(String updateGroupName)? updateGroupName)? detailCard;

  /// The tile shows the members in the group.
  Widget Function(List<V2TimGroupMemberFullInfo?> memberList)? memberListTile;

  /// The entrance to the page editing the group notice.
  Widget Function(String currentNotice, Function() toDefaultNoticeEditPage,
      Function(String newNotice) setGroupNotice)? groupNotice;

  /// The entrance to the page managing the group.
  /// Works only for group owner and group admin.
  Widget Function(Function() toDefaultGroupManagementPage)? groupManage;

  /// The entrance to the search page with conversation ID.
  Widget Function()? searchMessage;

  /// The divider between sets of profile widget.
  Widget Function()? operationDivider;

  /// Shows the group type,
  /// includes "work group", "public group", "meeting group" and "AVChatRoom".
  Widget Function(String groupType)? groupTypeBar;

  /// Shows and modify the mode or options users add the group.
  /// Includes "0: disallow group joining", "1: admin approval" and "2: automatic approval".
  Widget Function(int groupAddOptType, Function(int addOpt) handleActionTap)?
      groupJoiningModeBar;

  /// Shows and modify the nickname for user in a specific group,
  /// only shows and used in this group, as the name card here.
  Widget Function(String nameCard, Function(String newName) setNameCard)?
      nameCardBar;

  /// The switch of if mute the message notification from a specific group.
  Widget Function(bool isMute, Function(bool isMute) setMute)?
      muteGroupMessageBar;

  /// The switch of if pin this group to the top in conversation list.
  Widget Function(bool isPined, Function(bool isMute) pinedConversation)?
      pinedConversationBar;

  /// The button area, includes
  /// "clear chat history", "transfer group owner", "disband group" and "quit group"
  /// as default.
  Widget Function(V2TimGroupInfo groupInfo,
      List<V2TimGroupMemberFullInfo?> groupMemberList)? buttonArea;

  /// Custom area, you may define anything you want here.
  Widget Function(V2TimGroupInfo groupInfo,
      List<V2TimGroupMemberFullInfo?> groupMemberList)? customBuilderOne;

  /// Custom area, you may define anything you want here.
  Widget Function(V2TimGroupInfo groupInfo,
      List<V2TimGroupMemberFullInfo?> groupMemberList)? customBuilderTwo;

  /// Custom area, you may define anything you want here.
  Widget Function(V2TimGroupInfo groupInfo,
      List<V2TimGroupMemberFullInfo?> groupMemberList)? customBuilderThree;

  /// Custom area, you may define anything you want here.
  Widget Function(V2TimGroupInfo groupInfo,
      List<V2TimGroupMemberFullInfo?> groupMemberList)? customBuilderFour;

  /// Custom area, you may define anything you want here.
  Widget Function(V2TimGroupInfo groupInfo,
      List<V2TimGroupMemberFullInfo?> groupMemberList)? customBuilderFive;

  GroupProfileWidgetBuilder(
      {this.detailCard,
      this.memberListTile,
      this.groupNotice,
      this.groupManage,
      this.searchMessage,
      this.operationDivider,
      this.groupTypeBar,
      this.groupJoiningModeBar,
      this.nameCardBar,
      this.muteGroupMessageBar,
      this.pinedConversationBar,
      this.buttonArea,
      this.customBuilderOne,
      this.customBuilderTwo,
      this.customBuilderThree,
      this.customBuilderFour,
      this.customBuilderFive});
}
文件：/im-flutter-uikit/package_src/tim_ui_kit/lib/ui/views/TIMUIKitGroupProfile/shared_data_widget.dart
import 'package:flutter/cupertino.dart';
import 'package:tim_ui_kit/business_logic/view_models/tui_group_profile_view_model.dart';

class SharedDataWidget extends InheritedWidget {
  final TUIGroupProfileViewModel model;

  const SharedDataWidget({Key? key, required Widget child, required this.model})
      : super(key: key, child: child);

  // Define a method to get the shared data from sub-tree
  static SharedDataWidget? of(BuildContext context) {
    return context.dependOnInheritedWidgetOfExactType<SharedDataWidget>();
  }

  @override
  bool updateShouldNotify(covariant SharedDataWidget oldWidget) {
    return oldWidget.model != model;
  }
}
文件：/im-flutter-uikit/package_src/tim_ui_kit/lib/ui/views/TIMUIKitGroupProfile/tim_uikit_group_member_list.dart
// ignore_for_file: must_be_immutable

import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:tim_ui_kit/base_widgets/tim_ui_kit_state.dart';
import 'package:tim_ui_kit/business_logic/view_models/tui_group_profile_view_model.dart';
import 'package:tim_ui_kit/tim_ui_kit.dart';
import 'package:tim_ui_kit/ui/utils/color.dart';
import 'package:tim_ui_kit/ui/views/TIMUIKitGroupProfile/widgets/tim_ui_group_member_search.dart';
import 'package:tim_ui_kit/ui/widgets/group_member_list.dart';

import 'package:tim_ui_kit/base_widgets/tim_ui_kit_base.dart';

class GroupProfileMemberListPage extends StatefulWidget {
  List<V2TimGroupMemberFullInfo?> memberList;
  TUIGroupProfileViewModel model;
  GroupProfileMemberListPage({
    Key? key,
    required this.memberList,
    required this.model,
  }) : super(key: key);
  @override
  State<StatefulWidget> createState() => GroupProfileMemberListPageState();
}

class GroupProfileMemberListPageState
    extends TIMUIKitState<GroupProfileMemberListPage> {
  List<V2TimGroupMemberFullInfo?>? searchMemberList;
  String? searchText;

  _kickedOffMember(String userID) async {
    widget.model.kickOffMember([userID]);
  }

  bool isSearchTextExist(String? searchText) {
    return searchText != null && searchText != "";
  }

  handleSearchGroupMembers(String searchText, context) async {
    searchText = searchText;
    List<V2TimGroupMemberFullInfo?> currentGroupMember =
        Provider.of<TUIGroupProfileViewModel>(context, listen: false)
                .groupMemberList ??
            [];
    final res =
        await widget.model.searchGroupMember(V2TimGroupMemberSearchParam(
      keywordList: [searchText],
      groupIDList: [widget.model.groupInfo!.groupID],
    ));

    if (res.code == 0) {
      List<V2TimGroupMemberFullInfo?> list = [];
      final searchResult = res.data!.groupMemberSearchResultItems!;
      searchResult.forEach((key, value) {
        if (value is List) {
          for (V2TimGroupMemberFullInfo item in value) {
            list.add(item);
          }
        }
      });

      currentGroupMember = list;
    } else {
      currentGroupMember = [];
    }
    setState(() {
      searchMemberList =
          isSearchTextExist(searchText) ? currentGroupMember : null;
    });
  }

  @override
  Widget tuiBuild(BuildContext context, TUIKitBuildValue value) {
    final TUITheme theme = value.theme;

    String option1 = widget.model.groupInfo?.memberCount.toString() ??
        widget.memberList.length.toString();
    return Scaffold(
        appBar: AppBar(
            title: Text(
              TIM_t_para("群成员({{option1}}人)", "群成员($option1人)")(
                  option1: option1),
              style: const TextStyle(color: Colors.white, fontSize: 17),
            ),
            shadowColor: theme.weakBackgroundColor,
            flexibleSpace: Container(
              decoration: BoxDecoration(
                gradient: LinearGradient(colors: [
                  theme.lightPrimaryColor ?? CommonColor.lightPrimaryColor,
                  theme.primaryColor ?? CommonColor.primaryColor
                ]),
              ),
            ),
            iconTheme: const IconThemeData(
              color: Colors.white,
            )),
        body: ChangeNotifierProvider.value(
            value: widget.model,
            child: Consumer<TUIGroupProfileViewModel>(
                builder: ((context, value, child) {
              return GroupProfileMemberList(
                customTopArea: GroupMemberSearchTextField(
                  onTextChange: (text) =>
                      handleSearchGroupMembers(text, context),
                ),
                memberList: searchMemberList ?? value.groupMemberList ?? [],
                removeMember: _kickedOffMember,
                touchBottomCallBack: () {
                  widget.model
                      .loadMoreData(groupID: widget.model.groupInfo!.groupID);
                },
              );
            }))));
  }
}

class DeleteGroupMemberPage extends StatefulWidget {
  final TUIGroupProfileViewModel model;

  const DeleteGroupMemberPage({Key? key, required this.model})
      : super(key: key);

  @override
  State<StatefulWidget> createState() => _DeleteGroupMemberPageState();
}

class _DeleteGroupMemberPageState extends TIMUIKitState<DeleteGroupMemberPage> {
  List<V2TimGroupMemberFullInfo> selectedGroupMember = [];
  List<V2TimGroupMemberFullInfo?>? searchMemberList;

  bool isSearchTextExist(String? searchText) {
    return searchText != null && searchText != "";
  }

  handleSearchGroupMembers(String searchText, context) async {
    searchText = searchText;
    List<V2TimGroupMemberFullInfo?> currentGroupMember =
        Provider.of<TUIGroupProfileViewModel>(context, listen: false)
                .groupMemberList ??
            [];
    final res =
        await widget.model.searchGroupMember(V2TimGroupMemberSearchParam(
      keywordList: [searchText],
      groupIDList: [widget.model.groupInfo!.groupID],
    ));

    if (res.code == 0) {
      List<V2TimGroupMemberFullInfo?> list = [];
      final searchResult = res.data!.groupMemberSearchResultItems!;
      searchResult.forEach((key, value) {
        if (value is List) {
          for (V2TimGroupMemberFullInfo item in value) {
            list.add(item);
          }
        }
      });

      currentGroupMember = list;
    } else {
      currentGroupMember = [];
    }
    setState(() {
      searchMemberList =
          isSearchTextExist(searchText) ? currentGroupMember : null;
    });
  }

  handleRole(groupMemberList) {
    return groupMemberList
            ?.where((value) =>
                value?.role ==
                GroupMemberRoleType.V2TIM_GROUP_MEMBER_ROLE_MEMBER)
            .toList() ??
        [];
  }

  @override
  Widget tuiBuild(BuildContext context, TUIKitBuildValue value) {
    final TUITheme theme = value.theme;

    return Scaffold(
        appBar: AppBar(
            title: Text(
              TIM_t("删除群成员"),
              style: const TextStyle(color: Colors.white, fontSize: 17),
            ),
            actions: [
              TextButton(
                onPressed: () async {
                  if (selectedGroupMember.isNotEmpty) {
                    final userIDs =
                        selectedGroupMember.map((e) => e.userID).toList();
                    widget.model.kickOffMember(userIDs);
                    Navigator.pop(context);
                  }
                },
                child: Text(
                  TIM_t("确定"),
                  style: const TextStyle(
                    color: Colors.white,
                    fontSize: 16,
                  ),
                ),
              )
            ],
            shadowColor: theme.weakBackgroundColor,
            flexibleSpace: Container(
              decoration: BoxDecoration(
                gradient: LinearGradient(colors: [
                  theme.lightPrimaryColor ?? CommonColor.lightPrimaryColor,
                  theme.primaryColor ?? CommonColor.primaryColor
                ]),
              ),
            ),
            iconTheme: const IconThemeData(
              color: Colors.white,
            )),
        body: ChangeNotifierProvider.value(
            value: widget.model,
            child: Consumer<TUIGroupProfileViewModel>(
                builder: ((context, value, child) {
              return GroupProfileMemberList(
                memberList:
                    handleRole(searchMemberList ?? value.groupMemberList),
                canSelectMember: true,
                canSlideDelete: false,
                onSelectedMemberChange: (selectedMember) {
                  selectedGroupMember = selectedMember;
                },
                touchBottomCallBack: () {
                  widget.model
                      .loadMoreData(groupID: widget.model.groupInfo!.groupID);
                },
              );
            }))));
  }
}

class AddGroupMemberPage extends StatefulWidget {
  final TUIGroupProfileViewModel model;

  const AddGroupMemberPage({Key? key, required this.model}) : super(key: key);

  @override
  State<StatefulWidget> createState() => _AddGroupMemberPageState();
}

class _AddGroupMemberPageState extends TIMUIKitState<AddGroupMemberPage> {
  List<V2TimFriendInfo> selectedContacter = [];

  @override
  Widget tuiBuild(BuildContext context, TUIKitBuildValue value) {
    final TUITheme theme = value.theme;

    return Scaffold(
        appBar: AppBar(
            title: Text(
              TIM_t("添加群成员"),
              style: const TextStyle(color: Colors.white, fontSize: 17),
            ),
            actions: [
              TextButton(
                onPressed: () async {
                  if (selectedContacter.isNotEmpty) {
                    final userIDs =
                        selectedContacter.map((e) => e.userID).toList();
                    await widget.model.inviteUserToGroup(userIDs);
                    Navigator.pop(context);
                  }
                },
                child: Text(
                  TIM_t("确定"),
                  style: const TextStyle(
                    color: Colors.white,
                    fontSize: 16,
                  ),
                ),
              )
            ],
            shadowColor: theme.weakDividerColor,
            flexibleSpace: Container(
              decoration: BoxDecoration(
                gradient: LinearGradient(colors: [
                  theme.lightPrimaryColor ?? CommonColor.lightPrimaryColor,
                  theme.primaryColor ?? CommonColor.primaryColor
                ]),
              ),
            ),
            iconTheme: const IconThemeData(
              color: Colors.white,
            )),
        body: ChangeNotifierProvider.value(
            value: widget.model,
            child: Consumer<TUIGroupProfileViewModel>(
                builder: ((context, value, child) {
              if (value.contactList != null) {
                return ContactList(
                  contactList: value.contactList!,
                  isCanSelectMemberItem: true,
                  onSelectedMemberItemChange: (selectedMember) {
                    selectedContacter = selectedMember;
                  },
                );
              }
              return Container();
            }))));
  }
}
文件：/im-flutter-uikit/package_src/tim_ui_kit/lib/ui/views/TIMUIKitGroupProfile/tim_uikit_group_profile.dart
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:tim_ui_kit/base_widgets/tim_ui_kit_state.dart';
import 'package:tim_ui_kit/business_logic/life_cycle/group_profile_life_cycle.dart';
import 'package:tim_ui_kit/business_logic/view_models/tui_group_profile_view_model.dart';
import 'package:tim_ui_kit/data_services/services_locatar.dart';
import 'package:tim_ui_kit/tim_ui_kit.dart';
import 'package:tim_ui_kit/base_widgets/tim_ui_kit_base.dart';
import 'package:tim_ui_kit/ui/views/TIMUIKitGroupProfile/group_profile_widget.dart';
import 'package:tim_ui_kit/ui/views/TIMUIKitGroupProfile/shared_data_widget.dart';
import 'package:tim_ui_kit/ui/views/TIMUIKitGroupProfile/widgets/tim_ui_group_profile_widget.dart';
import 'package:tim_ui_kit/ui/views/TIMUIKitGroupProfile/widgets/tim_uikit_group_button_area.dart';
import 'package:tim_ui_kit/ui/views/TIMUIKitGroupProfile/widgets/tim_uikit_group_manage.dart';
import 'package:tim_ui_kit/ui/views/TIMUIKitGroupProfile/widgets/tim_uikit_group_notification.dart';
export 'package:tim_ui_kit/ui/widgets/transimit_group_owner_select.dart';

typedef GroupProfileBuilder = Widget Function(BuildContext context,
    V2TimGroupInfo groupInfo, List<V2TimGroupMemberFullInfo?> groupMemberList);

class TIMUIKitGroupProfile extends StatefulWidget {
  /// Group ID
  final String groupID;
  final Color? backGroundColor;

  /// [Deprecated:] The builder for custom bottom operation area.
  /// [operationListBuilder] and [bottomOperationBuilder] merged into [builder], please use it instead.
  final Widget Function(BuildContext context, V2TimGroupInfo groupInfo,
      List<V2TimGroupMemberFullInfo?> groupMemberList)? bottomOperationBuilder;

  /// [Deprecated:] The builder for custom bottom operation area.
  /// [operationListBuilder] and [bottomOperationBuilder] merged into [builder], please use it instead.
  final Widget Function(BuildContext context, V2TimGroupInfo groupInfo,
      List<V2TimGroupMemberFullInfo?> groupMemberList)? operationListBuilder;

  /// [If you tend to customize the profile page, use [profileWidgetBuilder] with [profileWidgetsOrder] as priority.]
  /// The builder for each widgets in profile page,
  /// you can customize some of it by pass your own widget into here.
  /// Or, you can add your custom widget to the three custom widgets.
  final GroupProfileWidgetBuilder? profileWidgetBuilder;

  /// [If you tend to customize the profile page, use [profileWidgetBuilder] with [profileWidgetsOrder] as priority.]
  /// If the default widget order can not meet you needs,
  /// you may change the order by this array with widget enum.
  final List<GroupProfileWidgetEnum>? profileWidgetsOrder;

  /// The builder for the whole group profile page, you can use this to customize all the element here.
  /// Mentioned: If you use this builder, [profileWidgetBuilder] and [profileWidgetsOrder] will no longer works.
  final GroupProfileBuilder? builder;

  /// The life cycle hooks for group profile business logic.
  /// You have better to implement the `didLeaveGroup` in it.
  final GroupProfileLifeCycle? lifeCycle;

  const TIMUIKitGroupProfile(
      {Key? key,
      required this.groupID,
      this.backGroundColor,
      @Deprecated("[operationListBuilder] and [bottomOperationBuilder] merged into [builder], please use it instead")
          this.bottomOperationBuilder,
      @Deprecated("[operationListBuilder] and [bottomOperationBuilder] merged into [builder], please use it instead")
          this.operationListBuilder,
      this.builder,
      this.profileWidgetBuilder,
      this.profileWidgetsOrder,
      this.lifeCycle})
      : super(key: key);

  @override
  State<StatefulWidget> createState() => _TIMUIKitGroupProfileState();
}

class _TIMUIKitGroupProfileState extends TIMUIKitState<TIMUIKitGroupProfile> {
  final TUIGroupProfileViewModel _model =
      serviceLocator<TUIGroupProfileViewModel>();

  @override
  void initState() {
    super.initState();
    _model.loadData(widget.groupID);
    _model.lifeCycle = widget.lifeCycle;
    // _model.setGroupListener();
  }

  @override
  void dispose() {
    // _model.clearData();
    // _model.dispose();
    // _model.removeGroupListener();
    super.dispose();
  }

  final List<GroupProfileWidgetEnum> _defaultWidgetOrder = [
    GroupProfileWidgetEnum.detailCard,
    GroupProfileWidgetEnum.operationDivider,
    GroupProfileWidgetEnum.memberListTile,
    GroupProfileWidgetEnum.operationDivider,
    GroupProfileWidgetEnum.searchMessage,
    GroupProfileWidgetEnum.operationDivider,
    GroupProfileWidgetEnum.groupNotice,
    GroupProfileWidgetEnum.groupManage,
    GroupProfileWidgetEnum.groupJoiningModeBar,
    GroupProfileWidgetEnum.groupTypeBar,
    GroupProfileWidgetEnum.operationDivider,
    GroupProfileWidgetEnum.pinedConversationBar,
    GroupProfileWidgetEnum.muteGroupMessageBar,
    GroupProfileWidgetEnum.operationDivider,
    GroupProfileWidgetEnum.nameCardBar,
    GroupProfileWidgetEnum.operationDivider,
    GroupProfileWidgetEnum.buttonArea
  ];

  @override
  Widget tuiBuild(BuildContext context, TUIKitBuildValue value) {
    final TUITheme theme = value.theme;

    return MultiProvider(
        providers: [
          ChangeNotifierProvider.value(value: _model),
        ],
        builder: (context, w) {
          final groupInfo =
              Provider.of<TUIGroupProfileViewModel>(context).groupInfo;
          final memberList =
              Provider.of<TUIGroupProfileViewModel>(context).groupMemberList;
          if (groupInfo == null || memberList == null) {
            return Container();
          }

          final isGroupOwner = groupInfo.role ==
              GroupMemberRoleType.V2TIM_GROUP_MEMBER_ROLE_OWNER;
          final isAdmin = groupInfo.role ==
              GroupMemberRoleType.V2TIM_GROUP_MEMBER_ROLE_ADMIN;

          Widget groupProfilePage({required Widget child}) {
            return SharedDataWidget(
              model: _model,
              child: SingleChildScrollView(
                child: Container(
                  color: widget.backGroundColor ?? theme.weakBackgroundColor,
                  child: child,
                ),
              ),
            );
          }

          void toDefaultNoticePage() {
            Navigator.push(
                context,
                MaterialPageRoute(
                    builder: (context) => GroupProfileNotificationPage(
                        model: _model,
                        notification: groupInfo.notification ?? "")));
          }

          void toDefaultManagePage() {
            Navigator.push(
                context,
                MaterialPageRoute(
                    builder: (context) => GroupProfileGroupManagePage(
                          model: _model,
                        )));
          }

          List<Widget> _renderWidgetsWithOrder(
              List<GroupProfileWidgetEnum> order) {
            final GroupProfileWidgetBuilder? customBuilder =
                widget.profileWidgetBuilder;
            return order.map((element) {
              switch (element) {
                case GroupProfileWidgetEnum.detailCard:
                  return (customBuilder?.detailCard != null
                      ? customBuilder?.detailCard!(
                          groupInfo, _model.setGroupName)
                      : TIMUIKitGroupProfileWidget.detailCard(
                          groupInfo: groupInfo))!;
                case GroupProfileWidgetEnum.memberListTile:
                  return (customBuilder?.memberListTile != null
                      ? customBuilder?.memberListTile!(memberList)
                      : TIMUIKitGroupProfileWidget.memberTile())!;
                case GroupProfileWidgetEnum.groupNotice:
                  return (customBuilder?.groupNotice != null
                      ? customBuilder?.groupNotice!(
                          groupInfo.notification ?? "",
                          toDefaultNoticePage,
                          _model.setGroupNotification)
                      : TIMUIKitGroupProfileWidget.groupNotification())!;
                case GroupProfileWidgetEnum.groupManage:
                  if (isAdmin || isGroupOwner) {
                    return (customBuilder?.groupManage != null
                        ? customBuilder?.groupManage!(toDefaultManagePage)
                        : TIMUIKitGroupProfileWidget.groupManage())!;
                  } else {
                    return Container();
                  }
                case GroupProfileWidgetEnum.searchMessage:
                  return (customBuilder?.searchMessage != null
                      ? customBuilder?.searchMessage!()
                      : Text(TIM_t("你必须自定义search bar，并处理点击跳转")))!;
                case GroupProfileWidgetEnum.operationDivider:
                  return (customBuilder?.operationDivider != null
                      ? customBuilder?.operationDivider!()
                      : TIMUIKitGroupProfileWidget.operationDivider())!;
                case GroupProfileWidgetEnum.groupTypeBar:
                  return (customBuilder?.groupTypeBar != null
                      ? customBuilder?.groupTypeBar!(groupInfo.groupType)
                      : TIMUIKitGroupProfileWidget.groupType())!;
                case GroupProfileWidgetEnum.groupJoiningModeBar:
                  return (customBuilder?.groupJoiningModeBar != null
                      ? customBuilder?.groupJoiningModeBar!(
                          groupInfo.groupAddOpt ?? 1, _model.setGroupAddOpt)
                      : TIMUIKitGroupProfileWidget.groupAddOpt())!;
                case GroupProfileWidgetEnum.nameCardBar:
                  return (customBuilder?.nameCardBar != null
                      ? customBuilder?.nameCardBar!(
                          _model.getSelfNameCard(), _model.setNameCard)
                      : TIMUIKitGroupProfileWidget.nameCard())!;
                case GroupProfileWidgetEnum.muteGroupMessageBar:
                  return (customBuilder?.muteGroupMessageBar != null
                      ? customBuilder?.muteGroupMessageBar!(
                          _model.isDisturb ?? false, _model.setMessageDisturb)
                      : TIMUIKitGroupProfileWidget.messageDisturb())!;
                case GroupProfileWidgetEnum.pinedConversationBar:
                  return (customBuilder?.pinedConversationBar != null
                      ? customBuilder?.pinedConversationBar!(
                          _model.conversation?.isPinned ?? false,
                          _model.pinedConversation)
                      : TIMUIKitGroupProfileWidget.pinedConversation())!;
                case GroupProfileWidgetEnum.buttonArea:
                  return (customBuilder?.buttonArea != null
                      ? customBuilder?.buttonArea!(groupInfo, memberList)
                      : GroupProfileButtonArea(groupInfo.groupID, _model))!;
                case GroupProfileWidgetEnum.customBuilderOne:
                  return (customBuilder?.customBuilderOne != null
                      ? customBuilder?.customBuilderOne!(groupInfo, memberList)
                      // Please define the corresponding custom widget in `profileWidgetBuilder` before using it here.
                      : Text(TIM_t("如使用自定义区域，请在profileWidgetBuilder传入对应组件")))!;
                case GroupProfileWidgetEnum.customBuilderTwo:
                  return (customBuilder?.customBuilderTwo != null
                      ? customBuilder?.customBuilderTwo!(groupInfo, memberList)
                      // Please define the corresponding custom widget in `profileWidgetBuilder` before using it here.
                      : Text(TIM_t("如使用自定义区域，请在profileWidgetBuilder传入对应组件")))!;
                case GroupProfileWidgetEnum.customBuilderThree:
                  return (customBuilder?.customBuilderThree != null
                      ? customBuilder?.customBuilderThree!(
                          groupInfo, memberList)
                      // Please define the corresponding custom widget in `profileWidgetBuilder` before using it here.
                      : Text(TIM_t("如使用自定义区域，请在profileWidgetBuilder传入对应组件")))!;
                case GroupProfileWidgetEnum.customBuilderFour:
                  return (customBuilder?.customBuilderFour != null
                      ? customBuilder?.customBuilderFour!(groupInfo, memberList)
                      // Please define the corresponding custom widget in `profileWidgetBuilder` before using it here.
                      : Text(TIM_t("如使用自定义区域，请在profileWidgetBuilder传入对应组件")))!;
                case GroupProfileWidgetEnum.customBuilderFive:
                  return (customBuilder?.customBuilderFive != null
                      ? customBuilder?.customBuilderFive!(groupInfo, memberList)
                      // Please define the corresponding custom widget in `profileWidgetBuilder` before using it here.
                      : Text(TIM_t("如使用自定义区域，请在profileWidgetBuilder传入对应组件")))!;
                default:
                  return Container();
              }
            }).toList();
          }

          if (widget.builder != null) {
            return groupProfilePage(
              child: widget.builder!(context, groupInfo, memberList),
            );
          } else if (widget.profileWidgetsOrder != null) {
            return groupProfilePage(
              child: Column(
                children: [
                  ..._renderWidgetsWithOrder(widget.profileWidgetsOrder!)
                ],
              ),
            );
          } else {
            return groupProfilePage(
                child: Column(
              children: [..._renderWidgetsWithOrder(_defaultWidgetOrder)],
            ));
          }
        });
  }
}
文件：/im-flutter-uikit/package_src/tim_ui_kit/lib/ui/views/TIMUIKitGroupProfile/widgets/tim_ui_group_member_search.dart
import 'package:flutter/material.dart';
import 'package:tim_ui_kit/base_widgets/tim_ui_kit_statelesswidget.dart';
import 'package:tim_ui_kit/ui/utils/optimize_utils.dart';
import 'package:tim_ui_kit/ui/utils/tui_theme.dart';

import 'package:tim_ui_kit/base_widgets/tim_ui_kit_base.dart';
import 'package:tencent_im_base/tencent_im_base.dart';

class GroupMemberSearchTextField extends TIMUIKitStatelessWidget {
  final Function(String text) onTextChange;
  GroupMemberSearchTextField({Key? key, required this.onTextChange})
      : super(key: key);

  @override
  Widget tuiBuild(BuildContext context, TUIKitBuildValue value) {
    final TUITheme theme = value.theme;

    var debounceFunc = OptimizeUtils.debounce(
        (text) => onTextChange(text), const Duration(milliseconds: 300));
    return Container(
      color: Colors.white,
      child: Column(children: [
        Container(
          decoration: BoxDecoration(
              borderRadius: const BorderRadius.all(Radius.circular(5.0)),
              border: Border.all(color: theme.weakBackgroundColor!, width: 12)),
          child: TextField(
            onChanged: debounceFunc,
            decoration: InputDecoration(
              hintText: TIM_t("搜索"),
              prefixIcon: const Icon(Icons.search),
            ),
          ),
        ),
        Divider(
            thickness: 1,
            indent: 74,
            endIndent: 0,
            color: theme.weakBackgroundColor,
            height: 0)
      ]),
    );
  }
}
文件：/im-flutter-uikit/package_src/tim_ui_kit/lib/ui/views/TIMUIKitGroupProfile/widgets/tim_ui_group_profile_widget.dart
import 'package:flutter/cupertino.dart';
import 'package:tencent_im_base/tencent_im_base.dart';
import 'package:tim_ui_kit/ui/views/TIMUIKitGroupProfile/widgets/tim_ui_group_search_msg.dart';
import 'package:tim_ui_kit/ui/views/TIMUIKitGroupProfile/widgets/tim_uikit_group_add_opt.dart';
import 'package:tim_ui_kit/ui/views/TIMUIKitGroupProfile/widgets/tim_uikit_group_detail_card.dart';
import 'package:tim_ui_kit/ui/views/TIMUIKitGroupProfile/widgets/tim_uikit_group_manage.dart';
import 'package:tim_ui_kit/ui/views/TIMUIKitGroupProfile/widgets/tim_uikit_group_member_tile.dart';
import 'package:tim_ui_kit/ui/views/TIMUIKitGroupProfile/widgets/tim_uikit_group_message_disturb.dart';
import 'package:tim_ui_kit/ui/views/TIMUIKitGroupProfile/widgets/tim_uikit_group_name_card.dart';
import 'package:tim_ui_kit/ui/views/TIMUIKitGroupProfile/widgets/tim_uikit_group_notification.dart';
import 'package:tim_ui_kit/ui/views/TIMUIKitGroupProfile/widgets/tim_uikit_group_pin_conversation.dart';
import 'package:tim_ui_kit/ui/views/TIMUIKitGroupProfile/widgets/tim_uikit_group_type.dart';

class TIMUIKitGroupProfileWidget {
  static Widget detailCard(
      {required V2TimGroupInfo groupInfo,

      /// You can deal with updating group name manually, or UIKIt do it automatically.
      Function(String updateGroupName)? updateGroupName}) {
    return GroupProfileDetailCard(
      groupInfo: groupInfo,
      updateGroupName: updateGroupName,
    );
  }

  static Widget memberTile() {
    return GroupMemberTile();
  }

  static Widget groupNotification() {
    return GroupProfileNotification();
  }

  static Widget groupManage() {
    return GroupProfileGroupManage();
  }

  static Widget searchMessage(Function(V2TimConversation?) onJumpToSearch) {
    return GroupProfileGroupSearch(onJumpToSearch: onJumpToSearch);
  }

  static Widget operationDivider() {
    return const SizedBox(
      height: 10,
    );
  }

  static Widget groupType() {
    return GroupProfileType();
  }

  static Widget groupAddOpt() {
    return GroupProfileAddOpt();
  }

  static Widget nameCard() {
    return GroupProfileNameCard();
  }

  static Widget messageDisturb() {
    return GroupMessageDisturb();
  }

  static Widget pinedConversation() {
    return GroupPinConversation();
  }
}
文件：/im-flutter-uikit/package_src/tim_ui_kit/lib/ui/views/TIMUIKitGroupProfile/widgets/tim_ui_group_search_msg.dart
// ignore_for_file: unused_import

import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:tim_ui_kit/base_widgets/tim_ui_kit_statelesswidget.dart';
import 'package:tim_ui_kit/business_logic/view_models/tui_theme_view_model.dart';
import 'package:tim_ui_kit/data_services/services_locatar.dart';
import 'package:tim_ui_kit/tim_ui_kit.dart';
import 'package:tim_ui_kit/ui/utils/color.dart';
import 'package:tim_ui_kit/ui/views/TIMUIKitSearch/tim_uikit_search.dart';

import 'package:tim_ui_kit/data_services/conversation/conversation_services.dart';

import 'package:tim_ui_kit/base_widgets/tim_ui_kit_base.dart';
import 'package:tim_ui_kit/ui/views/TIMUIKitGroupProfile/shared_data_widget.dart';

class GroupProfileGroupSearch extends TIMUIKitStatelessWidget {
  GroupProfileGroupSearch({Key? key, required this.onJumpToSearch})
      : super(key: key);
  final ConversationService _conversationService =
      serviceLocator<ConversationService>();

  final Function(V2TimConversation?) onJumpToSearch;

  @override
  Widget tuiBuild(BuildContext context, TUIKitBuildValue value) {
    final TUITheme theme = value.theme;

    final model = SharedDataWidget.of(context)?.model;
    if (model == null) {
      return Container();
    }
    return InkWell(
      onTap: () async {
        V2TimConversation? conversation =
            await _conversationService.getConversation(
                conversationID: "group_${model.groupInfo!.groupID}");
        if (conversation != null) {
          onJumpToSearch(conversation);
        }
      },
      child: Container(
        padding: const EdgeInsets.only(top: 12, left: 16, bottom: 12),
        decoration: BoxDecoration(
            color: Colors.white,
            border: Border(
                bottom: BorderSide(
                    color: theme.weakDividerColor ??
                        CommonColor.weakDividerColor))),
        child: Row(
          mainAxisAlignment: MainAxisAlignment.spaceBetween,
          children: [
            Text(
              TIM_t("查找聊天内容"),
              style: TextStyle(fontSize: 16, color: theme.darkTextColor),
            ),
            Icon(Icons.keyboard_arrow_right, color: theme.weakTextColor)
          ],
        ),
      ),
    );
  }
}
文件：/im-flutter-uikit/package_src/tim_ui_kit/lib/ui/views/TIMUIKitGroupProfile/widgets/tim_uikit_group_add_opt.dart
import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:tencent_im_base/tencent_im_base.dart';
import 'package:provider/provider.dart';
import 'package:tim_ui_kit/base_widgets/tim_ui_kit_statelesswidget.dart';
import 'package:tim_ui_kit/business_logic/view_models/tui_group_profile_view_model.dart';
import 'package:tim_ui_kit/ui/utils/color.dart';
import 'package:tim_ui_kit/ui/utils/tui_theme.dart';
import 'package:tim_ui_kit/ui/views/TIMUIKitGroupProfile/shared_data_widget.dart';

import 'package:tim_ui_kit/base_widgets/tim_ui_kit_base.dart';

class GroupProfileAddOpt extends TIMUIKitStatelessWidget {
  GroupProfileAddOpt({Key? key}) : super(key: key);

  @override
  Widget tuiBuild(BuildContext context, TUIKitBuildValue value) {
    final TUITheme theme = value.theme;

    final _model = SharedDataWidget.of(context)?.model;
    if (_model == null) {
      return Container();
    }
    return MultiProvider(
        providers: [
          ChangeNotifierProvider.value(value: _model),
        ],
        builder: (context, w) {
          final model = Provider.of<TUIGroupProfileViewModel>(context);

          String addOpt = TIM_t("未知");

          final groupAddOpt = model.groupInfo?.groupAddOpt;
          switch (groupAddOpt) {
            case GroupAddOptType.V2TIM_GROUP_ADD_ANY:
              addOpt = TIM_t("自动审批");
              break;
            case GroupAddOptType.V2TIM_GROUP_ADD_AUTH:
              addOpt = TIM_t("管理员审批");
              break;
            case GroupAddOptType.V2TIM_GROUP_ADD_FORBID:
              addOpt = TIM_t("禁止加群");
              break;
          }

          final actionList = [
            {
              "label": TIM_t("禁止加群"),
              "id": GroupAddOptType.V2TIM_GROUP_ADD_FORBID
            },
            {"label": TIM_t("自动审批"), "id": GroupAddOptType.V2TIM_GROUP_ADD_ANY},
            {
              "label": TIM_t("管理员审批"),
              "id": GroupAddOptType.V2TIM_GROUP_ADD_AUTH
            }
          ];

          _handleActionTap(int addOpt) async {
            model.setGroupAddOpt(addOpt).then((res) {});
            Navigator.pop(
              context,
              "cancel",
            );
          }

          return Container(
            padding: const EdgeInsets.only(top: 12, left: 16, bottom: 12),
            decoration: BoxDecoration(
                color: Colors.white,
                border: Border(
                    bottom: BorderSide(
                        color: theme.weakDividerColor ??
                            CommonColor.weakDividerColor))),
            child: InkWell(
              onTap: () async {
                showCupertinoModalPopup<String>(
                  context: context,
                  builder: (BuildContext context) {
                    return CupertinoActionSheet(
                      title: Text(TIM_t("加群方式")),
                      cancelButton: CupertinoActionSheetAction(
                        onPressed: () {
                          Navigator.pop(
                            context,
                            "cancel",
                          );
                        },
                        child: Text(TIM_t("取消")),
                        isDefaultAction: false,
                      ),
                      actions: actionList
                          .map((e) => CupertinoActionSheetAction(
                                onPressed: () {
                                  _handleActionTap(e["id"] as int);
                                },
                                child: Text(
                                  e["label"] as String,
                                  style: TextStyle(color: theme.primaryColor),
                                ),
                                isDefaultAction: false,
                              ))
                          .toList(),
                    );
                  },
                );
              },
              child: Row(
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                children: [
                  Text(
                    TIM_t("加群方式"),
                    style: TextStyle(fontSize: 16, color: theme.darkTextColor),
                  ),
                  Row(
                    children: [
                      Text(
                        addOpt,
                        style:
                            const TextStyle(fontSize: 16, color: Colors.black),
                      ),
                      Icon(Icons.keyboard_arrow_right,
                          color: theme.weakTextColor)
                    ],
                  )
                ],
              ),
            ),
          );
        });
  }
}
文件：/im-flutter-uikit/package_src/tim_ui_kit/lib/ui/views/TIMUIKitGroupProfile/widgets/tim_uikit_group_button_area.dart
import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:tim_ui_kit/base_widgets/tim_ui_kit_base.dart';
import 'package:tim_ui_kit/base_widgets/tim_ui_kit_statelesswidget.dart';
import 'package:tim_ui_kit/business_logic/view_models/tui_group_profile_view_model.dart';
import 'package:tim_ui_kit/tim_ui_kit.dart';
import 'package:tim_ui_kit/ui/controller/tim_uikit_chat_controller.dart';
import 'package:tim_ui_kit/ui/utils/color.dart';

class GroupProfileButtonArea extends TIMUIKitStatelessWidget {
  final String groupID;
  final TUIGroupProfileViewModel model;
  final sdkInstance = TIMUIKitCore.getSDKInstance();
  final coreInstance = TIMUIKitCore.getInstance();
  final TIMUIKitChatController _timuiKitChatController =
      TIMUIKitChatController();

  GroupProfileButtonArea(this.groupID, this.model, {Key? key})
      : super(key: key);

  final _operationList = [
    {"label": TIM_t("清空聊天记录"), "id": "clearHistory"},
    {"label": TIM_t("转让群主"), "id": "transimitOwner"},
    {"label": TIM_t("删除并退出"), "id": "quitGroup"},
    {"label": TIM_t("解散该群"), "id": "dismissGroup"}
  ];

  _clearHistory(BuildContext context, theme) async {
    showCupertinoModalPopup<String>(
      context: context,
      builder: (BuildContext context) {
        return CupertinoActionSheet(
          cancelButton: CupertinoActionSheetAction(
            onPressed: () {
              Navigator.pop(
                context,
              );
            },
            child: Text(TIM_t("取消")),
            isDefaultAction: false,
          ),
          actions: [
            CupertinoActionSheetAction(
              onPressed: () async {
                Navigator.pop(
                  context,
                );
                final res = await sdkInstance
                    .getMessageManager()
                    .clearGroupHistoryMessage(groupID: groupID);
                if (res.code == 0) {
                  _timuiKitChatController.clearHistory();
                }
              },
              child: Text(
                TIM_t("清空聊天记录"),
                style: TextStyle(color: theme.cautionColor),
              ),
              isDefaultAction: false,
            )
          ],
        );
      },
    );
  }

  _quitGroup(BuildContext context, theme) async {
    showCupertinoModalPopup<String>(
      context: context,
      builder: (BuildContext context) {
        return CupertinoActionSheet(
          title: Text(TIM_t("退出后不会接收到此群聊消息")),
          cancelButton: CupertinoActionSheetAction(
            onPressed: () {
              Navigator.pop(
                context,
              );
            },
            child: Text(TIM_t("取消")),
            isDefaultAction: false,
          ),
          actions: [
            CupertinoActionSheetAction(
              onPressed: () async {
                Navigator.pop(
                  context,
                );
                final res = await sdkInstance.quitGroup(groupID: groupID);
                if (res.code == 0) {
                  final deleteConvRes = await sdkInstance
                      .getConversationManager()
                      .deleteConversation(conversationID: "group_$groupID");
                  if (deleteConvRes.code == 0) {
                    model.lifeCycle?.didLeaveGroup();
                  }
                }
                model.loadData(groupID);
              },
              child: Text(
                TIM_t("确定"),
                style: TextStyle(color: theme.cautionColor),
              ),
              isDefaultAction: false,
            )
          ],
        );
      },
    );
  }

  _dismissGroup(BuildContext context, theme) async {
    showCupertinoModalPopup<String>(
      context: context,
      builder: (BuildContext context) {
        return CupertinoActionSheet(
          title: Text(TIM_t("解散后不会接收到此群聊消息")),
          cancelButton: CupertinoActionSheetAction(
            onPressed: () {
              Navigator.pop(
                context,
              );
            },
            child: Text(TIM_t("取消")),
            isDefaultAction: false,
          ),
          actions: [
            CupertinoActionSheetAction(
              onPressed: () async {
                Navigator.pop(
                  context,
                );
                final res = await sdkInstance.dismissGroup(groupID: groupID);
                if (res.code == 0) {
                  await sdkInstance
                      .getConversationManager()
                      .deleteConversation(conversationID: "group_$groupID");
                  model.lifeCycle?.didLeaveGroup();
                  model.loadData(groupID);
                }
              },
              child: Text(
                TIM_t("确定"),
                style: TextStyle(color: theme.cautionColor),
              ),
              isDefaultAction: false,
            )
          ],
        );
      },
    );
  }

  _transimitOwner(BuildContext context, String groupID) async {
    List<V2TimGroupMemberFullInfo>? selectedMember = await Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) => SelectTransimitOwner(
          groupID: groupID,
        ),
      ),
    );
    if (selectedMember != null) {
      final userID = selectedMember.first.userID;
      await sdkInstance
          .getGroupManager()
          .transferGroupOwner(groupID: groupID, userID: userID);
    }
  }

  List<Widget> _renderGroupOperation(
      BuildContext context, TUITheme theme, bool isOwner, String groupType) {
    return _operationList
        .where((element) {
          if (!isOwner) {
            return ["quitGroup", "clearHistory"].contains(element["id"]);
          } else {
            if (groupType == "Work") {
              return ["clearHistory", "quitGroup", "transimitOwner"]
                  .contains(element["id"]);
            }
            if (groupType != "Work") {
              return ["clearHistory", "dismissGroup", "transimitOwner"]
                  .contains(element["id"]);
            }
            return true;
          }
        })
        .map((e) => InkWell(
              onTap: () {
                if (e["id"]! == "clearHistory") {
                  _clearHistory(context, theme);
                } else if (e["id"] == "quitGroup") {
                  _quitGroup(context, theme);
                } else if (e["id"] == "dismissGroup") {
                  _dismissGroup(context, theme);
                } else if (e["id"] == "transimitOwner") {
                  _transimitOwner(context, groupID);
                }
              },
              child: Container(
                alignment: Alignment.center,
                padding: const EdgeInsets.symmetric(vertical: 15),
                decoration: BoxDecoration(
                    color: Colors.white,
                    border: Border(
                        bottom: BorderSide(
                            color: theme.weakDividerColor ??
                                CommonColor.weakDividerColor))),
                child: Text(
                  e["label"]!,
                  style: TextStyle(color: theme.cautionColor, fontSize: 17),
                ),
              ),
            ))
        .toList();
  }

  @override
  Widget tuiBuild(BuildContext context, TUIKitBuildValue value) {
    final theme = value.theme;
    final groupInfo = model.groupInfo;
    return Column(
      children: [
        ..._renderGroupOperation(
            context,
            theme,
            groupInfo?.owner == coreInstance.loginUserInfo?.userID,
            groupInfo?.groupType ?? "")
      ],
    );
  }
}
文件：/im-flutter-uikit/package_src/tim_ui_kit/lib/ui/views/TIMUIKitGroupProfile/widgets/tim_uikit_group_detail_card.dart
import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:tim_ui_kit/base_widgets/tim_ui_kit_statelesswidget.dart';
import 'package:tim_ui_kit/ui/utils/tui_theme.dart';
import 'package:tencent_im_base/tencent_im_base.dart';
import 'package:tim_ui_kit/ui/views/TIMUIKitGroupProfile/shared_data_widget.dart';
import 'package:tim_ui_kit/ui/widgets/avatar.dart';

import 'package:tim_ui_kit/base_widgets/tim_ui_kit_base.dart';

class GroupProfileDetailCard extends TIMUIKitStatelessWidget {
  final V2TimGroupInfo groupInfo;
  final void Function(String groupName)? updateGroupName;
  final TextEditingController controller = TextEditingController();

  GroupProfileDetailCard(
      {Key? key, required this.groupInfo, this.updateGroupName})
      : super(key: key);

  @override
  Widget tuiBuild(BuildContext context, TUIKitBuildValue value) {
    final TUITheme theme = value.theme;
    final model = SharedDataWidget.of(context)?.model;
    final faceUrl = groupInfo.faceUrl ?? "";
    final groupID = groupInfo.groupID;
    final showName = groupInfo.groupName ?? groupID;
    return InkWell(
      onTap: (() {
        showCupertinoModalPopup<String>(
          context: context,
          builder: (BuildContext context) {
            return CupertinoActionSheet(
                cancelButton: CupertinoActionSheetAction(
                  onPressed: () {
                    Navigator.pop(
                      context,
                    );
                  },
                  child: Text(TIM_t("取消")),
                  isDefaultAction: false,
                ),
                actions: [
                  CupertinoActionSheetAction(
                    onPressed: () {
                      controller.text = groupInfo.groupName ?? "";
                      showModalBottomSheet(
                          isScrollControlled: true,
                          shape: RoundedRectangleBorder(
                            borderRadius: BorderRadius.circular(10.0),
                          ),
                          context: context,
                          builder: (context) {
                            return Container(
                              decoration: const BoxDecoration(
                                  color: Colors.white,
                                  borderRadius: BorderRadius.only(
                                      topLeft: Radius.circular(10.0),
                                      topRight: Radius.circular(10.0))),
                              child: Column(
                                mainAxisSize: MainAxisSize.min,
                                children: [
                                  Container(
                                    padding: const EdgeInsets.symmetric(
                                        vertical: 20),
                                    child: Text(TIM_t("修改群名称")),
                                  ),
                                  Divider(
                                      height: 2, color: theme.weakDividerColor),
                                  Padding(
                                    padding: const EdgeInsets.all(20),
                                    child: Column(
                                      crossAxisAlignment:
                                          CrossAxisAlignment.start,
                                      children: [
                                        TextField(
                                          controller: controller,
                                          decoration: InputDecoration(
                                              border: InputBorder.none,
                                              fillColor:
                                                  theme.weakBackgroundColor,
                                              filled: true,
                                              isDense: true,
                                              hintText: ''),
                                        ),
                                        const SizedBox(
                                          height: 10,
                                        ),
                                        Text(
                                          TIM_t("修改群名称"),
                                          style: TextStyle(
                                              fontSize: 13,
                                              color: theme.weakTextColor),
                                          textAlign: TextAlign.left,
                                        ),
                                        const SizedBox(
                                          height: 30,
                                        ),
                                        SizedBox(
                                            width: double.infinity,
                                            child: ElevatedButton(
                                              onPressed: () {
                                                final text =
                                                    controller.text.trim();
                                                if (updateGroupName != null) {
                                                  updateGroupName!(text);
                                                } else {
                                                  model?.setGroupName(text);
                                                }
                                                Navigator.pop(context);
                                                Navigator.pop(context);
                                              },
                                              child: Text(TIM_t("确定")),
                                            )),
                                        const SizedBox(
                                          height: 20,
                                        ),
                                        Padding(
                                          padding: EdgeInsets.only(
                                              bottom: MediaQuery.of(context)
                                                  .viewInsets
                                                  .bottom),
                                        )
                                      ],
                                    ),
                                  )
                                ],
                              ),
                            );
                          });
                    },
                    child: Text(
                      TIM_t("修改群名称"),
                      style: TextStyle(color: theme.primaryColor),
                    ),
                    isDefaultAction: false,
                  )
                ]);
          },
        );
      }),
      child: Container(
        color: Colors.white,
        padding: const EdgeInsets.only(top: 12, bottom: 12, left: 16),
        child: Row(
          children: [
            SizedBox(
              width: 48,
              height: 48,
              child: Avatar(faceUrl: faceUrl, showName: showName),
            ),
            Expanded(
              child: Container(
                margin: const EdgeInsets.only(left: 16),
                child: Row(
                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                  crossAxisAlignment: CrossAxisAlignment.center,
                  children: [
                    Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Text(
                          showName,
                          style: const TextStyle(
                              fontSize: 18, fontWeight: FontWeight.w600),
                        ),
                        const SizedBox(
                          height: 8,
                        ),
                        Text("ID: $groupID",
                            style: TextStyle(
                                fontSize: 13, color: theme.weakTextColor))
                      ],
                    ),
                    Icon(
                      Icons.keyboard_arrow_right,
                      color: theme.weakTextColor,
                    )
                  ],
                ),
              ),
            )
          ],
        ),
      ),
    );
  }
}
文件：/im-flutter-uikit/package_src/tim_ui_kit/lib/ui/views/TIMUIKitGroupProfile/widgets/tim_uikit_group_manage.dart
import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:flutter_slidable/flutter_slidable.dart';
import 'package:tencent_im_base/tencent_im_base.dart';
import 'package:provider/provider.dart';
import 'package:tim_ui_kit/base_widgets/tim_ui_kit_state.dart';
import 'package:tim_ui_kit/base_widgets/tim_ui_kit_statelesswidget.dart';
import 'package:tim_ui_kit/business_logic/view_models/tui_group_profile_view_model.dart';
import 'package:tim_ui_kit/business_logic/view_models/tui_theme_view_model.dart';
import 'package:tim_ui_kit/data_services/services_locatar.dart';
import 'package:tim_ui_kit/ui/utils/color.dart';
import 'package:tim_ui_kit/ui/utils/tui_theme.dart';
import 'package:tim_ui_kit/ui/widgets/avatar.dart';
import 'package:tim_ui_kit/ui/widgets/radio_button.dart';
import 'package:tim_ui_kit/ui/views/TIMUIKitGroupProfile/shared_data_widget.dart';

import 'package:tim_ui_kit/base_widgets/tim_ui_kit_base.dart';

class GroupProfileGroupManage extends TIMUIKitStatelessWidget {
  GroupProfileGroupManage({Key? key}) : super(key: key);

  @override
  Widget tuiBuild(BuildContext context, TUIKitBuildValue value) {
    final TUITheme theme = value.theme;

    final model = SharedDataWidget.of(context)?.model;
    if (model == null) {
      return Container();
    }
    return InkWell(
      onTap: () {
        Navigator.push(
            context,
            MaterialPageRoute(
                builder: (context) => GroupProfileGroupManagePage(
                      model: model,
                    )));
      },
      child: Container(
        padding: const EdgeInsets.only(top: 12, left: 16, bottom: 12),
        decoration: BoxDecoration(
            color: Colors.white,
            border: Border(
                bottom: BorderSide(
                    color: theme.weakDividerColor ??
                        CommonColor.weakDividerColor))),
        child: Row(
          mainAxisAlignment: MainAxisAlignment.spaceBetween,
          children: [
            Text(
              TIM_t("群管理"),
              style: TextStyle(fontSize: 16, color: theme.darkTextColor),
            ),
            Icon(Icons.keyboard_arrow_right, color: theme.weakTextColor)
          ],
        ),
      ),
    );
  }
}

/// 管理员设置页面
class GroupProfileGroupManagePage extends StatefulWidget {
  final TUIGroupProfileViewModel model;
  const GroupProfileGroupManagePage({
    Key? key,
    required this.model,
  }) : super(key: key);

  @override
  State<StatefulWidget> createState() => _GroupProfileGroupManagePageState();
}

class _GroupProfileGroupManagePageState
    extends TIMUIKitState<GroupProfileGroupManagePage> {
  @override
  void initState() {
    super.initState();
  }

  @override
  Widget tuiBuild(BuildContext context, TUIKitBuildValue value) {
    return MultiProvider(
        providers: [
          ChangeNotifierProvider.value(value: widget.model),
          ChangeNotifierProvider.value(
              value: serviceLocator<TUIThemeViewModel>())
        ],
        builder: (context, w) {
          final memberList =
              Provider.of<TUIGroupProfileViewModel>(context).groupMemberList ??
                  [];
          final theme = Provider.of<TUIThemeViewModel>(context).theme;
          final isAllMuted = widget.model.groupInfo?.isAllMuted ?? false;
          return Scaffold(
            appBar: AppBar(
              title: Text(
                TIM_t("群管理"),
                style: const TextStyle(color: Colors.white, fontSize: 17),
              ),
              shadowColor: theme.weakDividerColor,
              flexibleSpace: Container(
                decoration: BoxDecoration(
                  gradient: LinearGradient(colors: [
                    theme.lightPrimaryColor ?? CommonColor.lightPrimaryColor,
                    theme.primaryColor ?? CommonColor.primaryColor
                  ]),
                ),
              ),
              iconTheme: const IconThemeData(
                color: Colors.white,
              ),
              leading: IconButton(
                padding: const EdgeInsets.only(left: 16),
                constraints: const BoxConstraints(),
                icon: Image.asset(
                  'images/arrow_back.png',
                  package: 'tim_ui_kit',
                  height: 34,
                  width: 34,
                ),
                onPressed: () async {
                  if (isAllMuted != widget.model.groupInfo?.isAllMuted) {
                    widget.model.setMuteAll(isAllMuted);
                  }
                  Navigator.pop(context);
                },
              ),
            ),
            body: Column(
              children: [
                Container(
                  padding: const EdgeInsets.only(
                      top: 12, left: 16, bottom: 12, right: 12),
                  decoration: BoxDecoration(
                      color: Colors.white,
                      border: Border(
                          bottom: BorderSide(
                              color: theme.weakDividerColor ??
                                  CommonColor.weakDividerColor))),
                  child: InkWell(
                    onTap: () {
                      Navigator.push(
                          context,
                          MaterialPageRoute(
                            builder: (context) => GroupProfileSetManagerPage(
                              model: widget.model,
                            ),
                          ));
                    },
                    child: Row(
                      mainAxisAlignment: MainAxisAlignment.spaceBetween,
                      children: [
                        Text(TIM_t("设置管理员"),
                            style: TextStyle(
                                fontSize: 16, color: theme.darkTextColor)),
                        Icon(Icons.keyboard_arrow_right,
                            color: theme.weakTextColor)
                      ],
                    ),
                  ),
                ),
                Container(
                  padding: const EdgeInsets.only(
                      top: 12, left: 16, bottom: 12, right: 12),
                  decoration: BoxDecoration(
                      color: Colors.white,
                      border: Border(
                          bottom: BorderSide(
                              color: theme.weakDividerColor ??
                                  CommonColor.weakDividerColor))),
                  child: Row(
                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                    children: [
                      Text(
                        TIM_t("全员禁言"),
                        style:
                            TextStyle(fontSize: 16, color: theme.darkTextColor),
                      ),
                      CupertinoSwitch(
                          value: isAllMuted,
                          onChanged: (value) async {
                            widget.model.setMuteAll(value);
                          },
                          activeColor: theme.primaryColor)
                    ],
                  ),
                ),
                Container(
                  padding:
                      const EdgeInsets.symmetric(vertical: 10, horizontal: 16),
                  color: theme.weakBackgroundColor,
                  alignment: Alignment.topLeft,
                  child: Text(
                    TIM_t("全员禁言开启后，只允许群主和管理员发言。"),
                    style: TextStyle(fontSize: 12, color: theme.weakTextColor),
                  ),
                ),
                if (!isAllMuted)
                  InkWell(
                    child: Container(
                        color: Colors.white,
                        padding: const EdgeInsets.only(left: 16),
                        child: Container(
                          padding: const EdgeInsets.symmetric(
                            vertical: 12,
                          ),
                          decoration: BoxDecoration(
                              color: Colors.white,
                              border: Border(
                                  bottom: BorderSide(
                                      color: theme.weakDividerColor ??
                                          CommonColor.weakDividerColor))),
                          child: Row(
                            children: [
                              Icon(
                                Icons.add_circle_outline,
                                color: theme.primaryColor,
                                size: 20,
                              ),
                              const SizedBox(
                                width: 12,
                              ),
                              Text(TIM_t("添加需要禁言的群成员"))
                            ],
                          ),
                        )),
                    onTap: () async {
                      Navigator.push(
                          context,
                          MaterialPageRoute(
                              builder: (context) => GroupProfileAddAdmin(
                                    appbarTitle: TIM_t("设置禁言"),
                                    memberList: memberList.where((element) {
                                      final isMute = element?.muteUntil != 0;
                                      final isMember = element!.role ==
                                          GroupMemberRoleType
                                              .V2TIM_GROUP_MEMBER_ROLE_MEMBER;
                                      return !isMute && isMember;
                                    }).toList(),
                                    selectCompletedHandler:
                                        (context, selectedMember) async {
                                      if (selectedMember.isNotEmpty) {
                                        for (var member in selectedMember) {
                                          final userID = member!.userID;
                                          widget.model
                                              .muteGroupMember(userID, true);
                                        }
                                      }
                                    },
                                  )));
                    },
                  ),
                if (!isAllMuted)
                  ...memberList
                      .where((element) => element?.muteUntil != 0)
                      .map((e) => _buildListItem(
                          context,
                          e!,
                          ActionPane(motion: const DrawerMotion(), children: [
                            SlidableAction(
                              onPressed: (_) {
                                widget.model.muteGroupMember(e.userID, false);
                              },
                              flex: 1,
                              backgroundColor: theme.cautionColor ??
                                  CommonColor.cautionColor,
                              autoClose: true,
                              label: TIM_t("删除"),
                            )
                          ])))
                      .toList()
              ],
            ),
          );
        });
  }
}

_getShowName(V2TimGroupMemberFullInfo? item) {
  final friendRemark = item?.friendRemark ?? "";
  final nameCard = item?.nameCard ?? "";
  final nickName = item?.nickName ?? "";
  final userID = item?.userID ?? "";
  return friendRemark.isNotEmpty
      ? friendRemark
      : nameCard.isNotEmpty
          ? nameCard
          : nickName.isNotEmpty
              ? nickName
              : userID;
}

Widget _buildListItem(BuildContext context, V2TimGroupMemberFullInfo memberInfo,
    ActionPane? endActionPane) {
  final theme = Provider.of<TUIThemeViewModel>(context).theme;
  return Container(
      color: Colors.white,
      child: Slidable(
          endActionPane: endActionPane,
          child: Column(children: [
            ListTile(
              tileColor: Colors.black,
              leading: SizedBox(
                width: 36,
                height: 36,
                child: Avatar(
                    faceUrl: memberInfo.faceUrl ?? "",
                    showName: _getShowName(memberInfo)),
              ),
              title: Row(
                children: [
                  Text(_getShowName(memberInfo),
                      style: const TextStyle(fontSize: 16)),
                ],
              ),
              onTap: () {},
            ),
            Divider(
                thickness: 1,
                indent: 74,
                endIndent: 0,
                color: theme.weakDividerColor,
                height: 0)
          ])));
}

/// 选择管理员
class GroupProfileSetManagerPage extends StatefulWidget {
  final TUIGroupProfileViewModel model;

  const GroupProfileSetManagerPage({Key? key, required this.model})
      : super(key: key);
  @override
  State<StatefulWidget> createState() => _GroupProfileSetManagerPageState();
}

class _GroupProfileSetManagerPageState
    extends TIMUIKitState<GroupProfileSetManagerPage> {
  List<V2TimGroupMemberFullInfo?> _getAdminMemberList(
      List<V2TimGroupMemberFullInfo?> memberList) {
    return memberList
        .where((member) =>
            member?.role == GroupMemberRoleType.V2TIM_GROUP_MEMBER_ROLE_ADMIN)
        .toList();
  }

  List<V2TimGroupMemberFullInfo?> _getOwnerList(
      List<V2TimGroupMemberFullInfo?> memberList) {
    return memberList
        .where((member) =>
            member?.role == GroupMemberRoleType.V2TIM_GROUP_MEMBER_ROLE_OWNER)
        .toList();
  }

  _removeAdmin(
      BuildContext context, V2TimGroupMemberFullInfo memberFullInfo) async {
    final res = await widget.model.setMemberToNormal(memberFullInfo.userID);
    if (res.code == 0) {
      onTIMCallback(TIMCallback(
          type: TIMCallbackType.INFO,
          infoRecommendText: TIM_t("成功取消管理员身份"),
          infoCode: 6661003));
    }
  }

  @override
  Widget tuiBuild(BuildContext context, TUIKitBuildValue value) {
    final TUITheme theme = value.theme;

    return Scaffold(
      appBar: AppBar(
        title: Text(
          TIM_t("设置管理员"),
          style: const TextStyle(color: Colors.white, fontSize: 17),
        ),
        shadowColor: theme.weakDividerColor,
        flexibleSpace: Container(
          decoration: BoxDecoration(
            gradient: LinearGradient(colors: [
              theme.lightPrimaryColor ?? CommonColor.lightPrimaryColor,
              theme.primaryColor ?? CommonColor.primaryColor
            ]),
          ),
        ),
        iconTheme: const IconThemeData(
          color: Colors.white,
        ),
      ),
      body: ChangeNotifierProvider.value(
        value: widget.model,
        child: Consumer<TUIGroupProfileViewModel>(
          builder: (context, value, child) {
            final memberList = value.groupMemberList ?? [];
            final adminList = _getAdminMemberList(memberList);
            final ownerList = _getOwnerList(memberList);
            final String option2 = adminList.length.toString();
            return SingleChildScrollView(
                child: Column(
              children: [
                Container(
                  alignment: Alignment.topLeft,
                  color: theme.weakDividerColor,
                  padding:
                      const EdgeInsets.symmetric(vertical: 6, horizontal: 16),
                  child: Text(
                    TIM_t("群主"),
                    style: TextStyle(fontSize: 14, color: theme.weakTextColor),
                  ),
                ),
                ...ownerList
                    .map(
                      (e) => _buildListItem(context, e!, null),
                    )
                    .toList(),
                Container(
                  alignment: Alignment.topLeft,
                  color: theme.weakDividerColor,
                  padding:
                      const EdgeInsets.symmetric(vertical: 6, horizontal: 16),
                  child: Text(
                    TIM_t_para("管理员 ({{option2}}/10)", "管理员 ($option2/10)")(
                        option2: option2),
                    style: TextStyle(fontSize: 14, color: theme.weakTextColor),
                  ),
                ),
                InkWell(
                  child: Container(
                      color: Colors.white,
                      padding: const EdgeInsets.only(left: 16),
                      child: Container(
                        padding: const EdgeInsets.symmetric(
                          vertical: 12,
                        ),
                        decoration: BoxDecoration(
                            color: Colors.white,
                            border: Border(
                                bottom: BorderSide(
                                    color: theme.weakDividerColor ??
                                        CommonColor.weakDividerColor))),
                        child: Row(
                          children: [
                            Icon(
                              Icons.add_circle_outline,
                              color: theme.primaryColor,
                              size: 20,
                            ),
                            const SizedBox(
                              width: 12,
                            ),
                            Text(TIM_t("添加管理员"))
                          ],
                        ),
                      )),
                  onTap: () async {
                    Navigator.push(
                        context,
                        MaterialPageRoute(
                            builder: (context) => GroupProfileAddAdmin(
                                  memberList: memberList
                                      .where((element) =>
                                          element?.role ==
                                          GroupMemberRoleType
                                              .V2TIM_GROUP_MEMBER_ROLE_MEMBER)
                                      .toList(),
                                  appbarTitle: TIM_t("设置管理员"),
                                  selectCompletedHandler:
                                      (context, selectedMember) async {
                                    if (selectedMember.isNotEmpty) {
                                      for (var member in selectedMember) {
                                        final userID = member!.userID;
                                        widget.model.setMemberToAdmin(userID);
                                      }
                                    }
                                  },
                                )));
                  },
                ),
                ...adminList
                    .map((e) => _buildListItem(
                        context,
                        e!,
                        ActionPane(motion: const DrawerMotion(), children: [
                          SlidableAction(
                            onPressed: (_) {
                              _removeAdmin(context, e);
                            },
                            flex: 1,
                            backgroundColor:
                                theme.cautionColor ?? CommonColor.cautionColor,
                            autoClose: true,
                            label: TIM_t("删除"),
                          )
                        ])))
                    .toList(),
              ],
            ));
          },
        ),
      ),
    );
  }
}

/// 添加管理员
class GroupProfileAddAdmin extends StatefulWidget {
  final List<V2TimGroupMemberFullInfo?> memberList;
  final String appbarTitle;
  final void Function(BuildContext context,
          List<V2TimGroupMemberFullInfo?> selectedMemberList)?
      selectCompletedHandler;

  const GroupProfileAddAdmin(
      {Key? key,
      required this.memberList,
      this.selectCompletedHandler,
      required this.appbarTitle})
      : super(key: key);

  @override
  State<StatefulWidget> createState() => _GroupProfileAddAdminState();
}

class _GroupProfileAddAdminState extends TIMUIKitState<GroupProfileAddAdmin> {
  List<V2TimGroupMemberFullInfo?> selectedMemberList = [];

  @override
  Widget tuiBuild(BuildContext context, TUIKitBuildValue value) {
    final TUITheme theme = value.theme;

    return Scaffold(
      appBar: AppBar(
        title: Text(
          widget.appbarTitle,
          style: const TextStyle(color: Colors.white, fontSize: 17),
        ),
        shadowColor: theme.weakDividerColor,
        flexibleSpace: Container(
          decoration: BoxDecoration(
            gradient: LinearGradient(colors: [
              theme.lightPrimaryColor ?? CommonColor.lightPrimaryColor,
              theme.primaryColor ?? CommonColor.primaryColor
            ]),
          ),
        ),
        iconTheme: const IconThemeData(
          color: Colors.white,
        ),
        leading: TextButton(
          onPressed: () {
            Navigator.of(context).pop();
          },
          child: Text(
            TIM_t("取消"),
            style: const TextStyle(
              color: Colors.white,
              fontSize: 16,
            ),
          ),
        ),
        actions: [
          TextButton(
            onPressed: () {
              if (widget.selectCompletedHandler != null) {
                widget.selectCompletedHandler!(context, selectedMemberList);
              }
              Navigator.of(context).pop();
            },
            child: Text(
              TIM_t("完成"),
              style: const TextStyle(
                color: Colors.white,
                fontSize: 16,
              ),
            ),
          )
        ],
      ),
      body: SingleChildScrollView(
          child: Column(
        children: [
          Container(
            alignment: Alignment.topLeft,
            color: theme.weakDividerColor,
            padding: const EdgeInsets.symmetric(vertical: 6, horizontal: 16),
            child: Text(
              TIM_t("群成员"),
              style: TextStyle(fontSize: 14, color: theme.weakTextColor),
            ),
          ),
          ...widget.memberList
              .map((e) => Container(
                    decoration: BoxDecoration(
                        color: Colors.white,
                        border: Border(
                            bottom: BorderSide(
                                color: theme.weakDividerColor ??
                                    CommonColor.weakDividerColor))),
                    padding: const EdgeInsets.symmetric(
                        vertical: 10, horizontal: 16),
                    child: InkWell(
                      onTap: () {
                        final isChecked = selectedMemberList.contains(e);
                        if (isChecked) {
                          selectedMemberList.add(e);
                        } else {
                          selectedMemberList.remove(e);
                        }
                        setState(() {});
                      },
                      child: Row(
                        children: [
                          CheckBoxButton(
                            isChecked: selectedMemberList.contains(e),
                            onChanged: (value) {
                              if (value) {
                                selectedMemberList.add(e);
                              } else {
                                selectedMemberList.remove(e);
                              }
                              setState(() {});
                            },
                          ),
                          const SizedBox(
                            width: 10,
                          ),
                          SizedBox(
                            width: 36,
                            height: 36,
                            child: Avatar(
                                faceUrl: e?.faceUrl ?? "",
                                showName: _getShowName(e)),
                          ),
                          const SizedBox(
                            width: 10,
                          ),
                          Text(_getShowName(e),
                              style: const TextStyle(fontSize: 16))
                        ],
                      ),
                    ),
                  ))
              .toList(),
        ],
      )),
    );
  }
}
文件：/im-flutter-uikit/package_src/tim_ui_kit/lib/ui/views/TIMUIKitGroupProfile/widgets/tim_uikit_group_member_tile.dart
// ignore_for_file: unused_element

import 'package:dotted_border/dotted_border.dart';
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:tim_ui_kit/base_widgets/tim_ui_kit_statelesswidget.dart';
import 'package:tim_ui_kit/business_logic/view_models/tui_group_profile_view_model.dart';
import 'package:tim_ui_kit/ui/utils/color.dart';
import 'package:tim_ui_kit/ui/utils/tui_theme.dart';
import 'package:tim_ui_kit/ui/views/TIMUIKitGroupProfile/tim_uikit_group_member_list.dart';
import 'package:tim_ui_kit/ui/widgets/avatar.dart';
import 'package:tim_ui_kit/ui/views/TIMUIKitGroupProfile/shared_data_widget.dart';

import 'package:tim_ui_kit/base_widgets/tim_ui_kit_base.dart';
import 'package:tencent_im_base/tencent_im_base.dart';

class GroupMemberTile extends TIMUIKitStatelessWidget {
  GroupMemberTile({
    Key? key,
  }) : super(key: key);

  List<V2TimGroupMemberFullInfo?> _getMemberList(memberList) {
    if (memberList.length > 8) {
      return memberList.getRange(0, 8).toList();
    } else {
      return memberList;
    }
  }

  _getShowName(V2TimGroupMemberFullInfo? item) {
    final friendRemark = item?.friendRemark ?? "";
    final nickName = item?.nickName ?? "";
    final userID = item?.userID;
    final showName = nickName != "" ? nickName : userID;
    return friendRemark != "" ? friendRemark : showName;
  }

  List<Widget> _groupMemberListBuilder(memberList, theme) {
    return _getMemberList(memberList).map((element) {
      final faceUrl = element?.faceUrl ?? "";
      final showName = _getShowName(element);
      return Column(
        children: [
          SizedBox(
            width: 50,
            height: 50,
            child: Avatar(faceUrl: faceUrl, showName: showName),
          ),
          const SizedBox(
            height: 8,
          ),
          Text(
            showName,
            style: TextStyle(color: theme.weakTextColor, fontSize: 10),
          )
        ],
      );
    }).toList();
  }

  List<Widget> _inviteMemberBuilder(bool isCanInviteMember,
      bool isCanKickOffMember, theme, BuildContext context) {
    return [];
  }

  @override
  Widget tuiBuild(BuildContext context, TUIKitBuildValue value) {
    final TUITheme theme = value.theme;

    final model = SharedDataWidget.of(context)?.model;
    if (model == null) {
      return Container();
    }
    return MultiProvider(
        providers: [
          ChangeNotifierProvider.value(value: model),
        ],
        builder: (context, w) {
          final memberAmount = Provider.of<TUIGroupProfileViewModel>(context)
                  .groupInfo
                  ?.memberCount ??
              0;
          final option1 = memberAmount.toString();
          final memberList =
              Provider.of<TUIGroupProfileViewModel>(context).groupMemberList ??
                  [];
          final isCanInviteMember =
              Provider.of<TUIGroupProfileViewModel>(context).canInviteMember();
          final isCanKickOffMember =
              Provider.of<TUIGroupProfileViewModel>(context).canKickOffMember();
          return Container(
            padding: const EdgeInsets.only(top: 12, left: 16, bottom: 12),
            color: Colors.white,
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Container(
                  padding: const EdgeInsets.only(bottom: 12),
                  decoration: BoxDecoration(
                      border: Border(
                          bottom: BorderSide(
                              color: theme.weakDividerColor ??
                                  CommonColor.weakDividerColor))),
                  child: InkWell(
                    onTap: () async {
                      Navigator.push(
                          context,
                          MaterialPageRoute(
                            builder: (context) => GroupProfileMemberListPage(
                                model: model, memberList: memberList),
                          ));
                    },
                    child: Row(
                      mainAxisAlignment: MainAxisAlignment.spaceBetween,
                      children: [
                        Text(TIM_t("群成员"),
                            style: TextStyle(
                                color: theme.darkTextColor, fontSize: 16)),
                        Row(
                          children: [
                            Text(
                              TIM_t_para("{{option1}}人", "$option1人")(
                                  option1: option1),
                              style: TextStyle(
                                  color: theme.darkTextColor, fontSize: 16),
                            ),
                            Icon(
                              Icons.keyboard_arrow_right,
                              color: theme.weakTextColor,
                            ),
                          ],
                        )
                      ],
                    ),
                  ),
                ),
                Container(
                  // height: 90,
                  padding: const EdgeInsets.only(top: 12),
                  child: Wrap(
                    spacing: 20,
                    runSpacing: 10,
                    alignment: WrapAlignment.start,
                    children: [
                      ..._groupMemberListBuilder(memberList, theme),
                      if (isCanInviteMember)
                        DottedBorder(
                            borderType: BorderType.RRect,
                            radius: const Radius.circular(4.5),
                            color: theme.weakTextColor!,
                            dashPattern: const [6, 3],
                            child: SizedBox(
                              width: 48,
                              height: 48,
                              child: IconButton(
                                onPressed: () {
                                  Navigator.push(
                                      context,
                                      MaterialPageRoute(
                                        builder: (context) =>
                                            AddGroupMemberPage(model: model),
                                      ));
                                },
                                icon: const Icon(Icons.add),
                                color: theme.weakTextColor,
                              ),
                            )),
                      // if (isCanInviteMember)
                      //   const SizedBox(
                      //     width: 21,
                      //   ),
                      if (isCanKickOffMember)
                        DottedBorder(
                            borderType: BorderType.RRect,
                            radius: const Radius.circular(4.5),
                            color: theme.weakTextColor!,
                            dashPattern: const [6, 3],
                            child: SizedBox(
                              width: 48,
                              height: 48,
                              child: IconButton(
                                onPressed: () {
                                  Navigator.push(
                                      context,
                                      MaterialPageRoute(
                                        builder: (context) =>
                                            DeleteGroupMemberPage(model: model),
                                      ));
                                },
                                icon: const Icon(Icons.remove),
                                color: theme.weakTextColor,
                              ),
                            )),
                    ],
                  ),
                ),
                if (memberList.length > 8)
                  GestureDetector(
                    child: Container(
                      alignment: Alignment.center,
                      margin: const EdgeInsets.only(top: 16),
                      child: Text(
                        TIM_t("查看更多群成员"),
                        style:
                            TextStyle(color: theme.weakTextColor, fontSize: 14),
                      ),
                    ),
                    onTap: () async {
                      Navigator.push(
                          context,
                          MaterialPageRoute(
                            builder: (context) => GroupProfileMemberListPage(
                                model: model, memberList: memberList),
                          ));
                    },
                  ),
              ],
            ),
          );
        });
  }
}
文件：/im-flutter-uikit/package_src/tim_ui_kit/lib/ui/views/TIMUIKitGroupProfile/widgets/tim_uikit_group_message_disturb.dart
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:tim_ui_kit/base_widgets/tim_ui_kit_statelesswidget.dart';
import 'package:tim_ui_kit/business_logic/view_models/tui_group_profile_view_model.dart';
import 'package:tim_ui_kit/ui/views/TIMUIKitProfile/widget/tim_uikit_operation_item.dart';
import 'package:tencent_im_base/tencent_im_base.dart';

import 'package:tim_ui_kit/base_widgets/tim_ui_kit_base.dart';
import 'package:tim_ui_kit/ui/views/TIMUIKitGroupProfile/shared_data_widget.dart';

class GroupMessageDisturb extends TIMUIKitStatelessWidget {
  GroupMessageDisturb({Key? key}) : super(key: key);

  @override
  Widget tuiBuild(BuildContext context, TUIKitBuildValue value) {
    final model = SharedDataWidget.of(context)?.model;
    return ChangeNotifierProvider.value(
        value: model,
        child: Consumer<TUIGroupProfileViewModel>(
            builder: ((context, value, child) {
          final isDisturb = value.isDisturb ?? false;
          return TIMUIKitOperationItem(
            operationName: TIM_t("消息免打扰"),
            type: "switch",
            operationValue: isDisturb,
            onSwitchChange: (value) {
              model?.setMessageDisturb(value);
            },
          );
        })));
  }
}
文件：/im-flutter-uikit/package_src/tim_ui_kit/lib/ui/views/TIMUIKitGroupProfile/widgets/tim_uikit_group_name_card.dart
import 'package:flutter/material.dart';
import 'package:tim_ui_kit/base_widgets/tim_ui_kit_statelesswidget.dart';
import 'package:tim_ui_kit/ui/utils/color.dart';
import 'package:tim_ui_kit/ui/utils/tui_theme.dart';
import 'package:tencent_im_base/tencent_im_base.dart';
import 'package:tim_ui_kit/ui/views/TIMUIKitGroupProfile/shared_data_widget.dart';

import 'package:tim_ui_kit/base_widgets/tim_ui_kit_base.dart';

class GroupProfileNameCard extends TIMUIKitStatelessWidget {
  GroupProfileNameCard({Key? key}) : super(key: key);
  final TextEditingController controller = TextEditingController();

  @override
  Widget tuiBuild(BuildContext context, TUIKitBuildValue value) {
    final TUITheme theme = value.theme;

    final model = SharedDataWidget.of(context)?.model;
    if (model == null) {
      return Container();
    }
    final nameCard = model.getSelfNameCard();

    controller.text = nameCard;
    return Container(
      padding: const EdgeInsets.only(top: 12, left: 16, bottom: 12),
      decoration: BoxDecoration(
          color: Colors.white,
          border: Border(
              bottom: BorderSide(
                  color:
                      theme.weakDividerColor ?? CommonColor.weakDividerColor))),
      child: InkWell(
        onTap: () async {
          showModalBottomSheet(
              isScrollControlled: true,
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(10.0),
              ),
              context: context,
              builder: (context) {
                return Container(
                  decoration: const BoxDecoration(
                      color: Colors.white,
                      borderRadius: BorderRadius.only(
                          topLeft: Radius.circular(10.0),
                          topRight: Radius.circular(10.0))),
                  child: Column(
                    mainAxisSize: MainAxisSize.min,
                    children: [
                      Container(
                        padding: const EdgeInsets.symmetric(vertical: 20),
                        child: Text(TIM_t("修改我的群昵称")),
                      ),
                      Divider(height: 2, color: theme.weakDividerColor),
                      Padding(
                        padding: const EdgeInsets.all(20),
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            TextField(
                              controller: controller,
                              decoration: InputDecoration(
                                  border: InputBorder.none,
                                  fillColor: theme.weakBackgroundColor,
                                  filled: true,
                                  isDense: true,
                                  hintText: ''),
                            ),
                            const SizedBox(
                              height: 10,
                            ),
                            Text(
                              TIM_t("仅限中文、字母、数字和下划线，2-20个字"),
                              style: TextStyle(
                                  fontSize: 13, color: theme.weakTextColor),
                              textAlign: TextAlign.left,
                            ),
                            const SizedBox(
                              height: 30,
                            ),
                            SizedBox(
                                width: double.infinity,
                                child: ElevatedButton(
                                  onPressed: () {
                                    final text = controller.text.trim();
                                    model.setNameCard(text);
                                    Navigator.pop(context);
                                  },
                                  child: Text(TIM_t("确定")),
                                )),
                            const SizedBox(
                              height: 20,
                            ),
                            Padding(
                              padding: EdgeInsets.only(
                                  bottom:
                                      MediaQuery.of(context).viewInsets.bottom),
                            )
                          ],
                        ),
                      )
                    ],
                  ),
                );
              });
        },
        child: Row(
          mainAxisAlignment: MainAxisAlignment.spaceBetween,
          children: [
            Text(
              TIM_t("我的群昵称"),
              style: TextStyle(fontSize: 16, color: theme.darkTextColor),
            ),
            Row(
              children: [
                Text(
                  nameCard,
                  style: const TextStyle(fontSize: 16, color: Colors.black),
                ),
                Icon(Icons.keyboard_arrow_right, color: theme.weakTextColor)
              ],
            )
          ],
        ),
      ),
    );
  }
}
文件：/im-flutter-uikit/package_src/tim_ui_kit/lib/ui/views/TIMUIKitGroupProfile/widgets/tim_uikit_group_notification.dart
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:tim_ui_kit/base_widgets/tim_ui_kit_state.dart';
import 'package:tencent_im_base/tencent_im_base.dart';
import 'package:tim_ui_kit/base_widgets/tim_ui_kit_statelesswidget.dart';
import 'package:tim_ui_kit/business_logic/view_models/tui_group_profile_view_model.dart';
import 'package:tim_ui_kit/ui/utils/color.dart';
import 'package:tim_ui_kit/ui/utils/tui_theme.dart';
import 'package:tim_ui_kit/ui/views/TIMUIKitGroupProfile/shared_data_widget.dart';

import 'package:tim_ui_kit/base_widgets/tim_ui_kit_base.dart';

class GroupProfileNotification extends TIMUIKitStatelessWidget {
  GroupProfileNotification({Key? key}) : super(key: key);

  @override
  Widget tuiBuild(BuildContext context, TUIKitBuildValue value) {
    final TUITheme theme = value.theme;

    final model = SharedDataWidget.of(context)?.model;
    if (model == null) {
      return Container();
    }
    return MultiProvider(
        providers: [
          ChangeNotifierProvider.value(value: model),
        ],
        builder: (context, w) {
          final notification = Provider.of<TUIGroupProfileViewModel>(context)
                  .groupInfo
                  ?.notification ??
              TIM_t("暂无群公告");
          return Container(
            padding: const EdgeInsets.only(top: 12, left: 16, bottom: 12),
            decoration: BoxDecoration(
                color: Colors.white,
                border: Border(
                    bottom: BorderSide(
                        color: theme.weakDividerColor ??
                            CommonColor.weakDividerColor))),
            child: InkWell(
              onTap: (() {
                Navigator.push(
                    context,
                    MaterialPageRoute(
                        builder: (context) => GroupProfileNotificationPage(
                            model: model, notification: notification)));
              }),
              child: Row(
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                crossAxisAlignment: CrossAxisAlignment.center,
                children: [
                  Expanded(
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Text(
                          TIM_t("群公告"),
                          style: TextStyle(
                              color: theme.darkTextColor, fontSize: 16),
                        ),
                        Text(notification,
                            overflow: TextOverflow.ellipsis,
                            softWrap: true,
                            style: TextStyle(
                                color: theme.weakTextColor, fontSize: 12)),
                      ],
                    ),
                  ),
                  Icon(Icons.keyboard_arrow_right, color: theme.weakTextColor)
                ],
              ),
            ),
          );
        });
  }
}

class GroupProfileNotificationPage extends StatefulWidget {
  final String notification;
  final TUIGroupProfileViewModel model;

  const GroupProfileNotificationPage(
      {Key? key, required this.notification, required this.model})
      : super(key: key);

  @override
  State<StatefulWidget> createState() => _GroupProfileNotificationPageState();
}

class _GroupProfileNotificationPageState
    extends TIMUIKitState<GroupProfileNotificationPage> {
  final TextEditingController _controller = TextEditingController();
  bool isUpdated = false;

  _setGroupNotification() async {
    final notification = _controller.text;
    await widget.model.setGroupNotification(notification);
    setState(() {
      isUpdated = true;
    });
  }

  @override
  void initState() {
    _controller.text = widget.notification;
    super.initState();
  }

  @override
  Widget tuiBuild(BuildContext context, TUIKitBuildValue value) {
    final TUITheme theme = value.theme;

    return Scaffold(
      appBar: AppBar(
        title: Text(
          TIM_t("群公告"),
          style: const TextStyle(color: Colors.white, fontSize: 17),
        ),
        shadowColor: theme.weakDividerColor,
        flexibleSpace: Container(
          decoration: BoxDecoration(
            gradient: LinearGradient(colors: [
              theme.lightPrimaryColor ?? CommonColor.lightPrimaryColor,
              theme.primaryColor ?? CommonColor.primaryColor
            ]),
          ),
        ),
        iconTheme: const IconThemeData(
          color: Colors.white,
        ),
        actions: [
          TextButton(
            onPressed: () {
              if (isUpdated) {
                setState(() {
                  isUpdated = false;
                });
              } else {
                _setGroupNotification();
              }
            },
            child: Text(
              isUpdated ? TIM_t("编辑") : TIM_t("完成"),
              style: const TextStyle(
                color: Colors.white,
                fontSize: 16,
              ),
            ),
          )
        ],
      ),
      body: Padding(
        padding: const EdgeInsets.symmetric(horizontal: 8.0),
        child: TextField(
            readOnly: isUpdated,
            minLines: 1,
            maxLines: 4,
            controller: _controller,
            keyboardType: TextInputType.multiline,
            autofocus: true,
            decoration: const InputDecoration(
                border: InputBorder.none,
                hintStyle: TextStyle(
                  // fontSize: 10,
                  color: Color(0xFFAEA4A3),
                ),
                hintText: '')),
      ),
    );
  }
}
文件：/im-flutter-uikit/package_src/tim_ui_kit/lib/ui/views/TIMUIKitGroupProfile/widgets/tim_uikit_group_pin_conversation.dart
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:tim_ui_kit/base_widgets/tim_ui_kit_statelesswidget.dart';
import 'package:tim_ui_kit/business_logic/view_models/tui_group_profile_view_model.dart';
import 'package:tim_ui_kit/ui/views/TIMUIKitProfile/widget/tim_uikit_operation_item.dart';

import 'package:tim_ui_kit/base_widgets/tim_ui_kit_base.dart';
import 'package:tencent_im_base/tencent_im_base.dart';

import 'package:tim_ui_kit/ui/views/TIMUIKitGroupProfile/shared_data_widget.dart';

class GroupPinConversation extends TIMUIKitStatelessWidget {
  GroupPinConversation({Key? key}) : super(key: key);

  @override
  Widget tuiBuild(BuildContext context, TUIKitBuildValue value) {
    final model = SharedDataWidget.of(context)?.model;
    return ChangeNotifierProvider.value(
        value: model,
        child: Consumer<TUIGroupProfileViewModel>(
            builder: ((context, value, child) {
          final isPined = value.conversation?.isPinned ?? false;
          return TIMUIKitOperationItem(
            operationName: TIM_t("置顶聊天"),
            type: "switch",
            operationValue: isPined,
            onSwitchChange: (value) {
              model?.pinedConversation(value);
            },
          );
        })));
  }
}
文件：/im-flutter-uikit/package_src/tim_ui_kit/lib/ui/views/TIMUIKitGroupProfile/widgets/tim_uikit_group_type.dart
import 'package:flutter/material.dart';
import 'package:tim_ui_kit/base_widgets/tim_ui_kit_statelesswidget.dart';
import 'package:tim_ui_kit/ui/utils/color.dart';
import 'package:tim_ui_kit/ui/utils/tui_theme.dart';

import 'package:tim_ui_kit/base_widgets/tim_ui_kit_base.dart';
import 'package:tencent_im_base/tencent_im_base.dart';
import 'package:tim_ui_kit/ui/views/TIMUIKitGroupProfile/shared_data_widget.dart';

class GroupProfileType extends TIMUIKitStatelessWidget {
  GroupProfileType({Key? key}) : super(key: key);

  @override
  Widget tuiBuild(BuildContext context, TUIKitBuildValue value) {
    final TUITheme theme = value.theme;

    String groupType;
    final model = SharedDataWidget.of(context)?.model;
    if (model == null) {
      return Container();
    }
    final type = model.groupInfo?.groupType;
    switch (type) {
      case GroupType.AVChatRoom:
        groupType = TIM_t("聊天室");
        break;
      case GroupType.Meeting:
        groupType = TIM_t("会议群");
        break;
      case GroupType.Public:
        groupType = TIM_t("公开群");
        break;
      case GroupType.Work:
        groupType = TIM_t("工作群");
        break;
      default:
        groupType = TIM_t("未知群");
        break;
    }

    return Container(
      padding: const EdgeInsets.symmetric(vertical: 12, horizontal: 16),
      decoration: BoxDecoration(
          color: Colors.white,
          border: Border(
              bottom: BorderSide(
                  color:
                      theme.weakDividerColor ?? CommonColor.weakDividerColor))),
      child: Row(
        mainAxisAlignment: MainAxisAlignment.spaceBetween,
        children: [
          Text(
            TIM_t("群类型"),
            style: TextStyle(fontSize: 16, color: theme.darkTextColor),
          ),
          Text(
            groupType,
            style: const TextStyle(fontSize: 16, color: Colors.black),
          )
        ],
      ),
    );
  }
}
文件：/im-flutter-uikit/package_src/tim_ui_kit/lib/ui/views/TIMUIKitNewContact/tim_uikit_new_contact.dart
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:tim_ui_kit/base_widgets/tim_ui_kit_state.dart';
import 'package:tim_ui_kit/business_logic/life_cycle/new_contact_life_cycle.dart';
import 'package:tim_ui_kit/business_logic/view_models/tui_new_contact_view_model.dart';
import 'package:tim_ui_kit/business_logic/view_models/tui_theme_view_model.dart';
import 'package:tim_ui_kit/data_services/services_locatar.dart';
import 'package:tim_ui_kit/ui/utils/color.dart';
import 'package:tencent_im_base/tencent_im_base.dart';

import 'package:tim_ui_kit/base_widgets/tim_ui_kit_base.dart';
import 'package:tim_ui_kit/ui/widgets/avatar.dart';

typedef NewContactItemBuilder = Widget Function(
    BuildContext context, V2TimFriendApplication applicationInfo);

class TIMUIKitNewContact extends StatefulWidget {
  /// the callback when accept friend request
  final void Function(V2TimFriendApplication applicationInfo)? onAccept;

  /// the callback when reject friend request
  final void Function(V2TimFriendApplication applicationInfo)? onRefuse;

  /// the widget builder when no friend request exists
  final Widget Function(BuildContext context)? emptyBuilder;

  /// the builder for the request item
  final NewContactItemBuilder? itemBuilder;

  /// the life cycle hooks for new contact business logic
  final NewContactLifeCycle? lifeCycle;

  const TIMUIKitNewContact(
      {Key? key,
      this.lifeCycle,
      this.onAccept,
      this.onRefuse,
      this.emptyBuilder,
      this.itemBuilder})
      : super(key: key);

  @override
  State<StatefulWidget> createState() => _TIMUIKitNewContactState();
}

class _TIMUIKitNewContactState extends TIMUIKitState<TIMUIKitNewContact> {
  late TUINewContactViewModel model = serviceLocator<TUINewContactViewModel>();

  _getShowName(V2TimFriendApplication item) {
    final nickName = item.nickname ?? "";
    final userID = item.userID;
    return nickName != "" ? nickName : userID;
  }

  Widget _itemBuilder(
      BuildContext context, V2TimFriendApplication applicationInfo) {
    final theme = Provider.of<TUIThemeViewModel>(context).theme;
    final showName = _getShowName(applicationInfo);
    final faceUrl = applicationInfo.faceUrl ?? "";
    return Container(
      padding: const EdgeInsets.only(top: 10, left: 16),
      child: Row(
        children: [
          Container(
            padding: const EdgeInsets.only(bottom: 12),
            margin: const EdgeInsets.only(right: 12),
            child: SizedBox(
              height: 40,
              width: 40,
              child: Avatar(faceUrl: faceUrl, showName: showName),
            ),
          ),
          Expanded(
              child: Container(
            padding: const EdgeInsets.only(top: 10, bottom: 20),
            decoration: BoxDecoration(
                border: Border(
                    bottom: BorderSide(
                        color: theme.weakDividerColor ??
                            CommonColor.weakDividerColor))),
            child: Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                Text(
                  showName,
                  style: const TextStyle(color: Colors.black, fontSize: 18),
                ),
                Expanded(child: Container()),
                Container(
                  margin: const EdgeInsets.only(right: 8),
                  child: InkWell(
                    child: Container(
                      padding: const EdgeInsets.symmetric(
                          horizontal: 14, vertical: 6),
                      decoration: BoxDecoration(
                          borderRadius: BorderRadius.circular(8),
                          color: theme.primaryColor,
                          border: Border.all(
                              width: 1,
                              color: theme.weakTextColor ??
                                  CommonColor.weakTextColor)),
                      child: Text(
                        TIM_t("同意"),
                        style: const TextStyle(
                          color: Colors.white,
                        ),
                      ),
                    ),
                    onTap: () async {
                      await model.acceptFriendApplication(
                        applicationInfo.userID,
                        applicationInfo.type,
                      );
                      model.loadData();
                      // widget?.onAccept();
                    },
                  ),
                ),
                Container(
                    margin: const EdgeInsets.only(right: 8),
                    child: InkWell(
                      child: Container(
                        decoration: BoxDecoration(
                            borderRadius: BorderRadius.circular(8),
                            color: Colors.white,
                            border: Border.all(
                                width: 1,
                                color: theme.weakTextColor ??
                                    CommonColor.weakTextColor)),
                        padding: const EdgeInsets.symmetric(
                            horizontal: 14, vertical: 6),
                        child: Text(
                          TIM_t("拒绝"),
                          style: TextStyle(
                            color: theme.primaryColor,
                          ),
                        ),
                      ),
                      onTap: () async {
                        await model.refuseFriendApplication(
                          applicationInfo.userID,
                          applicationInfo.type,
                        );
                        model.loadData();
                        // refuse(context);
                      },
                    ))
              ],
            ),
          ))
        ],
      ),
    );
  }

  NewContactItemBuilder _getItemBuilder() {
    return widget.itemBuilder ?? _itemBuilder;
  }

  @override
  void initState() {
    super.initState();
    model.loadData();
  }

  @override
  Widget tuiBuild(BuildContext context, TUIKitBuildValue value) {
    return MultiProvider(
        providers: [
          ChangeNotifierProvider.value(value: model),
        ],
        builder: (BuildContext context, Widget? w) {
          final model = Provider.of<TUINewContactViewModel>(context);
          model.lifeCycle = widget.lifeCycle;
          final newContactList = model.friendApplicationList;
          if (newContactList != null && newContactList.isNotEmpty) {
            return ListView.builder(
              itemCount: newContactList.length,
              itemBuilder: (context, index) {
                final friendInfo = newContactList[index]!;
                final itemBuilder = _getItemBuilder();
                return itemBuilder(context, friendInfo);
              },
            );
          }

          if (widget.emptyBuilder != null) {
            return widget.emptyBuilder!(context);
          }

          return Container();
        });
  }
}
文件：/im-flutter-uikit/package_src/tim_ui_kit/lib/ui/views/TIMUIKitNewContact/tim_uikit_unread_count.dart
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:tim_ui_kit/base_widgets/tim_ui_kit_state.dart';
import 'package:tim_ui_kit/business_logic/view_models/tui_new_contact_view_model.dart';
import 'package:tim_ui_kit/data_services/services_locatar.dart';
import 'package:tim_ui_kit/base_widgets/tim_ui_kit_base.dart';
import 'package:tim_ui_kit/ui/widgets/unread_message.dart';

class TIMUIKitUnreadCount extends StatefulWidget {
  final double width;
  final double height;

  const TIMUIKitUnreadCount({Key? key, this.width = 22.0, this.height = 22.0})
      : super(key: key);

  @override
  State<StatefulWidget> createState() => _TIMUIKitUnreadCountState();
}

class _TIMUIKitUnreadCountState extends TIMUIKitState<TIMUIKitUnreadCount> {
  final TUINewContactViewModel model = serviceLocator<TUINewContactViewModel>();

  @override
  void initState() {
    model.setFriendshipListener();
    super.initState();
  }

  @override
  void dispose() {
    super.dispose();
    model.removeFriendShipListener();
  }

  @override
  Widget tuiBuild(BuildContext context, TUIKitBuildValue value) {
    return ChangeNotifierProvider.value(
        value: model,
        child:
            Consumer<TUINewContactViewModel>(builder: (context, value, child) {
          final unreadCount = value.unreadCount;
          if (unreadCount > 0) {
            return UnreadMessage(
                width: widget.width,
                height: widget.height,
                unreadCount: unreadCount);
          }
          return Container();
        }));
  }
}
文件：/im-flutter-uikit/package_src/tim_ui_kit/lib/ui/views/TIMUIKitProfile/profile_widget.dart
import 'package:flutter/cupertino.dart';
import 'package:tencent_im_base/tencent_im_base.dart';

enum ProfileWidgetEnum {
  /// THe card shows the user info of a specific user.
  userInfoCard,

  /// The switch of if add another user to block list.
  /// This will not shows when friendship relation not exist as default.
  addToBlockListBar,

  /// The switch of if pin the one-to-one conversation to the top of the conversation list.
  /// This will not shows when friendship relation not exist as default.
  pinConversationBar,

  /// The switch of if mute the message notification from a specific user.
  /// This will not shows when friendship relation not exist as default.
  messageMute,

  /// The entrance to search page, please set the `onTap` callback yourself, to the search page with conversation ID.
  /// You can develop it with `TIMUIKitProfileWidget.searchBar`.
  searchBar,

  /// The bar shows the portrait.
  portraitBar,

  /// The bar shows the nickname of a specific user.
  nicknameBar,

  /// The bar shows the user account of a specific user.
  userAccountBar,

  /// The bar shows the signature of a specific user.
  signatureBar,

  /// The bar shows the gender of a specific user.
  /// 1 represent male, 2 represent female.
  genderBar,

  /// The bar shows the birthday of a specific user.
  /// Int like "19981112", means November 12, 1998.
  birthdayBar,

  /// The area shows the buttons,
  /// contains "Send message", "Voice/Video Call", "Delete friend" when has the friend relationship,
  /// while contains "Add friend" when no relationship exists, as default.
  addAndDeleteArea,

  /// The divider between sets of profile widget
  operationDivider,

  /// The setting of remark for a specific user.
  /// This will not shows when friendship relation not exist as default.
  remarkBar,

  /// Custom area, you may define send message, make calling, search or anything you want here.
  customBuilderOne,

  /// Custom area, you may define send message, make calling, search or anything you want here.
  customBuilderTwo,

  /// Custom area, you may define send message, make calling, search or anything you want here.
  customBuilderThree,

  /// Custom area, you may define send message, make calling, search or anything you want here.
  customBuilderFour,

  /// Custom area, you may define send message, make calling, search or anything you want here.
  customBuilderFive
}

typedef ProfileWidgetItemContent = Widget? Function(
  bool isShowJump,
  VoidCallback clearJump,
);

class ProfileWidgetBuilder {
  /// The divider between sets of profile widget
  Widget Function()? operationDivider;

  /// The setting of remark for a specific user
  Widget Function(String remark, Function()? handleTap)? remarkBar;

  /// The switch of if add another user to block list.
  /// This will not shows when friendship relation not exist as default.
  Widget Function(bool isAsBlocked, Function(bool value)? onChange)?
      addToBlockListBar;

  /// The switch of if pin the one-to-one conversation to the top of the conversation list.
  /// This will not shows when friendship relation not exist as default.
  Widget Function(bool isPinned, Function(bool value)? onChange)?
      pinConversationBar;

  /// The switch of if mute the message notification from a specific user.
  /// This will not shows when friendship relation not exist as default.
  Widget Function(bool isMute, Function(bool value)? onChange)? messageMute;

  /// Override the default operation item style for un-customized profile widget.
  Widget Function({
    required String operationName,
    required String type,
    bool? operationValue,
    String? operationText,
    void Function(bool newValue)? onSwitchChange,
  })? operationItem;

  /// The entrance to search page, please set the `onTap` callback yourself, to the search page with conversation ID.
  /// You can develop it with `TIMUIKitProfileWidget.searchBar`.
  Widget Function(V2TimConversation conversation)? searchBar;

  /// The bar shows the portrait.
  Widget Function(V2TimUserFullInfo userInfo)? portraitBar;

  /// The bar shows the nickname of a specific user.
  Widget Function(String nickName)? nicknameBar;

  /// The bar shows the user account of a specific user.
  Widget Function(String userAccount)? userAccountBar;

  /// The bar shows the signature of a specific user.
  Widget Function(String signature)? signatureBar;

  /// The bar shows the gender of a specific user.
  /// 1 represent male, 2 represent female.
  Widget Function(int gender)? genderBar;

  /// The bar shows the birthday of a specific user.
  /// Int like "19981111", means November 11, 1998.
  Widget Function(int? birthday)? birthdayBar;

  /// THe card shows the user info of a specific user.
  Widget Function(V2TimUserFullInfo userInfo)? userInfoCard;

  /// The area shows the buttons,
  /// contains "Send message", "Voice/Video Call", "Delete friend" when has the friend relationship,
  /// while contains "Add friend" when no relationship exists, as default.
  Widget Function(V2TimFriendInfo friendInfo, V2TimConversation conversation,
      int friendType, bool isDisturb)? addAndDeleteArea;

  /// Custom area, you may define send message, make calling, search or anything you want here.
  Widget Function(bool isFriend, V2TimFriendInfo friendInfo,
      V2TimConversation conversation)? customBuilderOne;

  /// Custom area, you may define send message, make calling, search or anything you want here.
  Widget Function(bool isFriend, V2TimFriendInfo friendInfo,
      V2TimConversation conversation)? customBuilderTwo;

  /// Custom area, you may define send message, make calling, search or anything you want here.
  Widget Function(bool isFriend, V2TimFriendInfo friendInfo,
      V2TimConversation conversation)? customBuilderThree;

  /// Custom area, you may define send message, make calling, search or anything you want here.
  Widget Function(bool isFriend, V2TimFriendInfo friendInfo,
      V2TimConversation conversation)? customBuilderFour;

  /// Custom area, you may define send message, make calling, search or anything you want here.
  Widget Function(bool isFriend, V2TimFriendInfo friendInfo,
      V2TimConversation conversation)? customBuilderFive;

  ProfileWidgetBuilder(
      {this.operationDivider,
      this.remarkBar,
      this.addToBlockListBar,
      this.pinConversationBar,
      this.messageMute,
      this.operationItem,
      this.searchBar,
      this.portraitBar,
      this.nicknameBar,
      this.userAccountBar,
      this.signatureBar,
      this.genderBar,
      this.birthdayBar,
      this.userInfoCard,
      this.addAndDeleteArea,
      this.customBuilderOne,
      this.customBuilderTwo,
      this.customBuilderThree,
      this.customBuilderFive,
      this.customBuilderFour});
}
文件：/im-flutter-uikit/package_src/tim_ui_kit/lib/ui/views/TIMUIKitProfile/tim_uikit_profile.dart
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:tim_ui_kit/base_widgets/tim_ui_kit_state.dart';
import 'package:tim_ui_kit/business_logic/life_cycle/profile_life_cycle.dart';
import 'package:tim_ui_kit/business_logic/view_models/tui_profile_view_model.dart';
import 'package:tim_ui_kit/tim_ui_kit.dart';

import 'package:tim_ui_kit/base_widgets/tim_ui_kit_base.dart';
import 'package:tim_ui_kit/ui/views/TIMUIKitProfile/profile_widget.dart';
import 'package:tim_ui_kit/ui/views/TIMUIKitProfile/widget/tim_uikit_profile_widget.dart';

typedef OnSelfAvatarTap = void Function();

typedef ProfileBuilder = Widget Function(
    BuildContext context,
    V2TimFriendInfo friendInfo,
    V2TimConversation conversation,
    int friendType,
    bool isMute);

class TIMUIKitProfile extends StatefulWidget {
  /// user ID
  final String userID;

  /// [Deprecated:] the builder for custom operation list.
  /// [operationListBuilder] and [bottomOperationBuilder] merged into [builder], please use it instead.
  final Widget Function(
      BuildContext context,
      V2TimFriendInfo friendInfo,
      V2TimConversation conversation,
      int friendType,
      bool isMute)? operationListBuilder;

  /// [Deprecated:] The builder for custom bottom operation area.
  /// [operationListBuilder] and [bottomOperationBuilder] merged into [builder], please use it instead.
  final Widget Function(BuildContext context, V2TimFriendInfo? friendInfo,
      V2TimConversation? conversation, int friendType)? bottomOperationBuilder;

  /// [Deprecated:] Callback when clicking profile detail card.
  /// This widget will no longer shows the personal info card and can not jump to personal info page automatically,
  /// please navigate to [TIMUIKitProfilePersonalInfo] or your custom personal info page manually and directly.
  final void Function(BuildContext context, V2TimUserFullInfo? userFullInfo)?
      handleProfileDetailCardTap;

  /// Profile Controller
  final TIMUIKitProfileController? controller;

  /// [Deprecated:] If allows jump to personal profiler page.
  /// This widget will no longer shows the personal info card and can not jump to personal info page automatically,
  /// please navigate to [TIMUIKitProfilePersonalInfo] or your custom personal info page manually and directly.
  final bool canJumpToPersonalProfile;

  /// [Deprecated:] The callback when clicking self avatar.
  /// This widget will no longer shows the personal info card and will not support to change self avatar,
  /// you can use [TIMUIKitProfilePersonalInfo] or your custom personal info page to implement this function.
  final OnSelfAvatarTap? onSelfAvatarTap;

  /// [If you tend to customize the profile page, use [profileWidgetsBuilder] with [profileWidgetsOrder] as priority.]
  /// The builder for each widgets in profile page,
  /// you can customize some of it by pass your own widget into here.
  /// Or, you can add your custom widget to the three custom widgets.
  final ProfileWidgetBuilder? profileWidgetBuilder;

  /// [If you tend to customize the profile page, use [profileWidgetsBuilder] with [profileWidgetsOrder] as priority.]
  /// If the default widget order can not meet you needs,
  /// you may change the order by this array with widget enum.
  final List<ProfileWidgetEnum>? profileWidgetsOrder;

  /// The builder for the whole profile page, you can use this to customize all the element here.
  /// Mentioned: If you use this builder, [profileWidgetBuilder] and [profileWidgetsOrder] will no longer works.
  final ProfileBuilder? builder;

  /// The life cycle hooks for user profile business logic
  final ProfileLifeCycle? lifeCycle;

  const TIMUIKitProfile(
      {Key? key,
      required this.userID,
      @Deprecated("[operationListBuilder] and [bottomOperationBuilder] merged into [builder], please use it instead")
          this.operationListBuilder,
      @Deprecated("[operationListBuilder] and [bottomOperationBuilder] merged into [builder], please use it instead")
          this.bottomOperationBuilder,
      @Deprecated("This widget will no longer shows the personal info card and can not jump to personal info page automatically, please navigate to [TIMUIKitProfilePersonalInfo] or your custom personal info page manually and directly")
          this.handleProfileDetailCardTap,
      @Deprecated("This widget will no longer shows the personal info card and can not jump to personal info page automatically, please navigate to [TIMUIKitProfilePersonalInfo] or your custom personal info page manually and directly")
          this.canJumpToPersonalProfile = false,
      @Deprecated("This widget will no longer shows the personal info card and will not support to change self avatar, you can use [TIMUIKitProfilePersonalInfo] or your custom personal info page to implement this function")
          this.onSelfAvatarTap,
      this.controller,
      this.profileWidgetBuilder,
      this.profileWidgetsOrder,
      this.builder,
      this.lifeCycle})
      : super(key: key);

  @override
  State<StatefulWidget> createState() => _TIMUIKitProfileState();
}

class _TIMUIKitProfileState extends TIMUIKitState<TIMUIKitProfile> {
  late TUIProfileViewModel _model;
  late TIMUIKitProfileController _controller;

  @override
  void initState() {
    _controller = widget.controller ?? TIMUIKitProfileController();
    _model = _controller.model;
    _controller.loadData(widget.userID);
    super.initState();
  }

  @override
  void dispose() {
    _controller.dispose();
    super.dispose();
  }

  final List<ProfileWidgetEnum> _defaultWidgetOrder = [
    ProfileWidgetEnum.userInfoCard,
    ProfileWidgetEnum.operationDivider,
    ProfileWidgetEnum.remarkBar,
    ProfileWidgetEnum.operationDivider,
    ProfileWidgetEnum.addToBlockListBar,
    ProfileWidgetEnum.pinConversationBar,
    ProfileWidgetEnum.messageMute,
    ProfileWidgetEnum.operationDivider,
    ProfileWidgetEnum.addAndDeleteArea
  ];

  @override
  Widget tuiBuild(BuildContext context, TUIKitBuildValue value) {
    final theme = value.theme;
    return ChangeNotifierProvider.value(
      value: _model,
      child: Consumer<TUIProfileViewModel>(
        builder: (context, value, child) {
          final userInfo = value.userProfile?.friendInfo ??
              V2TimFriendInfo(userID: widget.userID);
          final conversation = value.userProfile?.conversation ??
              V2TimConversation(conversationID: "c2c_${widget.userID}");
          final isFriend = value.friendType != 0;
          final isMute = value.isDisturb ?? false;
          Widget profilePage({required Widget child}) {
            return SingleChildScrollView(
              physics: const BouncingScrollPhysics(
                  parent: AlwaysScrollableScrollPhysics()),
              child: Container(
                child: child,
              ),
            );
          }

          void handleAddToBlockList(bool value) async {
            _model.addToBlackList(value, userInfo.userID);
          }

          void handlePinConversation(bool value) async {
            _model.pinedConversation(value, conversation.conversationID);
          }

          void handleMuteMessage(bool value) async {
            _model.setMessageDisturb(userInfo.userID, value);
          }

          void handleTapRemarkBar() {
            _controller.showTextInputBottomSheet(
                context, TIM_t("修改备注名"), TIM_t("仅限中字、字母、数字和下划线"),
                (String remark) {
              _controller.updateRemarks(widget.userID, remark);
            });
          }

          void handleAddFriend() async {
            _model.addFriend(userInfo.userID).then((res) {
              if (res == null) {
                throw Error();
              }
              if (res.resultCode == 0) {
                onTIMCallback(TIMCallback(
                    type: TIMCallbackType.INFO,
                    infoRecommendText: TIM_t("好友添加成功"),
                    infoCode: 6661202));
              } else if (res.resultCode == 30539) {
                onTIMCallback(TIMCallback(
                    type: TIMCallbackType.INFO,
                    infoRecommendText: TIM_t("好友申请已发出"),
                    infoCode: 6661203));
              } else if (res.resultCode == 30515) {
                onTIMCallback(TIMCallback(
                    type: TIMCallbackType.INFO,
                    infoRecommendText: TIM_t("当前用户在黑名单"),
                    infoCode: 6661204));
              }
            }).catchError((error) {
              onTIMCallback(TIMCallback(
                  type: TIMCallbackType.INFO,
                  infoRecommendText: TIM_t("好友添加失败"),
                  infoCode: 6661205));
            });
          }

          void handleDeleteFriend() {
            _model.deleteFriend(userInfo.userID).then((res) {
              if (res == null) {
                throw Error();
              }
              if (res.resultCode == 0) {
                onTIMCallback(TIMCallback(
                    type: TIMCallbackType.INFO,
                    infoRecommendText: TIM_t("好友删除成功"),
                    infoCode: 6661206));
              } else {
                throw Error();
              }
            }).catchError((error) {
              onTIMCallback(TIMCallback(
                  type: TIMCallbackType.INFO,
                  infoRecommendText: TIM_t("好友删除失败"),
                  infoCode: 6661207));
            });
          }

          List<Widget> _renderWidgetsWithOrder(List<ProfileWidgetEnum> order) {
            final ProfileWidgetBuilder? customBuilder =
                widget.profileWidgetBuilder;
            return order.map((element) {
              switch (element) {
                case ProfileWidgetEnum.userInfoCard:
                  return (customBuilder?.userInfoCard != null
                      ? customBuilder?.userInfoCard!(userInfo.userProfile!)
                      : TIMUIKitProfileUserInfoCard(
                          userInfo: userInfo.userProfile))!;
                case ProfileWidgetEnum.addToBlockListBar:
                  if (!isFriend) {
                    return Container();
                  }
                  return (customBuilder?.addToBlockListBar != null
                      ? customBuilder?.addToBlockListBar!(
                          _model.isAddToBlackList ?? false,
                          handleAddToBlockList)
                      : TIMUIKitProfileWidget.addToBlackListBar(
                          _model.isAddToBlackList ?? false,
                          context,
                          handleAddToBlockList,
                        ))!;
                case ProfileWidgetEnum.pinConversationBar:
                  if (!isFriend) {
                    return Container();
                  }
                  return (customBuilder?.pinConversationBar != null
                      ? customBuilder?.pinConversationBar!(
                          conversation.isPinned ?? false, handlePinConversation)
                      : TIMUIKitProfileWidget.pinConversationBar(
                          conversation.isPinned ?? false,
                          context,
                          handlePinConversation))!;
                case ProfileWidgetEnum.messageMute:
                  if (!isFriend) {
                    return Container();
                  }
                  return (customBuilder?.messageMute != null
                      ? customBuilder?.messageMute!(isMute, handleMuteMessage)
                      : TIMUIKitProfileWidget.messageDisturb(
                          context, isMute, handleMuteMessage))!;
                case ProfileWidgetEnum.searchBar:
                  return (customBuilder?.searchBar != null
                      ? customBuilder?.searchBar!(conversation)
                      // Please define the search bar with navigating in `profileWidgetBuilder` before using it here.
                      : Text(TIM_t("你必须自定义search bar，并处理点击跳转")))!;
                case ProfileWidgetEnum.portraitBar:
                  return (customBuilder?.portraitBar != null
                      ? customBuilder?.portraitBar!(userInfo.userProfile!)
                      : TIMUIKitProfileWidget.portraitBar(
                          TIMUIKitProfileWidget.defaultPortraitWidget(
                              userInfo.userProfile!)))!;
                case ProfileWidgetEnum.nicknameBar:
                  return (customBuilder?.nicknameBar != null
                      ? customBuilder
                          ?.nicknameBar!(userInfo.userProfile?.nickName ?? "")
                      : TIMUIKitProfileWidget.nicknameBar(
                          userInfo.userProfile?.nickName ?? ""))!;
                case ProfileWidgetEnum.userAccountBar:
                  return (customBuilder?.nicknameBar != null
                      ? customBuilder
                          ?.nicknameBar!(userInfo.userProfile?.userID ?? "")
                      : TIMUIKitProfileWidget.nicknameBar(
                          userInfo.userProfile?.userID ?? ""))!;
                case ProfileWidgetEnum.signatureBar:
                  return (customBuilder?.signatureBar != null
                      ? customBuilder?.signatureBar!(
                          userInfo.userProfile?.selfSignature ?? "")
                      : TIMUIKitProfileWidget.signatureBar(
                          userInfo.userProfile?.selfSignature ?? ""))!;
                case ProfileWidgetEnum.genderBar:
                  return (customBuilder?.genderBar != null
                      ? customBuilder
                          ?.genderBar!(userInfo.userProfile?.gender ?? 0)
                      : TIMUIKitProfileWidget.genderBar(
                          userInfo.userProfile?.gender ?? 0))!;
                case ProfileWidgetEnum.birthdayBar:
                  return (customBuilder?.birthdayBar != null
                      ? customBuilder
                          ?.birthdayBar!(userInfo.userProfile?.birthday)
                      : TIMUIKitProfileWidget.birthdayBar(
                          userInfo.userProfile?.birthday))!;
                case ProfileWidgetEnum.addAndDeleteArea:
                  return (customBuilder?.addAndDeleteArea != null
                      ? customBuilder?.addAndDeleteArea!(
                          userInfo,
                          conversation,
                          value.friendType,
                          isMute,
                        )
                      : TIMUIKitProfileWidget.addAndDeleteArea(
                          userInfo,
                          conversation,
                          value.friendType,
                          isMute,
                          theme,
                          handleAddFriend,
                          handleDeleteFriend))!;
                case ProfileWidgetEnum.operationDivider:
                  return (customBuilder?.operationDivider != null
                      ? customBuilder?.operationDivider!()
                      : TIMUIKitProfileWidget.operationDivider())!;
                case ProfileWidgetEnum.remarkBar:
                  if (!isFriend) {
                    return Container();
                  }
                  return (customBuilder?.remarkBar != null
                      ? customBuilder?.remarkBar!(
                          userInfo.friendRemark ?? "", handleTapRemarkBar)
                      : TIMUIKitProfileWidget.remarkBar(
                          userInfo.friendRemark ?? "", handleTapRemarkBar))!;
                case ProfileWidgetEnum.customBuilderOne:
                  return (customBuilder?.customBuilderOne != null
                      ? customBuilder?.customBuilderOne!(
                          isFriend, userInfo, conversation)
                      // Please define the corresponding custom widget in `profileWidgetBuilder` before using it here.
                      : Text(TIM_t("如使用自定义区域，请在profileWidgetBuilder传入对应组件")))!;
                case ProfileWidgetEnum.customBuilderTwo:
                  return (customBuilder?.customBuilderTwo != null
                      ? customBuilder?.customBuilderTwo!(
                          isFriend, userInfo, conversation)
                      // Please define the corresponding custom widget in `profileWidgetBuilder` before using it here.
                      : Text(TIM_t("如使用自定义区域，请在profileWidgetBuilder传入对应组件")))!;
                case ProfileWidgetEnum.customBuilderThree:
                  return (customBuilder?.customBuilderThree != null
                      ? customBuilder?.customBuilderThree!(
                          isFriend, userInfo, conversation)
                      // Please define the corresponding custom widget in `profileWidgetBuilder` before using it here.
                      : Text(TIM_t("如使用自定义区域，请在profileWidgetBuilder传入对应组件")))!;
                case ProfileWidgetEnum.customBuilderFour:
                  return (customBuilder?.customBuilderFour != null
                      ? customBuilder?.customBuilderFour!(
                          isFriend, userInfo, conversation)
                      // Please define the corresponding custom widget in `profileWidgetBuilder` before using it here.
                      : Text(TIM_t("如使用自定义区域，请在profileWidgetBuilder传入对应组件")))!;
                case ProfileWidgetEnum.customBuilderFive:
                  return (customBuilder?.customBuilderFive != null
                      ? customBuilder?.customBuilderFive!(
                          isFriend, userInfo, conversation)
                      // Please define the corresponding custom widget in `profileWidgetBuilder` before using it here.
                      : Text(TIM_t("如使用自定义区域，请在profileWidgetBuilder传入对应组件")))!;

                default:
                  return Container();
              }
            }).toList();
          }

          if (widget.builder != null) {
            return profilePage(
              child: widget.builder!(
                  context, userInfo, conversation, value.friendType, isMute),
            );
          } else if (widget.profileWidgetsOrder != null) {
            return profilePage(
              child: Column(
                children: [
                  ..._renderWidgetsWithOrder(widget.profileWidgetsOrder!)
                ],
              ),
            );
          } else {
            return profilePage(
                child: Column(
              children: [..._renderWidgetsWithOrder(_defaultWidgetOrder)],
            ));
          }
        },
      ),
    );
  }
}
文件：/im-flutter-uikit/package_src/tim_ui_kit/lib/ui/views/TIMUIKitProfile/widget/tim_uikit_operation_item.dart
import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:tim_ui_kit/base_widgets/tim_ui_kit_statelesswidget.dart';
import 'package:tim_ui_kit/ui/utils/tui_theme.dart';
import 'package:tim_ui_kit/base_widgets/tim_ui_kit_base.dart';

class TIMUIKitOperationItem extends TIMUIKitStatelessWidget {
  final String operationName;
  final bool? operationValue;
  final bool isRightIcon;

  /// if allow to show arrow to right
  final bool showArrowRightIcon;

  /// the operationText widget for replacement, for developers to define what to do
  final Widget? operationRightWidget;
  final String type;
  final void Function(bool newValue)? onSwitchChange;

  TIMUIKitOperationItem(
      {Key? key,
      required this.operationName,
      this.operationValue,
      this.type = "arrow",
      this.onSwitchChange,
      this.operationRightWidget,
      this.showArrowRightIcon = true,
      this.isRightIcon = true})
      : super(key: key);

  @override
  Widget tuiBuild(BuildContext context, TUIKitBuildValue value) {
    final TUITheme theme = value.theme;

    return Container(
      padding: const EdgeInsets.symmetric(vertical: 12, horizontal: 16),
      margin: const EdgeInsets.only(bottom: 1),
      color: Colors.white,
      child: Row(
        mainAxisAlignment: MainAxisAlignment.spaceBetween,
        children: [
          Text(operationName),
          type == "switch"
              ? CupertinoSwitch(
                  value: operationValue ?? false,
                  onChanged: onSwitchChange,
                  activeColor: theme.primaryColor,
                )
              : Row(
                  mainAxisAlignment: MainAxisAlignment.end,
                  children: [
                    ConstrainedBox(
                      constraints: BoxConstraints(
                        maxWidth: MediaQuery.of(context).size.width / 1.6,
                      ),
                      child: operationRightWidget ?? const Text(""),
                    ),
                    isRightIcon
                        ? showArrowRightIcon
                            ? const Icon(Icons.keyboard_arrow_right)
                            : Container(
                                width: 10,
                              )
                        : Container(),
                  ],
                ),
        ],
      ),
    );
  }
}
文件：/im-flutter-uikit/package_src/tim_ui_kit/lib/ui/views/TIMUIKitProfile/widget/tim_uikit_profile_userinfo_card.dart
import 'package:flutter/material.dart';
import 'package:tencent_im_base/tencent_im_base.dart';
import 'package:tim_ui_kit/base_widgets/tim_ui_kit_base.dart';
import 'package:tim_ui_kit/base_widgets/tim_ui_kit_statelesswidget.dart';
import 'package:tim_ui_kit/ui/utils/tui_theme.dart';
import 'package:tim_ui_kit/ui/widgets/avatar.dart';

class TIMUIKitProfileUserInfoCard extends TIMUIKitStatelessWidget {
  /// User info
  final V2TimUserFullInfo? userInfo;
  final bool isJumpToPersonalProfile;

  /// If shows the arrow icon on the right
  final bool showArrowRightIcon;

  TIMUIKitProfileUserInfoCard(
      {Key? key,
      this.userInfo,
      @Deprecated("This info card can no longer navigate to default personal profile page automatically, please deal with it manually.")
          this.isJumpToPersonalProfile = false,
      this.showArrowRightIcon = false})
      : super(key: key);

  @override
  Widget tuiBuild(BuildContext context, TUIKitBuildValue value) {
    final TUITheme theme = value.theme;

    final faceUrl = userInfo?.faceUrl ?? "";
    final nickName = userInfo?.nickName ?? "";
    final signature = userInfo?.selfSignature;
    final showName = nickName != "" ? nickName : userInfo?.userID;
    final option1 = signature;
    final signatureText = option1 != null
        ? TIM_t_para("个性签名: {{option1}}", "个性签名: $option1")(option1: option1)
        : TIM_t("暂无个性签名");

    return Container(
      padding: const EdgeInsets.symmetric(vertical: 12, horizontal: 16),
      color: Colors.white,
      child: Row(
        crossAxisAlignment: CrossAxisAlignment.center,
        mainAxisAlignment: MainAxisAlignment.spaceBetween,
        children: [
          SizedBox(
            width: 48,
            height: 48,
            child: Avatar(faceUrl: faceUrl, showName: showName ?? ""),
          ),
          const SizedBox(
            width: 12,
          ),
          Expanded(
            child: Column(
              mainAxisAlignment: MainAxisAlignment.start,
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                SizedBox(
                  child: Text(
                    showName ?? "",
                    style: const TextStyle(fontSize: 18, color: Colors.black),
                    softWrap: true,
                  ),
                ),
                Container(
                  margin: const EdgeInsets.symmetric(vertical: 4),
                  child: Text(
                    "ID:  ${userInfo?.userID ?? ""}",
                    style: TextStyle(fontSize: 13, color: theme.weakTextColor),
                  ),
                ),
                Text(signatureText,
                    style: TextStyle(fontSize: 13, color: theme.weakTextColor))
              ],
            ),
          ),
          showArrowRightIcon
              ? const Icon(Icons.keyboard_arrow_right)
              : Container()
        ],
      ),
    );
  }
}
文件：/im-flutter-uikit/package_src/tim_ui_kit/lib/ui/views/TIMUIKitProfile/widget/tim_uikit_profile_widget.dart
import 'package:flutter/material.dart';
import 'package:intl/intl.dart';
import 'package:tim_ui_kit/base_widgets/tim_ui_kit_class.dart';
import 'package:tim_ui_kit/tim_ui_kit.dart';
import 'package:tim_ui_kit/ui/utils/color.dart';
import 'package:tim_ui_kit/ui/widgets/avatar.dart';

class TIMUIKitProfileWidget extends TIMUIKitClass {
  static Widget operationDivider() {
    return const SizedBox(
      height: 10,
    );
  }

  /// Remarks
  static Widget remarkBar(String remark, Function()? handleTap) {
    return InkWell(
      onTap: () {
        if (handleTap != null) {
          handleTap();
        }
      },
      child: TIMUIKitOperationItem(
        operationName: TIM_t("备注名"),
        operationRightWidget: Text(remark),
      ),
    );
  }

  /// add to block list
  static Widget addToBlackListBar(
      bool value, BuildContext context, Function(bool value)? onChanged) {
    return TIMUIKitOperationItem(
      operationName: TIM_t("加入黑名单"),
      type: "switch",
      operationValue: value,
      onSwitchChange: (value) {
        if (onChanged != null) {
          onChanged(value);
        }
      },
    );
  }

  /// pin the conversation to the top
  static Widget pinConversationBar(
      bool value, BuildContext context, Function(bool value)? onChanged) {
    return TIMUIKitOperationItem(
      operationName: TIM_t("置顶聊天"),
      type: "switch",
      operationValue: value,
      onSwitchChange: (value) {
        if (onChanged != null) {
          onChanged(value);
        }
      },
    );
  }

  /// message disturb
  static Widget messageDisturb(
      BuildContext context, bool isDisturb, Function(bool value)? onChanged) {
    return TIMUIKitOperationItem(
      operationName: TIM_t("消息免打扰"),
      type: "switch",
      operationValue: isDisturb,
      onSwitchChange: (value) {
        if (onChanged != null) {
          onChanged(value);
        }
      },
    );
  }

  static Widget operationItem({
    required String operationName,
    required String type,
    bool? operationValue,
    String? operationText,
    void Function(bool newValue)? onSwitchChange,
  }) {
    return TIMUIKitOperationItem(
      operationName: operationName,
      type: type,
      operationRightWidget: Text(operationText ?? ""),
      operationValue: operationValue,
      onSwitchChange: onSwitchChange,
    );
  }

  /// find history message
  static Widget searchBar(BuildContext context, V2TimConversation conversation,
      {Function()? handleTap}) {
    return InkWell(
      onTap: () {
        if (handleTap != null) {
          handleTap();
        }
      },
      child: TIMUIKitOperationItem(
        operationName: TIM_t("查找聊天内容"),
      ),
    );
  }

  /// portrait
  static Widget portraitBar(Widget portraitWidget) {
    return SizedBox(
      child: TIMUIKitOperationItem(
        operationName: TIM_t("头像"),
        operationRightWidget: portraitWidget,
        showArrowRightIcon: false,
      ),
    );
  }

  /// defaultPortraitWidget
  static Widget defaultPortraitWidget(V2TimUserFullInfo userInfo) {
    return SizedBox(
      width: 48,
      height: 48,
      child: Avatar(
          faceUrl: userInfo.faceUrl ?? "", showName: userInfo.nickName ?? ""),
    );
  }

  /// nickname
  static Widget nicknameBar(String nickName) {
    return SizedBox(
      child: TIMUIKitOperationItem(
        showArrowRightIcon: false,
        operationName: TIM_t("昵称"),
        operationRightWidget: Text(nickName),
      ),
    );
  }

  /// user account
  static Widget userAccountBar(String userNum) {
    return SizedBox(
      child: TIMUIKitOperationItem(
        showArrowRightIcon: false,
        operationName: TIM_t("账号"),
        operationRightWidget: Text(userNum),
      ),
    );
  }

  /// signature
  static Widget signatureBar(String signature) {
    return SizedBox(
      child: TIMUIKitOperationItem(
        showArrowRightIcon: false,
        operationName: TIM_t("个性签名"),
        operationRightWidget: Text(signature),
      ),
    );
  }

  /// gender
  static Widget genderBar(int gender) {
    Map genderMap = {
      0: TIM_t("未知"),
      1: TIM_t("男"),
      2: TIM_t("女"),
    };
    return SizedBox(
      child: TIMUIKitOperationItem(
        showArrowRightIcon: false,
        operationName: TIM_t("性别"),
        operationRightWidget: Text(genderMap[gender]),
      ),
    );
  }

  /// gender
  static Widget genderBarWithArrow(int gender) {
    Map genderMap = {
      0: TIM_t("未知"),
      1: TIM_t("男"),
      2: TIM_t("女"),
    };
    return SizedBox(
      child: TIMUIKitOperationItem(
        operationName: TIM_t("性别"),
        operationRightWidget: Text(genderMap[gender]),
      ),
    );
  }

  /// birthday
  static Widget birthdayBar(int? birthday) {
    if (birthday == 0 || birthday == null) {
      return InkWell(
        onTap: () {},
        child: TIMUIKitOperationItem(
          showArrowRightIcon: false,
          operationName: TIM_t("生日"),
          operationRightWidget: Text(TIM_t("未知")),
        ),
      );
    }
    final date = DateTime.parse(birthday.toString());
    DateFormat formatter = DateFormat('yyyy-MM-dd');
    return InkWell(
      onTap: () {},
      child: TIMUIKitOperationItem(
        showArrowRightIcon: false,
        operationName: TIM_t("生日"),
        operationRightWidget: Text(formatter.format(date)),
      ),
    );
  }

  /// default button area
  static Widget addAndDeleteArea(
    V2TimFriendInfo friendInfo,
    V2TimConversation conversation,
    int friendType,
    bool isDisturb,
    TUITheme theme,
    VoidCallback handleAddFriend,
    VoidCallback handleDeleteFriend,
  ) {
    _buildDeleteFriend(V2TimConversation conversation, theme) {
      return InkWell(
        onTap: () {
          handleDeleteFriend();
        },
        child: Container(
          alignment: Alignment.center,
          padding: const EdgeInsets.symmetric(vertical: 15),
          decoration: BoxDecoration(
              color: Colors.white,
              border:
                  Border(bottom: BorderSide(color: theme.weakDividerColor))),
          child: Text(
            TIM_t("清除好友"),
            style: TextStyle(color: theme.cautionColor, fontSize: 17),
          ),
        ),
      );
    }

    _buildAddOperation() {
      return Container(
        alignment: Alignment.center,
        // padding: const EdgeInsets.symmetric(vertical: 15),
        decoration: BoxDecoration(
            color: Colors.white,
            border: Border(
                bottom: BorderSide(
                    color: theme.weakDividerColor ??
                        CommonColor.weakDividerColor))),
        child: Row(children: [
          Expanded(
            child: TextButton(
                child: Text(TIM_t("加为好友"),
                    style: TextStyle(color: theme.primaryColor, fontSize: 17)),
                onPressed: () {
                  handleAddFriend();
                }),
          )
        ]),
      );
    }

    return Column(
      children: [
        if (friendType != 0) _buildDeleteFriend(conversation, theme),
        if (friendType == 0) _buildAddOperation()
      ],
    );
  }
}
文件：/im-flutter-uikit/package_src/tim_ui_kit/lib/ui/views/TIMUIKitSearch/tim_uikit_search.dart
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:tim_ui_kit/base_widgets/tim_ui_kit_state.dart';
import 'package:tim_ui_kit/data_services/services_locatar.dart';
import 'package:tim_ui_kit/business_logic/view_models/tui_search_view_model.dart';
import 'package:tim_ui_kit/ui/utils/color.dart';
import 'package:tim_ui_kit/ui/views/TIMUIKitSearch/tim_uikit_search_friend.dart';
import 'package:tim_ui_kit/ui/views/TIMUIKitSearch/pureUI/tim_uikit_search_input.dart';
import 'package:tim_ui_kit/ui/views/TIMUIKitSearch/tim_uikit_search_group.dart';
import 'package:tim_ui_kit/ui/views/TIMUIKitSearch/tim_uikit_search_msg.dart';
import 'package:tim_ui_kit/tim_ui_kit.dart';
import 'package:tim_ui_kit/base_widgets/tim_ui_kit_base.dart';

class TIMUIKitSearch extends StatefulWidget {
  /// the callback after clicking the conversation item to specific message in it
  final Function(V2TimConversation, V2TimMessage?) onTapConversation;

  /// [Deprecated] if assign a specific conversation, it will only search in it; otherwise search globally
  final V2TimConversation? conversation;

  /// on click each conversation and enter the detail search for it
  final Function(V2TimConversation, String) onEnterConversation;

  const TIMUIKitSearch(
      {required this.onTapConversation,
      Key? key,
      this.conversation,
      required this.onEnterConversation})
      : super(key: key);

  @override
  State<StatefulWidget> createState() => TIMUIKitSearchState();
}

class TIMUIKitSearchState extends TIMUIKitState<TIMUIKitSearch> {
  late TextEditingController textEditingController = TextEditingController();
  final model = serviceLocator<TUISearchViewModel>();
  GlobalKey<dynamic> inputTextField = GlobalKey();

  @override
  void initState() {
    super.initState();
    model.initSearch();
    model.initConversationMsg();
  }

  @override
  Widget tuiBuild(BuildContext context, TUIKitBuildValue value) {
    return MultiProvider(
      providers: [
        ChangeNotifierProvider.value(
            value: serviceLocator<TUISearchViewModel>())
      ],
      builder: (context, w) {
        List<V2TimFriendInfoResult>? friendResultList =
            Provider.of<TUISearchViewModel>(context).friendList;
        List<V2TimMessageSearchResultItem>? msgList =
            Provider.of<TUISearchViewModel>(context).msgList;
        List<V2TimGroupInfo>? groupList =
            Provider.of<TUISearchViewModel>(context).groupList;
        int totalMsgCount =
            Provider.of<TUISearchViewModel>(context).totalMsgCount;
        return GestureDetector(
          onTap: () {
            FocusScopeNode currentFocus = FocusScope.of(context);
            if (!currentFocus.hasPrimaryFocus) {
              currentFocus.unfocus();
            }
          },
          child: Scaffold(
            body: Column(
              mainAxisAlignment: MainAxisAlignment.start,
              children: [
                TIMUIKitSearchInput(
                  key: inputTextField,
                  onChange: (String value) {
                    model.searchByKey(value);
                  },
                  controller: textEditingController,
                  prefixIcon: Icon(
                    Icons.search,
                    color: hexToColor("979797"),
                  ),
                ),
                Expanded(
                    child: SingleChildScrollView(
                  child: Column(
                    children: [
                      TIMUIKitSearchFriend(
                          onTapConversation: widget.onTapConversation,
                          friendResultList: friendResultList ?? []),
                      TIMUIKitSearchGroup(
                          groupList: groupList ?? [],
                          onTapConversation: widget.onTapConversation),
                      TIMUIKitSearchMsg(
                        onTapConversation: widget.onTapConversation,
                        keyword: textEditingController.text,
                        totalMsgCount: totalMsgCount,
                        msgList: msgList ?? [],
                        onEnterConversation:
                            (V2TimConversation conversation, String keyword) {
                          widget.onEnterConversation(conversation, keyword);
                        },
                      )
                    ],
                  ),
                ))
              ],
            ),
          ),
        );
      },
    );
  }
}
文件：/im-flutter-uikit/package_src/tim_ui_kit/lib/ui/views/TIMUIKitSearch/tim_uikit_search_friend.dart
// ignore_for_file: must_be_immutable

import 'dart:math';

import 'package:flutter/cupertino.dart';
import 'package:provider/provider.dart';
import 'package:tim_ui_kit/base_widgets/tim_ui_kit_state.dart';
import 'package:tim_ui_kit/tim_ui_kit.dart';
import 'package:tim_ui_kit/ui/views/TIMUIKitSearch/pureUI/tim_uikit_search_item.dart';
import 'package:tim_ui_kit/ui/views/TIMUIKitSearch/pureUI/tim_uikit_search_folder.dart';

import 'package:tim_ui_kit/business_logic/view_models/tui_search_view_model.dart';
import 'package:tim_ui_kit/ui/views/TIMUIKitSearch/pureUI/tim_uikit_search_showAll.dart';

import 'package:tim_ui_kit/base_widgets/tim_ui_kit_base.dart';

class TIMUIKitSearchFriend extends StatefulWidget {
  List<V2TimFriendInfoResult> friendResultList;
  final Function(V2TimConversation, V2TimMessage?) onTapConversation;

  TIMUIKitSearchFriend(
      {required this.friendResultList,
      Key? key,
      required this.onTapConversation})
      : super(key: key);

  @override
  State<StatefulWidget> createState() => TIMUIKitSearchFriendState();
}

class TIMUIKitSearchFriendState extends TIMUIKitState<TIMUIKitSearchFriend> {
  bool isShowAll = false;
  int defaultShowLines = 3;

  Widget _renderShowALl(int currentLines) {
    return (isShowAll == false && currentLines > defaultShowLines)
        ? TIMUIKitSearchShowALl(
            textShow: TIM_t("全部联系人"),
            onClick: () => setState(() {
              isShowAll = true;
            }),
          )
        : Container();
  }

  @override
  Widget tuiBuild(BuildContext context, TUIKitBuildValue value) {
    List<V2TimConversation?> _conversationList =
        Provider.of<TUISearchViewModel>(context).conversationList;

    List<V2TimFriendInfoResult> filteredFriendResultList =
        widget.friendResultList.where((friend) {
      int index = _conversationList
          .indexWhere((conv) => friend.friendInfo?.userID == conv?.userID);
      return index == -1 ? false : true;
    }).toList();

    List<V2TimFriendInfoResult> halfFilteredFriendResultList = isShowAll
        ? filteredFriendResultList
        : filteredFriendResultList.sublist(
            0, min(defaultShowLines, filteredFriendResultList.length));

    if (filteredFriendResultList.isNotEmpty) {
      return TIMUIKitSearchFolder(folderName: TIM_t("联系人"), children: [
        ...halfFilteredFriendResultList.map((conv) {
          int convIndex = _conversationList
              .indexWhere((item) => conv.friendInfo?.userID == item?.userID);
          V2TimConversation conversation = _conversationList[convIndex]!;
          return TIMUIKitSearchItem(
            onClick: () {
              widget.onTapConversation(conversation, null);
            },
            faceUrl: conv.friendInfo?.userProfile?.faceUrl ?? "",
            showName: "",
            lineOne: conversation.showName ??
                conversation.userID ??
                conv.friendInfo?.userID ??
                "",
          );
        }).toList(),
        _renderShowALl(filteredFriendResultList.length),
      ]);
    } else {
      return Container();
    }
  }
}
文件：/im-flutter-uikit/package_src/tim_ui_kit/lib/ui/views/TIMUIKitSearch/tim_uikit_search_group.dart
// ignore_for_file: must_be_immutable

import 'dart:math';

import 'package:flutter/cupertino.dart';
import 'package:provider/provider.dart';
import 'package:tim_ui_kit/base_widgets/tim_ui_kit_state.dart';
import 'package:tim_ui_kit/tim_ui_kit.dart';
import 'package:tim_ui_kit/ui/views/TIMUIKitSearch/pureUI/tim_uikit_search_item.dart';
import 'package:tim_ui_kit/ui/views/TIMUIKitSearch/pureUI/tim_uikit_search_folder.dart';

import 'package:tim_ui_kit/business_logic/view_models/tui_search_view_model.dart';
import 'package:tim_ui_kit/ui/views/TIMUIKitSearch/pureUI/tim_uikit_search_showAll.dart';

import 'package:tim_ui_kit/base_widgets/tim_ui_kit_base.dart';

class TIMUIKitSearchGroup extends StatefulWidget {
  List<V2TimGroupInfo> groupList;
  final Function(V2TimConversation, V2TimMessage?) onTapConversation;

  TIMUIKitSearchGroup(
      {required this.groupList, Key? key, required this.onTapConversation})
      : super(key: key);

  @override
  State<StatefulWidget> createState() => TIMUIKitSearchGroupState();
}

class TIMUIKitSearchGroupState extends TIMUIKitState<TIMUIKitSearchGroup> {
  bool isShowAll = false;
  int defaultShowLines = 3;

  Widget _renderShowALl(int currentLines) {
    return (isShowAll == false && currentLines > defaultShowLines)
        ? TIMUIKitSearchShowALl(
            textShow: TIM_t("全部群聊"),
            onClick: () => setState(() {
              isShowAll = true;
            }),
          )
        : Container();
  }

  @override
  Widget tuiBuild(BuildContext context, TUIKitBuildValue value) {
    List<V2TimConversation?> _conversationList =
        Provider.of<TUISearchViewModel>(context).conversationList;

    List<V2TimGroupInfo> filteredGroupResultList =
        widget.groupList.where((group) {
      int index = _conversationList
          .indexWhere((conv) => group.groupID == conv?.groupID);
      return index == -1 ? false : true;
    }).toList();

    List<V2TimGroupInfo> halfFilteredGroupResultList = isShowAll
        ? filteredGroupResultList
        : filteredGroupResultList.sublist(
            0, min(defaultShowLines, filteredGroupResultList.length));

    if (filteredGroupResultList.isNotEmpty) {
      return TIMUIKitSearchFolder(folderName: TIM_t("群聊"), children: [
        ...halfFilteredGroupResultList.map((group) {
          int convIndex = _conversationList
              .indexWhere((item) => group.groupID == item?.groupID);
          V2TimConversation conversation = _conversationList[convIndex]!;
          return TIMUIKitSearchItem(
            onClick: () {
              widget.onTapConversation(conversation, null);
            },
            faceUrl: conversation.faceUrl ?? group.faceUrl ?? "",
            showName: "",
            lineOne: conversation.showName ??
                group.groupName ??
                conversation.groupID ??
                "",
          );
        }).toList(),
        _renderShowALl(filteredGroupResultList.length),
      ]);
    } else {
      return Container();
    }
  }
}
文件：/im-flutter-uikit/package_src/tim_ui_kit/lib/ui/views/TIMUIKitSearch/tim_uikit_search_msg.dart
// ignore_for_file: must_be_immutable, unused_import

import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:tim_ui_kit/base_widgets/tim_ui_kit_statelesswidget.dart';
import 'package:tim_ui_kit/tim_ui_kit.dart';
import 'package:tim_ui_kit/business_logic/view_models/tui_search_view_model.dart';
import 'package:tim_ui_kit/ui/views/TIMUIKitSearch/pureUI/tim_uikit_search_item.dart';
import 'package:tim_ui_kit/ui/views/TIMUIKitSearch/pureUI/tim_uikit_search_folder.dart';
import 'package:tim_ui_kit/ui/views/TIMUIKitSearch/tim_uikit_search_msg_detail.dart';
import 'package:tim_ui_kit/ui/views/TIMUIKitSearch/pureUI/tim_uikit_search_showAll.dart';
import 'package:tim_ui_kit/data_services/services_locatar.dart';

import 'package:tim_ui_kit/base_widgets/tim_ui_kit_base.dart';

class TIMUIKitSearchMsg extends TIMUIKitStatelessWidget {
  List<V2TimMessageSearchResultItem?> msgList;
  int totalMsgCount;
  String keyword;
  final Function(V2TimConversation, V2TimMessage?) onTapConversation;
  final model = serviceLocator<TUISearchViewModel>();
  final Function(V2TimConversation, String) onEnterConversation;

  TIMUIKitSearchMsg(
      {required this.msgList,
      required this.keyword,
      required this.totalMsgCount,
      Key? key,
      required this.onTapConversation,
      required this.onEnterConversation})
      : super(key: key);

  Widget _renderShowALl(bool isShowMore) {
    return (isShowMore == true)
        ? TIMUIKitSearchShowALl(
            textShow: TIM_t("更多聊天记录"),
            onClick: () => {model.searchMsgByKey(keyword, false)},
          )
        : Container();
  }

  @override
  Widget tuiBuild(BuildContext context, TUIKitBuildValue value) {
    List<V2TimConversation?> _conversationList =
        Provider.of<TUISearchViewModel>(context).conversationList;

    if (msgList.isNotEmpty) {
      return TIMUIKitSearchFolder(folderName: TIM_t("聊天记录"), children: [
        ...msgList.map((conv) {
          V2TimConversation conversation = _conversationList[
              _conversationList.indexWhere(
                  (item) => item!.conversationID == conv?.conversationID)]!;
          final option1 = conv?.messageCount;
          return TIMUIKitSearchItem(
            onClick: () async {
              onEnterConversation(conversation, keyword);
            },
            faceUrl: conversation.faceUrl ?? "",
            showName: conversation.showName ?? "",
            lineOne: conversation.showName ?? "",
            lineTwo: TIM_t_para("{{option1}}条相关聊天记录", "$option1条相关聊天记录")(
                option1: option1),
          );
        }).toList(),
        _renderShowALl(totalMsgCount > msgList.length)
      ]);
    } else {
      return Container();
    }
  }
}
文件：/im-flutter-uikit/package_src/tim_ui_kit/lib/ui/views/TIMUIKitSearch/tim_uikit_search_msg_detail.dart
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:tim_ui_kit/base_widgets/tim_ui_kit_state.dart';
import 'package:tim_ui_kit/tim_ui_kit.dart';
import 'package:tim_ui_kit/ui/views/TIMUIKitSearch/pureUI/tim_uikit_search_input.dart';
import 'package:tim_ui_kit/ui/views/TIMUIKitSearch/pureUI/tim_uikit_search_item.dart';
import 'package:tim_ui_kit/business_logic/view_models/tui_search_view_model.dart';
import 'package:tim_ui_kit/data_services/services_locatar.dart';
import 'package:tim_ui_kit/ui/views/TIMUIKitSearch/pureUI/tim_uikit_search_showAll.dart';

import 'package:tim_ui_kit/base_widgets/tim_ui_kit_base.dart';

class TIMUIKitSearchMsgDetail extends StatefulWidget {
  /// Conversation need search
  final V2TimConversation currentConversation;

  /// initial keyword
  final String keyword;

  /// the callback after clicking each conversation message item
  final Function(V2TimConversation, V2TimMessage?) onTapConversation;

  const TIMUIKitSearchMsgDetail(
      {Key? key,
      required this.currentConversation,
      required this.keyword,
      required this.onTapConversation})
      : super(key: key);

  @override
  State<StatefulWidget> createState() => TIMUIKitSearchMsgDetailState();
}

class TIMUIKitSearchMsgDetailState
    extends TIMUIKitState<TIMUIKitSearchMsgDetail> {
  final model = serviceLocator<TUISearchViewModel>();
  String keywordState = "";
  int currentPage = 0;

  @override
  void initState() {
    super.initState();
    keywordState = widget.keyword;
    updateMsgResult(widget.keyword, true);
  }

  String _getMsgElem(V2TimMessage message) {
    final msgType = message.elemType;
    final isRevokedMessage = message.status == 6;
    if (isRevokedMessage) {
      final isSelf = message.isSelf ?? false;
      final option2 = isSelf ? TIM_t("您") : message.nickName ?? message.sender;
      return TIM_t_para("{{option2}}撤回了一条消息", "$option2撤回了一条消息")(
          option2: option2);
    }
    switch (msgType) {
      case MessageElemType.V2TIM_ELEM_TYPE_CUSTOM:
        return TIM_t("[自定义]");
      case MessageElemType.V2TIM_ELEM_TYPE_SOUND:
        return TIM_t("[语音]");
      case MessageElemType.V2TIM_ELEM_TYPE_TEXT:
        return message.textElem!.text as String;
      case MessageElemType.V2TIM_ELEM_TYPE_FACE:
        return TIM_t("[表情]");
      case MessageElemType.V2TIM_ELEM_TYPE_FILE:
        final option1 = message.fileElem!.fileName;
        return TIM_t_para("[文件] {{option1}}", "[文件] $option1")(
            option1: option1);
      case MessageElemType.V2TIM_ELEM_TYPE_IMAGE:
        return TIM_t("[图片]");
      case MessageElemType.V2TIM_ELEM_TYPE_VIDEO:
        return TIM_t("[视频]");
      case MessageElemType.V2TIM_ELEM_TYPE_LOCATION:
        return TIM_t("[位置]");
      case MessageElemType.V2TIM_ELEM_TYPE_MERGER:
        return TIM_t("[聊天记录]");
      default:
        return TIM_t("未知消息");
    }
  }

  List<Widget> _renderListMessage(
      List<V2TimMessage> msgList, BuildContext context) {
    List<Widget> listWidget = [];

    listWidget = msgList.map((message) {
      return Container(
        padding: const EdgeInsets.fromLTRB(16, 0, 16, 0),
        decoration: const BoxDecoration(
          color: Colors.white,
        ),
        child: TIMUIKitSearchItem(
          faceUrl: message.faceUrl ?? "",
          showName: message.nickName ?? message.userID ?? message.sender ?? "",
          lineOne: message.nickName ?? message.userID ?? message.sender ?? "",
          lineTwo: _getMsgElem(message),
          onClick: () {
            widget.onTapConversation(widget.currentConversation, message);
          },
        ),
      );
    }).toList();
    return listWidget;
  }

  updateMsgResult(String? keyword, bool isNewSearch) {
    if (isNewSearch) {
      setState(() {
        currentPage = 0;
        keywordState = keyword!;
      });
    }
    model.getMsgForConversation(keyword ?? keywordState,
        widget.currentConversation.conversationID, currentPage);
    setState(() {
      currentPage = currentPage + 1;
    });
  }

  Widget _renderShowALl(bool isShowMore) {
    return (isShowMore == true)
        ? Container(
            padding: const EdgeInsets.fromLTRB(16, 0, 16, 0),
            decoration: const BoxDecoration(
              color: Colors.white,
            ),
            child: TIMUIKitSearchShowALl(
              textShow: TIM_t("更多聊天记录"),
              onClick: () => {updateMsgResult(null, false)},
            ),
          )
        : Container();
  }

  @override
  Widget tuiBuild(BuildContext context, TUIKitBuildValue value) {
    return MultiProvider(
      providers: [
        ChangeNotifierProvider.value(
            value: serviceLocator<TUISearchViewModel>())
      ],
      builder: (context, w) {
        final List<V2TimMessage> currentMsgListForConversation =
            Provider.of<TUISearchViewModel>(context)
                .currentMsgListForConversation;
        final int totalMsgInConversationCount =
            Provider.of<TUISearchViewModel>(context)
                .totalMsgInConversationCount;
        return GestureDetector(
          onTap: () {
            FocusScopeNode currentFocus = FocusScope.of(context);
            if (!currentFocus.hasPrimaryFocus) {
              currentFocus.unfocus();
            }
          },
          child: Scaffold(
              body: Column(
            children: [
              TIMUIKitSearchInput(
                onChange: (String value) {
                  updateMsgResult(value, true);
                },
                initValue: widget.keyword,
                prefixText: Text(widget.currentConversation.showName ??
                    widget.currentConversation.userID ??
                    ""),
              ),
              Expanded(
                  child: ListView(
                children: [
                  ..._renderListMessage(currentMsgListForConversation, context),
                  _renderShowALl(keywordState.isNotEmpty &&
                      totalMsgInConversationCount >
                          currentMsgListForConversation.length)
                ],
              )),
            ],
          )),
        );
      },
    );
  }
}
文件：/im-flutter-uikit/package_src/tim_ui_kit/lib/ui/views/TIMUIKitSearch/pureUI/tim_uikit_search_folder.dart
import 'package:flutter/material.dart';
import 'package:tim_ui_kit/base_widgets/tim_ui_kit_base.dart';
import 'package:tim_ui_kit/base_widgets/tim_ui_kit_statelesswidget.dart';

import 'package:tim_ui_kit/ui/utils/color.dart';
import 'package:tim_ui_kit/ui/utils/tui_theme.dart';

class TIMUIKitSearchFolder extends TIMUIKitStatelessWidget {
  final String folderName;
  final List<Widget> children;

  TIMUIKitSearchFolder(
      {Key? key, required this.folderName, required this.children})
      : super(key: key);

  @override
  Widget tuiBuild(BuildContext context, TUIKitBuildValue value) {
    final TUITheme theme = value.theme;

    return Container(
      margin: const EdgeInsets.only(bottom: 16),
      padding: const EdgeInsets.fromLTRB(16, 0, 16, 0),
      width: MediaQuery.of(context).size.width,
      decoration: const BoxDecoration(
        color: Colors.white,
      ),
      child: Column(
        mainAxisAlignment: MainAxisAlignment.start,
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Container(
            width: MediaQuery.of(context).size.width,
            decoration: BoxDecoration(
                border: Border(
                    bottom:
                        BorderSide(color: hexToColor("DBDBDB"), width: 0.5))),
            padding: const EdgeInsets.fromLTRB(0, 6, 0, 6),
            child: Text(
              folderName,
              style: TextStyle(
                  color: theme.weakTextColor, height: 1.5, fontSize: 14),
            ),
          ),
          ...children
        ],
      ),
    );
  }
}
文件：/im-flutter-uikit/package_src/tim_ui_kit/lib/ui/views/TIMUIKitSearch/pureUI/tim_uikit_search_input.dart
import 'package:flutter/material.dart';
import 'package:tim_ui_kit/base_widgets/tim_ui_kit_state.dart';

import 'package:tim_ui_kit/ui/utils/color.dart';
import 'package:tencent_im_base/tencent_im_base.dart';

import 'package:tim_ui_kit/base_widgets/tim_ui_kit_base.dart';
import 'package:tim_ui_kit/ui/utils/tui_theme.dart';

class TIMUIKitSearchInput extends StatefulWidget {
  final ValueChanged<String> onChange;
  final String? initValue;
  final TextEditingController? controller;
  final Widget? prefixIcon;
  final Widget? prefixText;

  const TIMUIKitSearchInput({
    required this.onChange,
    this.initValue,
    this.controller,
    Key? key,
    this.prefixIcon,
    this.prefixText,
  }) : super(key: key);

  @override
  State<StatefulWidget> createState() => TIMUIKitSearchInputState();
}

class TIMUIKitSearchInputState extends TIMUIKitState<TIMUIKitSearchInput> {
  late FocusNode focusNode = FocusNode();
  late TextEditingController textEditingController =
      widget.controller ?? TextEditingController();
  bool isEmptyInput = true;

  @override
  void initState() {
    super.initState();
    textEditingController.text = widget.initValue ?? "";
    isEmptyInput = textEditingController.text.isEmpty;
  }

  hideAllPanel() {
    focusNode.unfocus();
  }

  @override
  Widget tuiBuild(BuildContext context, TUIKitBuildValue value) {
    final TUITheme theme = value.theme;

    return Container(
      height: 64,
      padding: const EdgeInsets.fromLTRB(16, 8, 16, 16),
      decoration: BoxDecoration(color: theme.primaryColor, boxShadow: [
        BoxShadow(
          color: theme.weakBackgroundColor ?? hexToColor("E6E9EB"),
          offset: const Offset(0.0, 2.0),
        )
      ]),
      child: Row(
        crossAxisAlignment: CrossAxisAlignment.center,
        children: [
          Expanded(
              child: SizedBox(
            height: 36,
            child: TextField(
              autofocus: true,
              onChanged: (value) async {
                final isEmpty = value.isEmpty;
                setState(() {
                  isEmptyInput = isEmpty ? true : false;
                });
                widget.onChange(value);
              },
              keyboardType: TextInputType.text,
              textInputAction: TextInputAction.search,
              maxLines: 4,
              minLines: 1,
              focusNode: focusNode,
              controller: textEditingController,
              textAlignVertical: TextAlignVertical.center,
              decoration: InputDecoration(
                border: InputBorder.none,
                hintStyle: TextStyle(
                  fontSize: 14,
                  color: hexToColor("CCCCCC"),
                ),
                fillColor: Colors.white,
                filled: true,
                isDense: true,
                hintText: TIM_t("搜索"),
                prefix: widget.prefixText != null
                    ? Container(
                        margin: const EdgeInsets.only(right: 8),
                        child: widget.prefixText,
                      )
                    : null,
                prefixIcon: widget.prefixIcon,
                suffixIcon: isEmptyInput
                    ? null
                    : IconButton(
                        onPressed: () {
                          textEditingController.clear();
                          setState(() {
                            isEmptyInput = true;
                          });
                          widget.onChange("");
                        },
                        icon: Icon(Icons.cancel, color: hexToColor("979797")),
                      ),
              ),
            ),
          )),
          Container(
              margin: const EdgeInsets.fromLTRB(10, 0, 0, 0),
              child: GestureDetector(
                onTap: () {
                  Navigator.pop(context);
                },
                child: Text(TIM_t("取消"),
                    style: const TextStyle(
                      color: Colors.white,
                    )),
              ))
        ],
      ),
    );
  }
}
文件：/im-flutter-uikit/package_src/tim_ui_kit/lib/ui/views/TIMUIKitSearch/pureUI/tim_uikit_search_item.dart
import 'package:flutter/material.dart';
import 'package:tim_ui_kit/base_widgets/tim_ui_kit_statelesswidget.dart';
import 'package:tim_ui_kit/tim_ui_kit.dart';
import 'package:tim_ui_kit/ui/utils/color.dart';
import 'package:tim_ui_kit/ui/widgets/avatar.dart';
import 'package:tim_ui_kit/base_widgets/tim_ui_kit_base.dart';

class TIMUIKitSearchItem extends TIMUIKitStatelessWidget {
  final String faceUrl;
  final String showName;
  final String lineOne;
  final String? lineOneRight;
  final String? lineTwo;
  final VoidCallback? onClick;

  TIMUIKitSearchItem(
      {Key? key,
      required this.faceUrl,
      required this.showName,
      required this.lineOne,
      this.lineTwo,
      this.lineOneRight,
      this.onClick})
      : super(key: key);

  _renderLineOneRight(String? text, TUITheme theme) {
    if (text != null) {
      return Text(text,
          style: TextStyle(
            fontSize: 12,
            color: theme.weakTextColor,
          ));
    } else {
      return Container();
    }
  }

  _renderLineTwo(String? text, TUITheme theme) {
    return (text != null)
        ? Text(
            text,
            style: TextStyle(
                color: theme.weakTextColor, height: 1.5, fontSize: 14),
          )
        : Container(
            height: 0,
          );
  }

  @override
  Widget tuiBuild(BuildContext context, TUIKitBuildValue value) {
    final TUITheme theme = value.theme;

    return GestureDetector(
      onTap: onClick,
      child: Container(
        decoration: BoxDecoration(
            border: Border(
                bottom: BorderSide(color: hexToColor("DBDBDB"), width: 0.5))),
        padding: const EdgeInsets.fromLTRB(0, 12, 0, 12),
        child: Row(
          crossAxisAlignment: CrossAxisAlignment.center,
          children: [
            SizedBox(
              width: 40,
              height: 40,
              child: Stack(
                fit: StackFit.expand,
                clipBehavior: Clip.none,
                children: [Avatar(faceUrl: faceUrl, showName: showName)],
              ),
            ),
            Expanded(
                child: Container(
              margin: const EdgeInsets.only(left: 12),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  Container(
                    // height: 24,
                    padding: const EdgeInsets.symmetric(vertical: 2),
                    child: Row(
                      mainAxisAlignment: MainAxisAlignment.spaceBetween,
                      crossAxisAlignment: CrossAxisAlignment.center,
                      children: [
                        Text(
                          lineOne,
                          style: const TextStyle(
                              color: Colors.black,
                              fontSize: 18.0,
                              fontWeight: FontWeight.w400),
                        ),
                        _renderLineOneRight(lineOneRight, theme),
                      ],
                    ),
                  ),
                  _renderLineTwo(lineTwo, theme),
                ],
              ),
            ))
          ],
        ),
      ),
    );
  }
}
文件：/im-flutter-uikit/package_src/tim_ui_kit/lib/ui/views/TIMUIKitSearch/pureUI/tim_uikit_search_showAll.dart
// ignore_for_file: file_names

import 'package:flutter/material.dart';
import 'package:tim_ui_kit/base_widgets/tim_ui_kit_statelesswidget.dart';
import 'package:tim_ui_kit/ui/utils/color.dart';
import 'package:tim_ui_kit/base_widgets/tim_ui_kit_base.dart';

class TIMUIKitSearchShowALl extends TIMUIKitStatelessWidget {
  final String textShow;
  final VoidCallback? onClick;
  final bool isNeedMoreBottom;

  TIMUIKitSearchShowALl(
      {Key? key,
      this.onClick,
      required this.textShow,
      this.isNeedMoreBottom = false})
      : super(key: key);

  @override
  Widget tuiBuild(BuildContext context, TUIKitBuildValue value) {
    return GestureDetector(
      onTap: onClick,
      child: Container(
        decoration: BoxDecoration(
            color: Colors.white,
            border: Border(
                bottom: BorderSide(color: hexToColor("DBDBDB"), width: 0.5))),
        padding: EdgeInsets.fromLTRB(0, 8, 0, (isNeedMoreBottom ? 24 : 8)),
        child: Row(
          crossAxisAlignment: CrossAxisAlignment.center,
          children: [
            Icon(
              Icons.search,
              color: hexToColor("979797"),
            ),
            Expanded(
                child: Container(
              margin: const EdgeInsets.only(left: 12),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  Container(
                    // height: 24,
                    padding: const EdgeInsets.symmetric(vertical: 2),
                    child: Text(
                      textShow,
                      style: const TextStyle(
                          color: Colors.black,
                          fontSize: 16.0,
                          fontWeight: FontWeight.w400),
                    ),
                  ),
                ],
              ),
            )),
            Icon(
              Icons.expand_more,
              color: hexToColor("979797"),
            ),
          ],
        ),
      ),
    );
  }
}
文件：/im-flutter-uikit/package_src/tim_ui_kit/lib/ui/widgets/avatar.dart
import 'package:cached_network_image/cached_network_image.dart';
import 'package:flutter/material.dart';
import 'package:tim_ui_kit/base_widgets/tim_ui_kit_statelesswidget.dart';
import 'package:tim_ui_kit/data_services/core/core_services_implements.dart';
import 'package:tim_ui_kit/data_services/services_locatar.dart';
import 'package:tim_ui_kit/ui/utils/tui_theme.dart';
import 'package:tim_ui_kit/base_widgets/tim_ui_kit_base.dart';

class Avatar extends TIMUIKitStatelessWidget {
  final String faceUrl;
  final String showName;
  final bool isFromLocal;
  final CoreServicesImpl coreService = serviceLocator<CoreServicesImpl>();
  final BorderRadius? borderRadius;

  Avatar(
      {Key? key,
      required this.faceUrl,
      required this.showName,
      this.isFromLocal = false,
      this.borderRadius})
      : super(key: key);

  Widget _getFaceUrlImageWidget(BuildContext context, TUITheme theme) {
    final emptyAvatarBuilder = coreService.emptyAvatarBuilder;
    if (faceUrl != "") {
      if (isFromLocal) {
        return Image.asset(faceUrl);
      }
      return CachedNetworkImage(
        imageUrl: faceUrl,
        fadeInDuration: const Duration(milliseconds: 0),
      );
    } else {
      if (emptyAvatarBuilder != null) {
        return emptyAvatarBuilder(context);
      }
      return Container(
        alignment: Alignment.center,
        decoration: BoxDecoration(
          color: theme.primaryColor,
        ),
        child: Text(
          showName.length <= 2 ? showName : showName.substring(0, 2),
          style: const TextStyle(color: Colors.white, fontSize: 14),
        ),
      );
    }
  }

  @override
  Widget tuiBuild(BuildContext context, TUIKitBuildValue value) {
    final TUITheme theme = value.theme;

    return ClipRRect(
      borderRadius: borderRadius ?? BorderRadius.circular(4.8),
      child: _getFaceUrlImageWidget(context, theme),
    );
  }
}
文件：/im-flutter-uikit/package_src/tim_ui_kit/lib/ui/widgets/az_list_view.dart
import 'package:azlistview/azlistview.dart';
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:tim_ui_kit/base_widgets/tim_ui_kit_state.dart';
import 'package:tim_ui_kit/business_logic/view_models/tui_theme_view_model.dart';
import 'package:tim_ui_kit/data_services/services_locatar.dart';
import 'package:tim_ui_kit/base_widgets/tim_ui_kit_base.dart';

class AZListViewContainer extends StatefulWidget {
  final List<ISuspensionBeanImpl>? memberList;
  final Widget Function(BuildContext context, int index) itemBuilder;
  final Widget Function(BuildContext context, int index)? susItemBuilder;
  final bool isShowIndexBar;

  const AZListViewContainer(
      {Key? key,
      required this.memberList,
      required this.itemBuilder,
      this.isShowIndexBar = true,
      this.susItemBuilder})
      : super(key: key);

  @override
  State<StatefulWidget> createState() => _AZListViewContainerState();
}

class _AZListViewContainerState extends TIMUIKitState<AZListViewContainer> {
  List<ISuspensionBeanImpl>? _list;

  addShowSuspension(List<ISuspensionBeanImpl> curList) {
    for (int i = 0; i < curList.length; i++) {
      if (i == 0 || curList[i].tagIndex != curList[i - 1].tagIndex) {
        curList[i].isShowSuspension = true;
      }
    }
    return curList;
  }

  static Widget getSusItem(BuildContext context, String tag,
      {double susHeight = 40}) {
    final theme = Provider.of<TUIThemeViewModel>(context).theme;
    return Container(
      height: susHeight,
      width: MediaQuery.of(context).size.width,
      padding: const EdgeInsets.only(left: 16.0),
      color: theme.weakDividerColor,
      alignment: Alignment.centerLeft,
      child: Text(
        tag,
        softWrap: true,
        style: TextStyle(
          fontSize: 14.0,
          color: theme.weakTextColor,
        ),
      ),
    );
  }

  @override
  void initState() {
    super.initState();
    setState(() {
      _list = addShowSuspension(widget.memberList!);
    });
  }

  @override
  void didUpdateWidget(covariant AZListViewContainer oldWidget) {
    super.didUpdateWidget(oldWidget);
    setState(() {
      _list = addShowSuspension(widget.memberList!);
    });
  }

  @override
  Widget tuiBuild(BuildContext context, TUIKitBuildValue value) {
    return ChangeNotifierProvider.value(
        value: serviceLocator<TUIThemeViewModel>(),
        child: Consumer<TUIThemeViewModel>(
            builder: (context, tuiTheme, child) => AzListView(
                physics: const BouncingScrollPhysics(
                    parent: AlwaysScrollableScrollPhysics()),
                data: _list!,
                itemCount: _list!.length,
                itemBuilder: widget.itemBuilder,
                indexBarData: widget.isShowIndexBar
                    ? SuspensionUtil.getTagIndexList(_list!)
                        .where((element) => element != "@")
                        .toList()
                    : [],
                susItemBuilder: (BuildContext context, int index) {
                  if (widget.susItemBuilder != null) {
                    return widget.susItemBuilder!(context, index);
                  }
                  ISuspensionBeanImpl model = _list![index];
                  if (model.getSuspensionTag() == "@") {
                    return Container();
                  }
                  return getSusItem(context, model.getSuspensionTag());
                })));
  }
}

class ISuspensionBeanImpl<T> extends ISuspensionBean {
  String tagIndex;
  T memberInfo;
  ISuspensionBeanImpl({required this.tagIndex, required this.memberInfo});

  @override
  String getSuspensionTag() => tagIndex;
}
文件：/im-flutter-uikit/package_src/tim_ui_kit/lib/ui/widgets/center_loading.dart
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:tim_ui_kit/base_widgets/tim_ui_kit_statelesswidget.dart';
import 'package:tim_ui_kit/business_logic/view_models/tui_chat_view_model.dart';
import 'package:tim_ui_kit/data_services/services_locatar.dart';
import 'package:tim_ui_kit/ui/utils/tui_theme.dart';
import 'package:tim_ui_kit/base_widgets/tim_ui_kit_base.dart';

class CenterLoading extends TIMUIKitStatelessWidget {
  CenterLoading({Key? key, this.messageID}) : super(key: key);
  final String? messageID;
  @override
  Widget tuiBuild(BuildContext context, TUIKitBuildValue value) {
    final TUITheme theme = value.theme;

    return MultiProvider(
        providers: [
          ChangeNotifierProvider.value(
              value: serviceLocator<TUIChatViewModel>()),
        ],
        builder: (context, w) {
          final progress = Provider.of<TUIChatViewModel>(context)
              .getMessageProgress(messageID);
          return progress == 0
              ? Container()
              : Center(
                  child: CircularProgressIndicator(
                      value: progress / 100,
                      backgroundColor: Colors.white,
                      valueColor: AlwaysStoppedAnimation(theme.primaryColor)));
        });
  }
}
文件：/im-flutter-uikit/package_src/tim_ui_kit/lib/ui/widgets/center_play_button.dart
import 'package:flutter/material.dart';
import 'package:tim_ui_kit/base_widgets/tim_ui_kit_statelesswidget.dart';
import 'package:tim_ui_kit/base_widgets/tim_ui_kit_base.dart';

class CenterPlayButton extends TIMUIKitStatelessWidget {
  CenterPlayButton({
    Key? key,
    required this.show,
    required this.isPlaying,
    this.onPressed,
  }) : super(key: key);

  final bool show;
  final bool isPlaying;
  final VoidCallback? onPressed;

  @override
  Widget tuiBuild(BuildContext context, TUIKitBuildValue value) {
    return Container(
      color: Colors.transparent,
      child: Center(
        child: AnimatedOpacity(
          opacity: show ? 1.0 : 0.0,
          duration: const Duration(milliseconds: 300),
          child: GestureDetector(
            child: IconButton(
              iconSize: 86,
              icon: Image.asset('images/play.png', package: 'tim_ui_kit'),
              onPressed: onPressed,
            ),
          ),
        ),
      ),
    );
  }
}
文件：/im-flutter-uikit/package_src/tim_ui_kit/lib/ui/widgets/contact_list.dart
import 'package:azlistview/azlistview.dart';
import 'package:flutter/material.dart';
import 'package:lpinyin/lpinyin.dart';
import 'package:tencent_im_base/tencent_im_base.dart';
import 'package:tim_ui_kit/base_widgets/tim_ui_kit_state.dart';
import 'package:tim_ui_kit/ui/utils/color.dart';
import 'package:tim_ui_kit/ui/utils/tui_theme.dart';
import 'package:tim_ui_kit/ui/widgets/avatar.dart';
import 'package:tim_ui_kit/ui/widgets/az_list_view.dart';
import 'package:tim_ui_kit/ui/widgets/radio_button.dart';
import 'package:tim_ui_kit/base_widgets/tim_ui_kit_base.dart';

class ContactList extends StatefulWidget {
  final List<V2TimFriendInfo> contactList;
  final bool isCanSelectMemberItem;
  final bool isCanSlidableDelete;
  final Function(List<V2TimFriendInfo> selectedMember)?
      onSelectedMemberItemChange;
  final Function()? handleSlidableDelte;

  /// tap联系人列表项回调
  final void Function(V2TimFriendInfo item)? onTapItem;

  /// 顶部列表
  final List<TopListItem>? topList;

  /// 顶部列表项构造器
  final Widget? Function(TopListItem item)? topListItemBuilder;

  final int? maxSelectNum;

  const ContactList(
      {Key? key,
      required this.contactList,
      this.isCanSelectMemberItem = false,
      this.onSelectedMemberItemChange,
      this.isCanSlidableDelete = false,
      this.handleSlidableDelte,
      this.onTapItem,
      this.topList,
      this.topListItemBuilder,
      this.maxSelectNum})
      : super(key: key);

  @override
  State<StatefulWidget> createState() => _ContactListState();
}

class _ContactListState extends TIMUIKitState<ContactList> {
  List<V2TimFriendInfo> selectedMember = [];

  _getShowName(V2TimFriendInfo item) {
    final friendRemark = item.friendRemark ?? "";
    final nickName = item.userProfile?.nickName ?? "";
    final userID = item.userID;
    final showName = nickName != "" ? nickName : userID;
    return friendRemark != "" ? friendRemark : showName;
  }

  List<ISuspensionBeanImpl> _getShowList(List<V2TimFriendInfo> memberList) {
    final List<ISuspensionBeanImpl> showList = List.empty(growable: true);
    for (var i = 0; i < memberList.length; i++) {
      final item = memberList[i];
      final showName = _getShowName(item);
      String pinyin = PinyinHelper.getPinyinE(showName);
      String tag = pinyin.substring(0, 1).toUpperCase();
      if (RegExp("[A-Z]").hasMatch(tag)) {
        showList.add(ISuspensionBeanImpl(memberInfo: item, tagIndex: tag));
      } else {
        showList.add(ISuspensionBeanImpl(memberInfo: item, tagIndex: "#"));
      }
    }

    SuspensionUtil.sortListBySuspensionTag(showList);

    return showList;
  }

  bool selectedMemberIsOverFlow() {
    if (widget.maxSelectNum == null) {
      return false;
    }

    return selectedMember.length >= widget.maxSelectNum!;
  }

  Widget _buildItem(TUITheme theme, V2TimFriendInfo item) {
    final showName = _getShowName(item);
    final faceUrl = item.userProfile?.faceUrl ?? "";

    return Container(
      padding: const EdgeInsets.only(top: 8, left: 16, right: 12),
      child: Row(
        children: [
          if (widget.isCanSelectMemberItem)
            Container(
              margin: const EdgeInsets.only(right: 10),
              child: CheckBoxButton(
                isChecked: selectedMember.contains(item),
                onChanged: (isChecked) {
                  if (isChecked) {
                    if (selectedMemberIsOverFlow()) {
                      return;
                    }
                    selectedMember.add(item);
                  } else {
                    selectedMember.remove(item);
                  }
                  if (widget.onSelectedMemberItemChange != null) {
                    widget.onSelectedMemberItemChange!(selectedMember);
                  }
                  setState(() {});
                },
              ),
            ),
          Container(
            padding: const EdgeInsets.only(bottom: 12),
            margin: const EdgeInsets.only(right: 12),
            child: SizedBox(
              height: 40,
              width: 40,
              child: Avatar(faceUrl: faceUrl, showName: showName),
            ),
          ),
          Expanded(
              child: Container(
            alignment: Alignment.centerLeft,
            padding: const EdgeInsets.only(top: 10, bottom: 20, right: 28),
            decoration: BoxDecoration(
                border: Border(
                    bottom: BorderSide(
                        color: theme.weakDividerColor ??
                            CommonColor.weakDividerColor))),
            child: Text(
              showName,
              style: const TextStyle(color: Colors.black, fontSize: 18),
            ),
          )),
        ],
      ),
    );
  }

  @override
  Widget tuiBuild(BuildContext context, TUIKitBuildValue value) {
    final TUITheme theme = value.theme;

    final showList = _getShowList(widget.contactList);

    if (widget.topList != null && widget.topList!.isNotEmpty) {
      final topList = widget.topList!
          .map((e) => ISuspensionBeanImpl(memberInfo: e, tagIndex: '@'))
          .toList();
      showList.insertAll(0, topList);
    }

    return AZListViewContainer(
      memberList: showList,
      itemBuilder: (context, index) {
        final memberInfo = showList[index].memberInfo;
        if (memberInfo is TopListItem) {
          if (widget.topListItemBuilder != null) {
            final customWidget = widget.topListItemBuilder!(memberInfo);
            if (customWidget != null) {
              return customWidget;
            }
          }
          return InkWell(
              onTap: () {
                if (memberInfo.onTap != null) {
                  memberInfo.onTap!();
                }
              },
              child: Container(
                padding: const EdgeInsets.only(top: 8, left: 16),
                child: Row(
                  children: [
                    Container(
                      height: 40,
                      width: 40,
                      margin: const EdgeInsets.only(right: 12, bottom: 12),
                      child: memberInfo.icon,
                    ),
                    Expanded(
                        child: Container(
                      padding: const EdgeInsets.only(top: 10, bottom: 20),
                      decoration: BoxDecoration(
                          border: Border(
                              bottom: BorderSide(color: hexToColor("DBDBDB")))),
                      child: Row(
                        mainAxisAlignment: MainAxisAlignment.spaceBetween,
                        children: [
                          Text(
                            memberInfo.name,
                            style: TextStyle(
                                color: hexToColor("111111"), fontSize: 18),
                          ),
                          Expanded(child: Container()),
                          // if (item.id == "newContact")
                          //   const TIMUIKitUnreadCount(),
                          Container(
                            margin: const EdgeInsets.only(right: 16),
                            child: Icon(
                              Icons.keyboard_arrow_right,
                              color: hexToColor('BBBBBB'),
                            ),
                          )
                        ],
                      ),
                    ))
                  ],
                ),
              ));
        } else {
          return InkWell(
            onTap: () {
              if (widget.isCanSelectMemberItem) {
                if (selectedMember.contains(memberInfo)) {
                  selectedMember.remove(memberInfo);
                } else {
                  if (selectedMemberIsOverFlow()) {
                    return;
                  }
                  selectedMember.add(memberInfo);
                }
                if (widget.onSelectedMemberItemChange != null) {
                  widget.onSelectedMemberItemChange!(selectedMember);
                }
                setState(() {});
                return;
              }
              if (widget.onTapItem != null) {
                widget.onTapItem!(memberInfo);
              }
            },
            child: _buildItem(theme, memberInfo),
          );
        }
      },
    );
  }
}

class TopListItem {
  final String name;
  final String id;
  final Widget? icon;
  final Function()? onTap;
  TopListItem({required this.name, required this.id, this.icon, this.onTap});
}
文件：/im-flutter-uikit/package_src/tim_ui_kit/lib/ui/widgets/customize_ball_pulse_header.dart
// ignore_for_file: prefer_final_fields

import 'dart:async';

import 'package:flutter/material.dart';
import 'package:flutter_easyrefresh/easy_refresh.dart';
import 'package:tim_ui_kit/base_widgets/tim_ui_kit_state.dart';
import 'package:tim_ui_kit/base_widgets/tim_ui_kit_base.dart';

/// 球脉冲Header
class CustomizeBallPulseHeader extends Header {
  /// Key
  final Key? key;

  /// color
  final Color? color;

  /// background color
  final Color? backgroundColor;

  final LinkHeaderNotifier linkNotifier = LinkHeaderNotifier();

  CustomizeBallPulseHeader({
    this.key,
    this.color = Colors.blue,
    this.backgroundColor = Colors.transparent,
    bool enableHapticFeedback = true,
    bool enableInfiniteRefresh = false,
  }) : super(
          extent: 70.0,
          triggerDistance: 70.0,
          float: false,
          enableHapticFeedback: enableHapticFeedback,
          enableInfiniteRefresh: enableInfiniteRefresh,
        );

  @override
  Widget contentBuilder(
      BuildContext context,
      RefreshMode refreshState,
      double pulledExtent,
      double refreshTriggerPullDistance,
      double refreshIndicatorExtent,
      AxisDirection axisDirection,
      bool float,
      Duration? completeDuration,
      bool enableInfiniteRefresh,
      bool success,
      bool noMore) {
    // 不能为水平方向
    assert(
        axisDirection == AxisDirection.down ||
            axisDirection == AxisDirection.up,
        'Widget cannot be horizontal');
    linkNotifier.contentBuilder(
        context,
        refreshState,
        pulledExtent,
        refreshTriggerPullDistance,
        refreshIndicatorExtent,
        axisDirection,
        float,
        completeDuration,
        enableInfiniteRefresh,
        success,
        noMore);
    return BallPulseHeaderWidget(
      key: key,
      color: color,
      backgroundColor: backgroundColor,
      linkNotifier: linkNotifier,
    );
  }
}

/// 球脉冲组件
class BallPulseHeaderWidget extends StatefulWidget {
  /// 颜色
  final Color? color;

  /// 背景颜色
  final Color? backgroundColor;

  final LinkHeaderNotifier linkNotifier;

  const BallPulseHeaderWidget({
    Key? key,
    this.color,
    this.backgroundColor,
    required this.linkNotifier,
  }) : super(key: key);

  @override
  BallPulseHeaderWidgetState createState() {
    return BallPulseHeaderWidgetState();
  }
}

class BallPulseHeaderWidgetState extends TIMUIKitState<BallPulseHeaderWidget> {
  RefreshMode get _refreshState => widget.linkNotifier.refreshState;

  double get _indicatorExtent => widget.linkNotifier.refreshIndicatorExtent;

  bool get _noMore => widget.linkNotifier.noMore;

  // 球大小
  double _ballSize1 = 0.0, _ballSize2 = 0.0, _ballSize3 = 0.0;

  // 动画阶段
  int animationPhase = 1;

  // 动画过渡时间
  Duration _ballSizeDuration = const Duration(milliseconds: 200);

  // 是否运行动画
  bool _isAnimated = false;

  @override
  void initState() {
    super.initState();
  }

  // 循环动画
  void _loopAnimated() {
    Future.delayed(_ballSizeDuration, () {
      if (!mounted) return;
      if (_isAnimated) {
        setState(() {
          if (animationPhase == 1) {
            _ballSize1 = 11.0;
            _ballSize2 = 4.0;
            _ballSize3 = 11.0;
          } else if (animationPhase == 2) {
            _ballSize1 = 18.0;
            _ballSize2 = 11.0;
            _ballSize3 = 4.0;
          } else if (animationPhase == 3) {
            _ballSize1 = 11.0;
            _ballSize2 = 18.0;
            _ballSize3 = 11.0;
          } else {
            _ballSize1 = 4.0;
            _ballSize2 = 11.0;
            _ballSize3 = 18.0;
          }
        });
        animationPhase++;
        animationPhase = animationPhase >= 5 ? 1 : animationPhase;
        _loopAnimated();
      } else {
        setState(() {
          _ballSize1 = 0.0;
          _ballSize2 = 0.0;
          _ballSize3 = 0.0;
        });
        animationPhase = 1;
      }
    });
  }

  @override
  Widget tuiBuild(BuildContext context, TUIKitBuildValue value) {
    if (_noMore) return Container();
    // 开启动画
    if (_refreshState == RefreshMode.done ||
        _refreshState == RefreshMode.inactive) {
      _isAnimated = false;
    } else if (!_isAnimated) {
      _isAnimated = true;
      setState(() {
        _ballSize1 = 4.0;
        _ballSize2 = 11.0;
        _ballSize3 = 18.0;
      });
      _loopAnimated();
    }
    return Stack(
      children: <Widget>[
        Positioned(
          top: 0.0,
          bottom: 0.0,
          left: 0.0,
          right: 0.0,
          child: Container(
            alignment: Alignment.center,
            height: _indicatorExtent,
            color: widget.backgroundColor,
            child: Row(
              mainAxisAlignment: MainAxisAlignment.center,
              children: <Widget>[
                SizedBox(
                  width: 20.0,
                  height: 20.0,
                  child: Center(
                    child: ClipOval(
                      child: AnimatedContainer(
                        color: widget.color,
                        height: _ballSize1,
                        width: _ballSize1,
                        duration: _ballSizeDuration,
                      ),
                    ),
                  ),
                ),
                Container(
                  width: 5.0,
                ),
                SizedBox(
                  width: 20.0,
                  height: 20.0,
                  child: Center(
                    child: ClipOval(
                      child: AnimatedContainer(
                        color: widget.color,
                        height: _ballSize2,
                        width: _ballSize2,
                        duration: _ballSizeDuration,
                      ),
                    ),
                  ),
                ),
                Container(
                  width: 5.0,
                ),
                SizedBox(
                  width: 20.0,
                  height: 20.0,
                  child: Center(
                    child: ClipOval(
                      child: AnimatedContainer(
                        color: widget.color,
                        height: _ballSize3,
                        width: _ballSize3,
                        duration: _ballSizeDuration,
                      ),
                    ),
                  ),
                ),
              ],
            ),
          ),
        ),
      ],
    );
  }
}
文件：/im-flutter-uikit/package_src/tim_ui_kit/lib/ui/widgets/emoji.dart
import 'package:json_annotation/json_annotation.dart';

part 'emoji.g.dart';

@JsonSerializable()
class Emoji extends Object {
  @JsonKey(name: 'name')
  String name;

  @JsonKey(name: 'unicode')
  int unicode;

  Emoji(
    this.name,
    this.unicode,
  );

  factory Emoji.fromJson(Map<String, dynamic> srcJson) =>
      _$EmojiFromJson(srcJson);

  Map<String, dynamic> toJson() => _$EmojiToJson(this);
}
文件：/im-flutter-uikit/package_src/tim_ui_kit/lib/ui/widgets/emoji.g.dart
// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'emoji.dart';

// **************************************************************************
// JsonSerializableGenerator
// **************************************************************************

Emoji _$EmojiFromJson(Map<String, dynamic> json) {
  return Emoji(
    json['name'] as String,
    json['unicode'] as int,
  );
}

Map<String, dynamic> _$EmojiToJson(Emoji instance) => <String, dynamic>{
      'name': instance.name,
      'unicode': instance.unicode,
    };
文件：/im-flutter-uikit/package_src/tim_ui_kit/lib/ui/widgets/forward_message_screen.dart
import 'package:flutter/material.dart';
import 'package:tim_ui_kit/base_widgets/tim_ui_kit_state.dart';
import 'package:tim_ui_kit/business_logic/view_models/tui_chat_view_model.dart';
import 'package:tim_ui_kit/data_services/services_locatar.dart';
import 'package:tim_ui_kit/tim_ui_kit.dart';
import 'package:tim_ui_kit/ui/utils/color.dart';
import 'package:tim_ui_kit/ui/utils/message.dart';
import 'package:tim_ui_kit/ui/widgets/recent_conversation_list.dart';

import 'package:tim_ui_kit/base_widgets/tim_ui_kit_base.dart';

class ForwardMessageScreen extends StatefulWidget {
  final bool isMergerForward;
  final int conversationType;

  const ForwardMessageScreen(
      {Key? key, this.isMergerForward = false, required this.conversationType})
      : super(key: key);

  @override
  State<StatefulWidget> createState() => _ForwardMessageScreenState();
}

class _ForwardMessageScreenState extends TIMUIKitState<ForwardMessageScreen> {
  final TUIChatViewModel model = serviceLocator<TUIChatViewModel>();
  List<V2TimConversation> _conversationList = [];
  bool isMultiSelect = false;

  String _getMergerMessageTitle() {
    if (widget.conversationType == 1) {
      final selectedMessage = model.multiSelectedMessageList.first;
      final sender = selectedMessage.sender;
      final option1 = selectedMessage.nickName ?? selectedMessage.userID;
      return sender! +
          TIM_t_para("与{{option1}}的聊天记录", "与$option1的聊天记录")(option1: option1);
    } else {
      return TIM_t("群聊的聊天记录");
    }
  }

  List<String> _getAbstractList() {
    return model.multiSelectedMessageList
        .map((e) =>
            "${e.sender}: ${model.abstractMessageBuilder != null ? model.abstractMessageBuilder!(e) : MessageUtils.getAbstractMessage(e)}")
        .toList();
  }

  _handleForwardMessage() async {
    if (widget.isMergerForward) {
      await model.sendMergerMessage(
        conversationList: _conversationList,
        title: _getMergerMessageTitle(),
        abstractList: _getAbstractList(),
        context: context,
      );
    } else {
      await model.sendForwardMessage(conversationList: _conversationList);
    }
    model.updateMultiSelectStatus(false);
    Navigator.pop(context);
  }

  @override
  Widget tuiBuild(BuildContext context, TUIKitBuildValue value) {
    final TUITheme theme = value.theme;

    return Scaffold(
      appBar: AppBar(
        title: Text(
          TIM_t("选择"),
          style: const TextStyle(
            color: Colors.white,
            fontSize: 17,
          ),
        ),
        shadowColor: theme.weakBackgroundColor,
        flexibleSpace: Container(
          decoration: BoxDecoration(
            gradient: LinearGradient(colors: [
              theme.lightPrimaryColor ?? CommonColor.lightPrimaryColor,
              theme.primaryColor ?? CommonColor.primaryColor
            ]),
          ),
        ),
        leading: TextButton(
          onPressed: () {
            if (isMultiSelect) {
              setState(() {
                isMultiSelect = false;
                _conversationList = [];
              });
            } else {
              model.updateMultiSelectStatus(false);
              Navigator.pop(context);
            }
          },
          child: Text(
            TIM_t("取消"),
            style: const TextStyle(
              color: Colors.white,
              fontSize: 16,
            ),
          ),
        ),
        actions: [
          TextButton(
            onPressed: () {
              if (!isMultiSelect) {
                setState(() {
                  isMultiSelect = true;
                });
              } else {
                _handleForwardMessage();
              }
            },
            child: Text(
              !isMultiSelect ? TIM_t("多选") : TIM_t("完成"),
              style: const TextStyle(
                color: Colors.white,
                fontSize: 16,
              ),
            ),
          )
        ],
      ),
      body: RecentForwardList(
        isMultiSelect: isMultiSelect,
        onChanged: (conversationList) {
          _conversationList = conversationList;

          if (!isMultiSelect) {
            _handleForwardMessage();
          }
        },
      ),
    );
  }
}
文件：/im-flutter-uikit/package_src/tim_ui_kit/lib/ui/widgets/gestured_image.dart
import 'package:flutter/gestures.dart';
import 'package:flutter/material.dart';
import 'package:extended_image/extended_image.dart';

Map<Object?, GestureDetails?> _gestureDetailsCache =
    <Object?, GestureDetails?>{};

///clear the gesture details
void clearGestureDetailsCache() {
  _gestureDetailsCache.clear();
}

/// scale idea from https://github.com/flutter/flutter/blob/master/examples/layers/widgets/gestures.dart
/// zoom image
class GesturedImage extends ExtendedImageGesture {
  const GesturedImage(ExtendedImageState extendedImageState,
      {ImageBuilderForGesture? imageBuilder,
      CanScaleImage? canScaleImage,
      Key? key})
      : super(extendedImageState,
            imageBuilder: imageBuilder, canScaleImage: canScaleImage, key: key);

  @override
  GesturedImageState createState() => GesturedImageState();
}

class GesturedImageState extends ExtendedImageGestureState {
  ///details for gesture
  GestureDetails? _gestureDetails;
  late Offset _normalizedOffset;
  double? _startingScale;
  late Offset _startingOffset;
  Offset? _pointerDownPosition;
  late GestureAnimation _gestureAnimation;
  GestureConfig? _gestureConfig;
  ExtendedImageGesturePageViewState? _pageViewState;
  @override
  ExtendedImageSlidePageState? get extendedImageSlidePageState =>
      widget.extendedImageState.slidePageState;

  @override
  GestureDetails? get gestureDetails => _gestureDetails;

  @override
  set gestureDetails(GestureDetails? value) {
    if (mounted) {
      setState(() {
        _gestureDetails = value;
        _gestureConfig?.gestureDetailsIsChanged?.call(_gestureDetails);
      });
    }
  }

  @override
  GestureConfig? get imageGestureConfig => _gestureConfig;

  @override
  Offset? get pointerDownPosition => _pointerDownPosition;

  @override
  Widget build(BuildContext context) {
    if (_gestureConfig!.cacheGesture) {
      _gestureDetailsCache[widget.extendedImageState.imageStreamKey] =
          _gestureDetails;
    }

    Widget image = ExtendedRawImage(
      image: widget.extendedImageState.extendedImageInfo?.image,
      width: widget.extendedImageState.imageWidget.width,
      height: widget.extendedImageState.imageWidget.height,
      scale: widget.extendedImageState.extendedImageInfo?.scale ?? 1.0,
      color: widget.extendedImageState.imageWidget.color,
      colorBlendMode: widget.extendedImageState.imageWidget.colorBlendMode,
      fit: widget.extendedImageState.imageWidget.fit,
      alignment: widget.extendedImageState.imageWidget.alignment,
      repeat: widget.extendedImageState.imageWidget.repeat,
      centerSlice: widget.extendedImageState.imageWidget.centerSlice,
      matchTextDirection:
          widget.extendedImageState.imageWidget.matchTextDirection,
      invertColors: widget.extendedImageState.invertColors,
      filterQuality: widget.extendedImageState.imageWidget.filterQuality,
      beforePaintImage: widget.extendedImageState.imageWidget.beforePaintImage,
      afterPaintImage: widget.extendedImageState.imageWidget.afterPaintImage,
      gestureDetails: _gestureDetails,
    );

    if (extendedImageSlidePageState != null) {
      image = widget.extendedImageState.imageWidget.heroBuilderForSlidingPage
              ?.call(image) ??
          image;
      if (extendedImageSlidePageState!.widget.slideType ==
          SlideType.onlyImage) {
        image = Transform.translate(
          offset: extendedImageSlidePageState!.offset,
          child: Transform.scale(
            scale: extendedImageSlidePageState!.scale,
            child: image,
          ),
        );
      }
    }

    image = widget.imageBuilder?.call(image) ?? image;

    image = GestureDetector(
      onScaleStart: handleScaleStart,
      onScaleUpdate: handleScaleUpdate,
      onScaleEnd: handleScaleEnd,
      onDoubleTap: _handleDoubleTap,
      child: image,
      behavior: _gestureConfig?.hitTestBehavior,
    );

    image = Listener(
      child: image,
      onPointerDown: _handlePointerDown,
      onPointerSignal: _handlePointerSignal,
      behavior: _gestureConfig!.hitTestBehavior,
    );

    return image;
  }

  @override
  void didChangeDependencies() {
    super.didChangeDependencies();
    _pageViewState = null;
    if (_gestureConfig!.inPageView) {
      _pageViewState =
          context.findAncestorStateOfType<ExtendedImageGesturePageViewState>();
      _pageViewState?.extendedImageGestureState = this;
    }
  }

  @override
  void didUpdateWidget(GesturedImage oldWidget) {
    super.didUpdateWidget(oldWidget);
    _initGestureConfig();
    _pageViewState = null;
    if (_gestureConfig!.inPageView) {
      _pageViewState =
          context.findAncestorStateOfType<ExtendedImageGesturePageViewState>();
      _pageViewState?.extendedImageGestureState = this;
    }
  }

  @override
  void dispose() {
    _gestureAnimation.stop();
    _gestureAnimation.dispose();
    _pageViewState?.extendedImageGestureStates.remove(this);
    super.dispose();
  }

  @override
  void handleDoubleTap({double? scale, Offset? doubleTapPosition}) {
    doubleTapPosition ??= _pointerDownPosition;
    scale ??= _gestureConfig!.initialScale;
    //scale = scale.clamp(_gestureConfig.minScale, _gestureConfig.maxScale);
    handleScaleStart(ScaleStartDetails(focalPoint: doubleTapPosition!));
    handleScaleUpdate(ScaleUpdateDetails(
      focalPoint: doubleTapPosition,
      scale: scale / _startingScale!,
      focalPointDelta: Offset.zero,
    ));
    if (scale < _gestureConfig!.minScale || scale > _gestureConfig!.maxScale) {
      handleScaleEnd(ScaleEndDetails());
    }
  }

  @override
  void initState() {
    super.initState();
    _initGestureConfig();
  }

  @override
  void reset() {
    _gestureConfig = widget
            .extendedImageState.imageWidget.initGestureConfigHandler
            ?.call(widget.extendedImageState) ??
        GestureConfig();

    gestureDetails = GestureDetails(
      totalScale: _gestureConfig!.initialScale,
      offset: Offset.zero,
    )..initialAlignment = _gestureConfig!.initialAlignment;
  }

  @override
  void slide() {
    if (mounted) {
      setState(() {
        _gestureDetails!.slidePageOffset = extendedImageSlidePageState?.offset;
      });
    }
  }

  void _handleDoubleTap() {
    if (widget.extendedImageState.imageWidget.onDoubleTap != null) {
      widget.extendedImageState.imageWidget.onDoubleTap!(this);
      return;
    }

    if (!mounted) {
      return;
    }

    gestureDetails = GestureDetails(
      offset: Offset.zero,
      totalScale: _gestureConfig!.initialScale,
    );
  }

  void _handlePointerDown(PointerDownEvent pointerDownEvent) {
    _pointerDownPosition = pointerDownEvent.position;
    _gestureAnimation.stop();

    _pageViewState?.extendedImageGestureState = this;
  }

  void _handlePointerSignal(PointerSignalEvent event) {
    if (event is PointerScrollEvent && event.kind == PointerDeviceKind.mouse) {
      handleScaleStart(ScaleStartDetails(focalPoint: event.position));
      final double dy = event.scrollDelta.dy;
      final double dx = event.scrollDelta.dx;
      handleScaleUpdate(ScaleUpdateDetails(
          focalPoint: event.position,
          scale: 1.0 +
              _reverseIf((dy.abs() > dx.abs() ? dy : dx) *
                  _gestureConfig!.speed /
                  1000.0),
          focalPointDelta: Offset.zero));
      handleScaleEnd(ScaleEndDetails());
    }
  }

  @override
  void handleScaleEnd(ScaleEndDetails details) {
    if (extendedImageSlidePageState != null &&
        extendedImageSlidePageState!.isSliding) {
      extendedImageSlidePageState!.endSlide(details);
      return;
    }

    if (_pageViewState != null && _pageViewState!.isDraging) {
      _pageViewState!.onDragEnd(DragEndDetails(
        velocity: details.velocity,
        primaryVelocity:
            _pageViewState!.widget.scrollDirection == Axis.horizontal
                ? details.velocity.pixelsPerSecond.dx
                : details.velocity.pixelsPerSecond.dy,
      ));
      return;
    }

    //animate back to maxScale if gesture exceeded the maxScale specified
    if (_gestureDetails!.totalScale!.greaterThan(_gestureConfig!.maxScale)) {
      final double velocity =
          (_gestureDetails!.totalScale! - _gestureConfig!.maxScale) /
              _gestureConfig!.maxScale;

      _gestureAnimation.animationScale(
          _gestureDetails!.totalScale, _gestureConfig!.maxScale, velocity);
      return;
    }

    //animate back to minScale if gesture fell smaller than the minScale specified
    if (_gestureDetails!.totalScale!.lessThan(_gestureConfig!.minScale)) {
      final double velocity =
          (_gestureConfig!.minScale - _gestureDetails!.totalScale!) /
              _gestureConfig!.minScale;

      _gestureAnimation.animationScale(
          _gestureDetails!.totalScale, _gestureConfig!.minScale, velocity);
      return;
    }

    if (_gestureDetails!.actionType == ActionType.pan) {
      // get magnitude from gesture velocity
      final double magnitude = details.velocity.pixelsPerSecond.distance;

      // do a significant magnitude
      if (magnitude.greaterThanOrEqualTo(minMagnitude)) {
        final Offset direction = details.velocity.pixelsPerSecond /
            magnitude *
            _gestureConfig!.inertialSpeed;

        _gestureAnimation.animationOffset(
            _gestureDetails!.offset, _gestureDetails!.offset! + direction);
      }
    }
  }

  @override
  void handleScaleStart(ScaleStartDetails details) {
    _gestureAnimation.stop();
    _normalizedOffset = (details.focalPoint - _gestureDetails!.offset!) /
        _gestureDetails!.totalScale!;
    _startingScale = _gestureDetails!.totalScale;
    _startingOffset = details.focalPoint;
  }

  @override
  void handleScaleUpdate(ScaleUpdateDetails details) {
    // 取消原组件对totalScale的判断。这样scale大于1也能执行slidePage的slide方法
    if (extendedImageSlidePageState != null &&
        _gestureDetails!.userOffset &&
        _gestureDetails!.actionType == ActionType.pan) {
      final Offset totalDelta = details.focalPointDelta;
      bool updateGesture = false;
      if (!extendedImageSlidePageState!.isSliding) {
        if (totalDelta.dx != 0 &&
            totalDelta.dx.abs().greaterThan(totalDelta.dy.abs())) {
          if (_gestureDetails!.computeHorizontalBoundary) {
            if (totalDelta.dx > 0) {
              updateGesture = _gestureDetails!.boundary.left;
            } else {
              updateGesture = _gestureDetails!.boundary.right;
            }
          } else {
            updateGesture = true;
          }
        }
        if (totalDelta.dy != 0 &&
            totalDelta.dy.abs().greaterThan(totalDelta.dx.abs())) {
          if (_gestureDetails!.computeVerticalBoundary) {
            if (totalDelta.dy < 0) {
              updateGesture = _gestureDetails!.boundary.bottom;
            } else {
              updateGesture = _gestureDetails!.boundary.top;
            }
          } else {
            updateGesture = true;
          }
        }
      } else {
        updateGesture = true;
      }

      if (details.focalPointDelta.distance.greaterThan(minGesturePageDelta) &&
          updateGesture) {
        extendedImageSlidePageState!.slide(
          details.focalPointDelta,
          extendedImageGestureState: this,
        );
      }
    }

    if (extendedImageSlidePageState != null &&
        extendedImageSlidePageState!.isSliding) {
      return;
    }

    // totalScale > 1 and page view is starting to move
    if (_pageViewState != null) {
      final ExtendedImageGesturePageViewState pageViewState = _pageViewState!;

      final Axis axis = pageViewState.widget.scrollDirection;
      final bool movePage = _pageViewState!.isDraging ||
          (details.pointerCount == 1 &&
              details.scale == 1 &&
              _gestureDetails!.movePage(details.focalPointDelta, axis));

      if (movePage) {
        if (!pageViewState.isDraging) {
          pageViewState
              .onDragDown(DragDownDetails(globalPosition: details.focalPoint));
          pageViewState.onDragStart(
              DragStartDetails(globalPosition: details.focalPoint));
          //assert(!pageViewState.isDraging);
        }
        Offset delta = details.focalPointDelta;
        delta =
            axis == Axis.horizontal ? Offset(delta.dx, 0) : Offset(0, delta.dy);

        pageViewState.onDragUpdate(DragUpdateDetails(
          globalPosition: details.focalPoint,
          delta: delta,
          primaryDelta: axis == Axis.horizontal ? delta.dx : delta.dy,
        ));

        return;
      }
    }
    final double? scale = widget.canScaleImage(_gestureDetails)
        ? clampScale(
            _startingScale! * details.scale * _gestureConfig!.speed,
            _gestureConfig!.animationMinScale,
            _gestureConfig!.animationMaxScale)
        : _gestureDetails!.totalScale;

    //Round the scale to three points after comma to prevent shaking
    //scale = roundAfter(scale, 3);
    //no more zoom
    if (details.scale != 1.0 &&
        ((_gestureDetails!.totalScale!
                    .equalTo(_gestureConfig!.animationMinScale) &&
                scale!.lessThanOrEqualTo(_gestureDetails!.totalScale!)) ||
            (_gestureDetails!.totalScale!
                    .equalTo(_gestureConfig!.animationMaxScale) &&
                scale!.greaterThanOrEqualTo(_gestureDetails!.totalScale!)))) {
      return;
    }

    final Offset offset = (details.scale == 1.0
            ? details.focalPoint * _gestureConfig!.speed
            : _startingOffset) -
        _normalizedOffset * scale!;

    if (mounted &&
        (offset != _gestureDetails!.offset ||
            scale != _gestureDetails!.totalScale)) {
      gestureDetails = GestureDetails(
          offset: offset,
          totalScale: scale,
          gestureDetails: _gestureDetails,
          actionType: details.scale != 1.0 ? ActionType.zoom : ActionType.pan);
    }
  }

  void _initGestureConfig() {
    final double? initialScale = _gestureConfig?.initialScale;
    final InitialAlignment? initialAlignment = _gestureConfig?.initialAlignment;
    _gestureConfig = widget
            .extendedImageState.imageWidget.initGestureConfigHandler
            ?.call(widget.extendedImageState) ??
        GestureConfig();

    if (_gestureDetails == null ||
        initialScale != _gestureConfig!.initialScale ||
        initialAlignment != _gestureConfig!.initialAlignment) {
      _gestureDetails = GestureDetails(
        totalScale: _gestureConfig!.initialScale,
        offset: Offset.zero,
      )..initialAlignment = _gestureConfig!.initialAlignment;
    }

    if (_gestureConfig!.cacheGesture) {
      final GestureDetails? cache =
          _gestureDetailsCache[widget.extendedImageState.imageStreamKey];
      if (cache != null) {
        _gestureDetails = cache;
      }
    }
    _gestureDetails ??= GestureDetails(
      totalScale: _gestureConfig!.initialScale,
      offset: Offset.zero,
    );

    _gestureAnimation = GestureAnimation(this, offsetCallBack: (Offset value) {
      gestureDetails = GestureDetails(
          offset: value,
          totalScale: _gestureDetails!.totalScale,
          gestureDetails: _gestureDetails);
    }, scaleCallBack: (double scale) {
      gestureDetails = GestureDetails(
          offset: _gestureDetails!.offset,
          totalScale: scale,
          gestureDetails: _gestureDetails,
          actionType: ActionType.zoom,
          userOffset: false);
    });
  }

  double _reverseIf(double scaleDetal) {
    if (_gestureConfig?.reverseMousePointerScrollDirection ?? false) {
      return -scaleDetal;
    } else {
      return scaleDetal;
    }
  }
}
文件：/im-flutter-uikit/package_src/tim_ui_kit/lib/ui/widgets/group_member_list.dart
// ignore_for_file: must_be_immutable

import 'package:azlistview/azlistview.dart';
import 'package:flutter/material.dart';
import 'package:flutter_slidable/flutter_slidable.dart';
import 'package:lpinyin/lpinyin.dart';
import 'package:provider/provider.dart';
import 'package:tencent_im_base/tencent_im_base.dart';
import 'package:tim_ui_kit/base_widgets/tim_ui_kit_state.dart';
import 'package:tim_ui_kit/business_logic/view_models/tui_theme_view_model.dart';

import 'package:tim_ui_kit/ui/utils/color.dart';
import 'package:tim_ui_kit/ui/utils/optimize_utils.dart';
import 'package:tim_ui_kit/ui/utils/tui_theme.dart';
import 'package:tim_ui_kit/ui/widgets/avatar.dart';
import 'package:tim_ui_kit/ui/widgets/az_list_view.dart';
import 'package:tim_ui_kit/ui/widgets/radio_button.dart';
import 'package:tim_ui_kit/base_widgets/tim_ui_kit_base.dart';

class GroupProfileMemberList extends StatefulWidget {
  final List<V2TimGroupMemberFullInfo?> memberList;
  final Function(String userID)? removeMember;
  final bool canSlideDelete;
  final bool canSelectMember;
  final bool canAtAll;

  // when the @ need filter some group types
  final String? groupType;
  final Function(List<V2TimGroupMemberFullInfo> selectedMember)?
      onSelectedMemberChange;
  // notice: onTapMemberItem and onSelectedMemberChange use together will triger together
  final Function(V2TimGroupMemberFullInfo memberInfo)? onTapMemberItem;
  // When sliding to the bottom bar callBack
  final Function()? touchBottomCallBack;

  final int? maxSelectNum;

  Widget? customTopArea;

  GroupProfileMemberList({
    Key? key,
    required this.memberList,
    this.groupType,
    this.removeMember,
    this.canSlideDelete = true,
    this.canSelectMember = false,
    this.canAtAll = false,
    this.onSelectedMemberChange,
    this.onTapMemberItem,
    this.customTopArea,
    this.touchBottomCallBack,
    this.maxSelectNum,
  }) : super(key: key);

  @override
  State<StatefulWidget> createState() => _GroupProfileMemberListState();
}

class _GroupProfileMemberListState
    extends TIMUIKitState<GroupProfileMemberList> {
  List<V2TimGroupMemberFullInfo> selectedMember = [];

  _getShowName(V2TimGroupMemberFullInfo? item) {
    final friendRemark = item?.friendRemark ?? "";
    final nameCard = item?.nameCard ?? "";
    final nickName = item?.nickName ?? "";
    final userID = item?.userID ?? "";
    return friendRemark.isNotEmpty
        ? friendRemark
        : nameCard.isNotEmpty
            ? nameCard
            : nickName.isNotEmpty
                ? nickName
                : userID;
  }

  List<ISuspensionBeanImpl> _getShowList(
      List<V2TimGroupMemberFullInfo?> memberList) {
    final List<ISuspensionBeanImpl> showList = List.empty(growable: true);
    for (var i = 0; i < memberList.length; i++) {
      final item = memberList[i];
      final showName = _getShowName(item);
      if (item?.role == GroupMemberRoleType.V2TIM_GROUP_MEMBER_ROLE_OWNER ||
          item?.role == GroupMemberRoleType.V2TIM_GROUP_MEMBER_ROLE_ADMIN) {
        showList.add(ISuspensionBeanImpl(memberInfo: item, tagIndex: "@"));
      } else {
        String pinyin = PinyinHelper.getPinyinE(showName);
        String tag = pinyin.substring(0, 1).toUpperCase();
        if (RegExp("[A-Z]").hasMatch(tag)) {
          showList.add(ISuspensionBeanImpl(memberInfo: item, tagIndex: tag));
        } else {
          showList.add(ISuspensionBeanImpl(memberInfo: item, tagIndex: "#"));
        }
      }
    }

    SuspensionUtil.sortListBySuspensionTag(showList);

    // add @everyone item
    if (widget.canAtAll) {
      final canAtGroupType = ["Work", "Public", "Meeting"];
      if (canAtGroupType.contains(widget.groupType)) {
        showList.insert(
            0,
            ISuspensionBeanImpl(
                memberInfo: V2TimGroupMemberFullInfo(
                    userID: "__kImSDK_MesssageAtALL__", nickName: TIM_t("所有人")),
                tagIndex: ""));
      }
    }

    return showList;
  }

  Widget _buildListItem(
      BuildContext context, V2TimGroupMemberFullInfo memberInfo) {
    final theme = Provider.of<TUIThemeViewModel>(context).theme;
    final isGroupMember =
        memberInfo.role == GroupMemberRoleType.V2TIM_GROUP_MEMBER_ROLE_MEMBER;
    return Container(
        color: Colors.white,
        child: Slidable(
            endActionPane: widget.canSlideDelete && isGroupMember
                ? ActionPane(motion: const DrawerMotion(), children: [
                    SlidableAction(
                      onPressed: (_) {
                        if (widget.removeMember != null) {
                          widget.removeMember!(memberInfo.userID);
                        }
                      },
                      flex: 1,
                      backgroundColor:
                          theme.cautionColor ?? CommonColor.cautionColor,
                      autoClose: true,
                      label: TIM_t("删除"),
                    )
                  ])
                : null,
            child: Column(children: [
              ListTile(
                tileColor: Colors.black,
                title: Row(
                  children: [
                    if (widget.canSelectMember)
                      Container(
                        margin: const EdgeInsets.only(right: 10),
                        child: CheckBoxButton(
                            onChanged: (isChecked) {
                              if (widget.maxSelectNum != null &&
                                  selectedMember.length >=
                                      widget.maxSelectNum!) {
                                return;
                              }
                              if (isChecked) {
                                selectedMember.add(memberInfo);
                              } else {
                                selectedMember.remove(memberInfo);
                              }
                              if (widget.onSelectedMemberChange != null) {
                                widget.onSelectedMemberChange!(selectedMember);
                              }
                              setState(() {});
                            },
                            isChecked: selectedMember.contains(memberInfo)),
                      ),
                    Container(
                      width: 36,
                      height: 36,
                      margin: const EdgeInsets.only(right: 10),
                      child: Avatar(
                          faceUrl: memberInfo.faceUrl ?? "",
                          showName: _getShowName(memberInfo)),
                    ),
                    Text(_getShowName(memberInfo),
                        style: const TextStyle(fontSize: 16)),
                    memberInfo.role ==
                            GroupMemberRoleType.V2TIM_GROUP_MEMBER_ROLE_OWNER
                        ? Container(
                            margin: const EdgeInsets.only(left: 5),
                            child: Text(TIM_t("群主"),
                                style: TextStyle(
                                  color: theme.ownerColor,
                                  fontSize: 12,
                                )),
                            padding: const EdgeInsets.fromLTRB(5, 0, 5, 0),
                            decoration: BoxDecoration(
                              border: Border.all(
                                  color: theme.ownerColor ??
                                      CommonColor.ownerColor,
                                  width: 1),
                              borderRadius:
                                  const BorderRadius.all(Radius.circular(4.0)),
                            ),
                          )
                        : memberInfo.role ==
                                GroupMemberRoleType
                                    .V2TIM_GROUP_MEMBER_ROLE_ADMIN
                            ? Container(
                                margin: const EdgeInsets.only(left: 5),
                                child: Text(TIM_t("管理员"),
                                    style: TextStyle(
                                      color: theme.adminColor,
                                      fontSize: 12,
                                    )),
                                padding: const EdgeInsets.fromLTRB(5, 0, 5, 0),
                                decoration: BoxDecoration(
                                  border: Border.all(
                                      color: theme.adminColor ??
                                          CommonColor.adminColor,
                                      width: 1),
                                  borderRadius: const BorderRadius.all(
                                      Radius.circular(4.0)),
                                ),
                              )
                            : Container()
                  ],
                ),
                onTap: () {
                  if (widget.onTapMemberItem != null) {
                    widget.onTapMemberItem!(memberInfo);
                  }
                  if (widget.canSelectMember) {
                    if (widget.maxSelectNum != null &&
                        selectedMember.length >= widget.maxSelectNum!) {
                      return;
                    }
                    final isChecked = selectedMember.contains(memberInfo);
                    if (isChecked) {
                      selectedMember.remove(memberInfo);
                    } else {
                      selectedMember.add(memberInfo);
                    }
                    if (widget.onSelectedMemberChange != null) {
                      widget.onSelectedMemberChange!(selectedMember);
                    }
                    setState(() {});
                  }
                },
              ),
              Divider(
                  thickness: 1,
                  indent: 74,
                  endIndent: 0,
                  color: theme.weakBackgroundColor,
                  height: 0)
            ])));
  }

  static Widget getSusItem(BuildContext context, TUITheme theme, String tag,
      {double susHeight = 40}) {
    if (tag == '@') {
      tag = TIM_t("群主、管理员");
    }
    return Container(
      height: susHeight,
      width: MediaQuery.of(context).size.width,
      padding: const EdgeInsets.only(left: 16.0),
      color: theme.weakBackgroundColor,
      alignment: Alignment.centerLeft,
      child: Text(
        tag,
        softWrap: true,
        style: TextStyle(
          fontSize: 14.0,
          color: theme.darkTextColor,
        ),
      ),
    );
  }

  @override
  Widget tuiBuild(BuildContext context, TUIKitBuildValue value) {
    final TUITheme theme = value.theme;

    final throteFunction =
        OptimizeUtils.throttle((ScrollNotification notification) {
      final pixels = notification.metrics.pixels;
      // 总像素高度
      final maxScrollExtent = notification.metrics.maxScrollExtent;
      // 滑动百分比
      final progress = pixels / maxScrollExtent;
      if (progress >= 0.9 && widget.touchBottomCallBack != null) {
        widget.touchBottomCallBack!();
      }
    }, 300);
    final showList = _getShowList(widget.memberList);
    return Container(
      color: theme.weakBackgroundColor,
      child: SafeArea(
          child: Column(
        children: [
          widget.customTopArea != null ? widget.customTopArea! : Container(),
          Expanded(
              child: NotificationListener<ScrollNotification>(
            onNotification: (ScrollNotification notification) {
              throteFunction(notification);
              return true;
            },
            child: AZListViewContainer(
                memberList: showList,
                susItemBuilder: (context, index) {
                  final model = showList[index];
                  return getSusItem(context, theme, model.getSuspensionTag());
                },
                itemBuilder: (context, index) {
                  final memberInfo =
                      showList[index].memberInfo as V2TimGroupMemberFullInfo;

                  return _buildListItem(context, memberInfo);
                }),
          ))
        ],
      )),
    );
  }
}
文件：/im-flutter-uikit/package_src/tim_ui_kit/lib/ui/widgets/image_hero.dart
import 'package:extended_image/extended_image.dart';
import 'package:flutter/material.dart';
import 'package:tim_ui_kit/base_widgets/tim_ui_kit_state.dart';
import 'package:tim_ui_kit/base_widgets/tim_ui_kit_base.dart';

/// make hero better when slide out
class HeroWidget extends StatefulWidget {
  const HeroWidget(
      {required this.child,
      required this.tag,
      required this.slidePagekey,
      this.slideType = SlideType.onlyImage,
      Key? key})
      : super(key: key);
  final Widget child;
  final SlideType slideType;
  final Object tag;
  final GlobalKey<ExtendedImageSlidePageState> slidePagekey;
  @override
  _HeroWidgetState createState() => _HeroWidgetState();
}

class _HeroWidgetState extends TIMUIKitState<HeroWidget> {
  RectTween? _rectTween;
  @override
  Widget tuiBuild(BuildContext context, TUIKitBuildValue value) {
    return Hero(
      tag: widget.tag,
      createRectTween: (Rect? begin, Rect? end) {
        _rectTween = RectTween(begin: begin, end: end);
        return _rectTween!;
      },
      // make hero better when slide out
      flightShuttleBuilder: (BuildContext flightContext,
          Animation<double> animation,
          HeroFlightDirection flightDirection,
          BuildContext fromHeroContext,
          BuildContext toHeroContext) {
        // make hero more smoothly
        final Hero hero = (flightDirection == HeroFlightDirection.pop
            ? fromHeroContext.widget
            : toHeroContext.widget) as Hero;
        if (_rectTween == null) {
          return hero;
        }

        if (flightDirection == HeroFlightDirection.pop) {
          final bool fixTransform = widget.slideType == SlideType.onlyImage &&
              (widget.slidePagekey.currentState!.offset != Offset.zero ||
                  widget.slidePagekey.currentState!.scale != 1.0);

          final Widget toHeroWidget = (toHeroContext.widget as Hero).child;
          return AnimatedBuilder(
            animation: animation,
            builder: (BuildContext buildContext, Widget? child) {
              Widget animatedBuilderChild = hero.child;

              // make hero more smoothly
              animatedBuilderChild = Stack(
                clipBehavior: Clip.antiAlias,
                alignment: Alignment.center,
                children: <Widget>[
                  Opacity(
                    opacity: 1 - animation.value,
                    child: UnconstrainedBox(
                      child: SizedBox(
                        width: _rectTween!.begin!.width,
                        height: _rectTween!.begin!.height,
                        child: toHeroWidget,
                      ),
                    ),
                  ),
                  Opacity(
                    opacity: animation.value,
                    child: animatedBuilderChild,
                  )
                ],
              );

              // fix transform when slide out
              if (fixTransform) {
                final Tween<Offset> offsetTween = Tween<Offset>(
                    begin: Offset.zero,
                    end: widget.slidePagekey.currentState!.offset);

                final Tween<double> scaleTween = Tween<double>(
                    begin: 1.0, end: widget.slidePagekey.currentState!.scale);
                animatedBuilderChild = Transform.translate(
                  offset: offsetTween.evaluate(animation),
                  child: Transform.scale(
                    scale: scaleTween.evaluate(animation),
                    child: animatedBuilderChild,
                  ),
                );
              }

              return animatedBuilderChild;
            },
          );
        }
        return hero.child;
      },
      child: widget.child,
    );
  }
}
文件：/im-flutter-uikit/package_src/tim_ui_kit/lib/ui/widgets/image_screen.dart
import 'dart:math';

import 'package:extended_image/extended_image.dart';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:tim_ui_kit/base_widgets/tim_ui_kit_state.dart';
import 'package:tim_ui_kit/ui/widgets/center_loading.dart';
import 'package:tim_ui_kit/ui/widgets/gestured_image.dart';
import 'package:tim_ui_kit/base_widgets/tim_ui_kit_base.dart';
import 'package:tim_ui_kit/ui/widgets/image_hero.dart';

typedef DoubleClickAnimationListener = void Function();

class ImageScreen extends StatefulWidget {
  const ImageScreen(
      {required this.imageProvider,
      required this.heroTag,
      required this.downloadFn,
      required this.messageID,
      Key? key})
      : super(key: key);

  final ImageProvider imageProvider;
  final String heroTag;
  final String? messageID;
  final void Function() downloadFn;

  @override
  State<StatefulWidget> createState() {
    return _ImageScreenState();
  }
}

class _ImageScreenState extends TIMUIKitState<ImageScreen>
    with TickerProviderStateMixin {
  Animation<double>? _doubleClickAnimation;
  late DoubleClickAnimationListener _doubleClickAnimationListener;
  late AnimationController _doubleClickAnimationController;
  List<double> doubleTapScales = <double>[1.0, 2.0];
  double currentScale = 1.0;
  double fittedScale = 1.0;
  double initialScale = 1.0;
  GlobalKey<ExtendedImageSlidePageState> slidePagekey =
      GlobalKey<ExtendedImageSlidePageState>();

  GlobalKey<ExtendedImageGestureState> extendedImageGestureKey =
      GlobalKey<ExtendedImageGestureState>();

  void close() {
    slidePagekey.currentState!.popPage();
    Navigator.pop(context);
  }

  @override
  void initState() {
    super.initState();
    // 允许横屏
    SystemChrome.setPreferredOrientations([
      DeviceOrientation.landscapeLeft,
      DeviceOrientation.landscapeRight,
      DeviceOrientation.portraitUp,
      DeviceOrientation.portraitDown,
    ]);
    _doubleClickAnimationController = AnimationController(
        duration: const Duration(milliseconds: 150), vsync: this);
  }

  @override
  void dispose() {
    SystemChrome.setPreferredOrientations([
      DeviceOrientation.portraitUp,
    ]);
    _doubleClickAnimationController.dispose();
    super.dispose();
  }

  @override
  Widget tuiBuild(BuildContext context, TUIKitBuildValue value) {
    return OrientationBuilder(builder: ((context, orientation) {
      return Container(
          color: Colors.transparent,
          constraints: BoxConstraints.expand(
            height: MediaQuery.of(context).size.height,
          ),
          child: Stack(children: [
            Positioned(
              top: 0,
              left: 0,
              bottom: 0,
              right: 0,
              child: ExtendedImageSlidePage(
                key: slidePagekey,
                slideAxis: SlideAxis.both,
                slidePageBackgroundHandler: (Offset offset, Size size) {
                  if (orientation == Orientation.landscape) {
                    return Colors.black;
                  }
                  double opacity = 0.0;
                  opacity = offset.distance /
                      (Offset(size.width, size.height).distance / 2.0);
                  return Colors.black
                      .withOpacity(min(1.0, max(1.0 - opacity, 0.0)));
                },
                slideType: SlideType.onlyImage,
                slideEndHandler: (
                  Offset offset, {
                  ExtendedImageSlidePageState? state,
                  ScaleEndDetails? details,
                }) {
                  final vy = details?.velocity.pixelsPerSecond.dy ?? 0;
                  final oy = offset.dy;
                  if (vy > 300 || oy > 100) {
                    return true;
                  }
                  return null;
                },
                child: GestureDetector(
                  onTap: close,
                  child: ExtendedImageGesturePageView.builder(
                      scrollDirection: Axis.horizontal,
                      controller: ExtendedPageController(
                        initialPage: 0,
                        pageSpacing: 0,
                        shouldIgnorePointerWhenScrolling: false,
                      ),
                      itemCount: 1,
                      physics: const BouncingScrollPhysics(),
                      itemBuilder: (context, index) {
                        return HeroWidget(
                            tag: widget.heroTag,
                            slidePagekey: slidePagekey,
                            child: ExtendedImage(
                              image: widget.imageProvider,
                              extendedImageGestureKey: extendedImageGestureKey,
                              enableSlideOutPage: true,
                              fit: BoxFit.contain,
                              initGestureConfigHandler: (state) {
                                return GestureConfig(
                                  minScale: 0.8,
                                  animationMinScale: 0.6,
                                  maxScale: 2 * fittedScale,
                                  animationMaxScale: 2.5 * fittedScale,
                                  speed: 1.0,
                                  inertialSpeed: 100.0,
                                  initialScale: initialScale,
                                  initialAlignment: InitialAlignment.topCenter,
                                  hitTestBehavior: HitTestBehavior.opaque,
                                );
                              },
                              loadStateChanged: (ExtendedImageState state) {
                                switch (state.extendedImageLoadState) {
                                  case LoadState.loading:
                                    return Container(
                                        color: Colors.black,
                                        child: const Center(
                                            child: CircularProgressIndicator(
                                                color: Colors.white)));
                                  case LoadState.completed:
                                    final screenHeight =
                                        MediaQuery.of(context).size.height;
                                    final screenWidth =
                                        MediaQuery.of(context).size.width;
                                    final imgHeight =
                                        state.extendedImageInfo?.image.height ??
                                            1;
                                    final imgWidth =
                                        state.extendedImageInfo?.image.width ??
                                            0;
                                    final imgRatio = imgWidth / imgHeight;
                                    final screenRatio =
                                        screenWidth / screenHeight;
                                    final fitWidthScale =
                                        screenRatio / imgRatio;
                                    if (screenRatio > imgRatio) {
                                      // Long Image
                                      initialScale = fitWidthScale;
                                      fittedScale = fitWidthScale;
                                      doubleTapScales[1] = fitWidthScale;
                                    } else {
                                      fittedScale =
                                          1 / fitWidthScale; // fittedHeight
                                      doubleTapScales[1] = 1 / fitWidthScale;
                                    }
                                    return GesturedImage(state,
                                        key: extendedImageGestureKey);
                                  case LoadState.failed:
                                    break;
                                }
                                return null;
                              },
                              onDoubleTap: (ExtendedImageGestureState state) {
                                ///you can use define pointerDownPosition as you can,
                                ///default value is double tap pointer down postion.
                                final Offset? pointerDownPosition =
                                    state.pointerDownPosition;
                                final double? begin =
                                    state.gestureDetails!.totalScale;
                                double end;

                                //remove old
                                _doubleClickAnimation?.removeListener(
                                    _doubleClickAnimationListener);

                                //stop pre
                                _doubleClickAnimationController.stop();

                                //reset to use
                                _doubleClickAnimationController.reset();

                                if (begin == doubleTapScales[0]) {
                                  end = doubleTapScales[1];
                                } else {
                                  end = doubleTapScales[0];
                                }

                                _doubleClickAnimationListener = () {
                                  //print(_animation.value);
                                  state.handleDoubleTap(
                                      scale: _doubleClickAnimation!.value,
                                      doubleTapPosition: pointerDownPosition);
                                };
                                _doubleClickAnimation =
                                    _doubleClickAnimationController.drive(
                                        Tween<double>(begin: begin, end: end));

                                _doubleClickAnimation!
                                    .addListener(_doubleClickAnimationListener);

                                _doubleClickAnimationController.forward();
                              },
                              mode: ExtendedImageMode.gesture,
                            ));
                      }),
                ),
              ),
            ),
            Positioned(
                left: 10,
                bottom: 50,
                child: IconButton(
                  icon: Image.asset(
                    'images/close.png',
                    package: 'tim_ui_kit',
                  ),
                  iconSize: 30,
                  onPressed: close,
                )),
            Positioned(
              right: 10,
              bottom: 50,
              child: IconButton(
                icon: Image.asset(
                  'images/download.png',
                  package: 'tim_ui_kit',
                ),
                iconSize: 30,
                onPressed: widget.downloadFn,
              ),
            ),
            CenterLoading(messageID: widget.messageID),
          ]));
    }));
  }
}
文件：/im-flutter-uikit/package_src/tim_ui_kit/lib/ui/widgets/keepalive_wrapper.dart
import 'package:flutter/widgets.dart';

class KeepAliveWrapper extends StatefulWidget {
  const KeepAliveWrapper({
    Key? key,
    this.keepAlive = true,
    required this.child,
  }) : super(key: key);
  final bool keepAlive;
  final Widget child;

  @override
  _KeepAliveWrapperState createState() => _KeepAliveWrapperState();
}

class _KeepAliveWrapperState extends State<KeepAliveWrapper>
    with AutomaticKeepAliveClientMixin {
  @override
  Widget build(BuildContext context) {
    super.build(context);
    return widget.child;
  }

  @override
  void didUpdateWidget(covariant KeepAliveWrapper oldWidget) {
    if (oldWidget.keepAlive != widget.keepAlive) {
      // keepAlive 状态需要更新，实现在 AutomaticKeepAliveClientMixin 中
      updateKeepAlive();
    }
    super.didUpdateWidget(oldWidget);
  }

  @override
  bool get wantKeepAlive => widget.keepAlive;
}
文件：/im-flutter-uikit/package_src/tim_ui_kit/lib/ui/widgets/loading.dart
import 'package:flutter/widgets.dart';

class Loading extends StatefulWidget {
  final double width;
  final double height;

  const Loading({Key? key, this.width = 14, this.height = 14})
      : super(key: key);

  @override
  State<StatefulWidget> createState() => _LoadingState();
}

class _LoadingState extends State<Loading> with TickerProviderStateMixin {
  late AnimationController _animationController;

  @override
  initState() {
    // 初始化旋转动画
    _animationController =
        AnimationController(duration: const Duration(seconds: 1), vsync: this);
    _animationController.forward();
    _animationController.addStatusListener((status) {
      if (status == AnimationStatus.completed) {
        _animationController.reset();
        _animationController.forward();
      }
    });
    super.initState();
  }

  @override
  void dispose() {
    _animationController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return RotationTransition(
      turns: Tween(begin: .0, end: .9).animate(_animationController),
      child: Image.asset(
        "images/message_sending.png",
        package: 'tim_ui_kit',
        height: widget.width,
        width: widget.height,
      ),
    );
  }
}
文件：/im-flutter-uikit/package_src/tim_ui_kit/lib/ui/widgets/merger_message_screen.dart
import 'dart:convert';

import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:tim_ui_kit/base_widgets/tim_ui_kit_statelesswidget.dart';
import 'package:tencent_im_base/tencent_im_base.dart';
import 'package:tim_ui_kit/business_logic/view_models/tui_theme_view_model.dart';

import 'package:tim_ui_kit/ui/utils/color.dart';
import 'package:tim_ui_kit/ui/utils/tui_theme.dart';
import 'package:tim_ui_kit/ui/views/TIMUIKitChat/TIMUIKitMessageItem/main.dart';
import 'package:tim_ui_kit/ui/views/TIMUIKitChat/TIMUIKitMessageItem/tim_uikit_chat_face_elem.dart';
import 'package:tim_ui_kit/ui/widgets/avatar.dart';
import 'package:tim_ui_kit/base_widgets/tim_ui_kit_base.dart';

class MergerMessageScreen extends TIMUIKitStatelessWidget {
  final List<V2TimMessage> messageList;

  MergerMessageScreen({Key? key, required this.messageList}) : super(key: key);

  bool isReplyMessage(V2TimMessage message) {
    final hasCustomdata =
        message.cloudCustomData != null && message.cloudCustomData != "";
    if (hasCustomdata) {
      bool canparse = false;
      try {
        final messageCloudCustomData = json.decode(message.cloudCustomData!);
        CloudCustomData.fromJson(messageCloudCustomData);
        canparse = true;
      } catch (error) {
        canparse = false;
      }
      return canparse;
    }
    return hasCustomdata;
  }

  Widget _getMsgItem(V2TimMessage message) {
    final type = message.elemType;
    final isFromSelf = message.isSelf ?? false;

    switch (type) {
      case MessageElemType.V2TIM_ELEM_TYPE_CUSTOM:
        return Text(TIM_t("[自定义]"));
      case MessageElemType.V2TIM_ELEM_TYPE_SOUND:
        return TIMUIKitSoundElem(
            soundElem: message.soundElem!,
            msgID: message.msgID ?? "",
            isFromSelf: isFromSelf,
            localCustomInt: message.localCustomInt);
      case MessageElemType.V2TIM_ELEM_TYPE_TEXT:
        if (isReplyMessage(message)) {
          return TIMUIKitReplyElem(
              message: message, scrollToIndex: () {}, clearJump: () {});
        }

        return Text(
          message.textElem!.text!,
          softWrap: true,
          style: const TextStyle(fontSize: 16),
        );
      // return Text(message.textElem!.text!);
      case MessageElemType.V2TIM_ELEM_TYPE_FACE:
        return TIMUIKitFaceElem(path: message.faceElem?.data ?? "");
      case MessageElemType.V2TIM_ELEM_TYPE_FILE:
        return TIMUIKitFileElem(
            messageID: message.msgID,
            fileElem: message.fileElem,
            isSelf: isFromSelf);
      case MessageElemType.V2TIM_ELEM_TYPE_IMAGE:
        return TIMUIKitImageElem(
          message: message,
          isFrom: "merger",
          key: Key("${message.seq}_${message.timestamp}"),
        );
      case MessageElemType.V2TIM_ELEM_TYPE_VIDEO:
        return TIMUIKitVideoElem(message, isFrom: "merger");
      case MessageElemType.V2TIM_ELEM_TYPE_LOCATION:
        return Text(TIM_t("[位置]"));
      case MessageElemType.V2TIM_ELEM_TYPE_MERGER:
        return TIMUIKitMergerElem(
            mergerElem: message.mergerElem!,
            isSelf: isFromSelf,
            messageID: message.msgID!);
      default:
        return Text(TIM_t("未知消息"));
    }
  }

  double getMaxWidth(BuildContext context) {
    final size = MediaQuery.of(context).size;
    final width = size.width;
    return width - 150;
  }

  Widget _itemBuilder(V2TimMessage message, BuildContext context) {
    final faceUrl = message.faceUrl ?? "";
    final showName = message.nickName ?? message.userID ?? "";
    final theme = Provider.of<TUIThemeViewModel>(context).theme;
    return Container(
      margin: const EdgeInsets.only(bottom: 20),
      child: Row(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          SizedBox(
            width: 40,
            height: 40,
            child: Avatar(faceUrl: faceUrl, showName: showName),
          ),
          const SizedBox(
            width: 12,
          ),
          Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text(showName,
                  style: TextStyle(fontSize: 12, color: theme.weakTextColor)),
              const SizedBox(
                height: 4,
              ),
              ConstrainedBox(
                constraints: BoxConstraints(maxWidth: getMaxWidth(context)),
                child: _getMsgItem(message),
              )
            ],
          )
        ],
      ),
    );
  }

  @override
  Widget tuiBuild(BuildContext context, TUIKitBuildValue value) {
    final TUITheme theme = value.theme;

    return Scaffold(
      appBar: AppBar(
          title: Text(
            TIM_t("聊天记录"),
            style: const TextStyle(color: Colors.white, fontSize: 17),
          ),
          shadowColor: theme.weakDividerColor,
          flexibleSpace: Container(
            decoration: BoxDecoration(
              gradient: LinearGradient(colors: [
                theme.lightPrimaryColor ?? CommonColor.lightPrimaryColor,
                theme.primaryColor ?? CommonColor.primaryColor
              ]),
            ),
          ),
          iconTheme: const IconThemeData(
            color: Colors.white,
          )),
      body: Padding(
        padding: const EdgeInsets.all(16),
        child: ListView.builder(
          itemCount: messageList.length,
          itemBuilder: (context, index) {
            final messageItem = messageList[index];
            return _itemBuilder(messageItem, context);
          },
        ),
      ),
    );
  }
}
文件：/im-flutter-uikit/package_src/tim_ui_kit/lib/ui/widgets/message_read_receipt.dart
import 'package:flutter/material.dart';
// ignore: unused_import
import 'package:provider/provider.dart';
import 'package:tim_ui_kit/base_widgets/tim_ui_kit_state.dart';
import 'package:tencent_im_base/tencent_im_base.dart';
import 'package:tim_ui_kit/business_logic/view_models/tui_chat_view_model.dart';
import 'package:tim_ui_kit/data_services/services_locatar.dart';

import 'package:tim_ui_kit/ui/utils/color.dart';
import 'package:tim_ui_kit/ui/utils/message.dart';
import 'package:tim_ui_kit/ui/utils/time_ago.dart';
import 'package:tim_ui_kit/ui/utils/tui_theme.dart';
import 'package:tim_ui_kit/ui/views/TIMUIKitChat/TIMUIKitMessageItem/tim_uikit_chat_face_elem.dart';
import 'package:tim_ui_kit/ui/views/TIMUIKitChat/TIMUIKitMessageItem/tim_uikit_chat_file_elem.dart';
import 'package:tim_ui_kit/ui/views/TIMUIKitChat/TIMUIKitMessageItem/tim_uikit_chat_image_elem.dart';
import 'package:tim_ui_kit/ui/views/TIMUIKitChat/TIMUIKitMessageItem/tim_uikit_chat_sound_elem.dart';
import 'package:tim_ui_kit/ui/views/TIMUIKitChat/TIMUIKitMessageItem/tim_uikit_chat_video_elem.dart';
import 'package:tim_ui_kit/ui/views/TIMUIKitChat/TIMUIKitMessageItem/tim_uikit_merger_message_elem.dart';
import 'package:tim_ui_kit/ui/widgets/avatar.dart';
import 'package:tim_ui_kit/base_widgets/tim_ui_kit_base.dart';

class MessageReadReceipt extends StatefulWidget {
  final V2TimMessage messageItem;
  final int unreadCount;
  final int readCount;
  final void Function(String userID)? onTapAvatar;

  const MessageReadReceipt(
      {Key? key,
      required this.messageItem,
      required this.unreadCount,
      required this.readCount,
      this.onTapAvatar})
      : super(key: key);

  @override
  State<StatefulWidget> createState() => _MessageReadReceiptState();
}

class _MessageReadReceiptState extends TIMUIKitState<MessageReadReceipt> {
  final TUIChatViewModel _model = serviceLocator<TUIChatViewModel>();
  bool readMemberIsFinished = false;
  bool unreadMemberIsFinished = false;
  int readMemberListNextSeq = 0;
  int unreadMemberListNextSeq = 0;
  List<V2TimGroupMemberInfo> readMemberList = [];
  List<V2TimGroupMemberInfo> unreadMemberList = [];
  int currentIndex = 0;

  _getUnreadMemberList() async {
    final unReadMemberRes = await _model.getGroupMessageReadMemberList(
        widget.messageItem.msgID!,
        GetGroupMessageReadMemberListFilter
            .V2TIM_GROUP_MESSAGE_READ_MEMBERS_FILTER_UNREAD,
        unreadMemberListNextSeq);
    if (unReadMemberRes.code == 0) {
      final res = unReadMemberRes.data;
      if (res != null) {
        unreadMemberList = [...unreadMemberList, ...res.memberInfoList];
        unreadMemberIsFinished = res.isFinished;
        unreadMemberListNextSeq = res.nextSeq;
      }
    }
    setState(() {});
  }

  _getReadMemberList() async {
    final readMemberRes = await _model.getGroupMessageReadMemberList(
      widget.messageItem.msgID!,
      GetGroupMessageReadMemberListFilter
          .V2TIM_GROUP_MESSAGE_READ_MEMBERS_FILTER_READ,
      readMemberListNextSeq,
    );
    if (readMemberRes.code == 0) {
      final res = readMemberRes.data;
      if (res != null) {
        readMemberList = [...readMemberList, ...res.memberInfoList];
        readMemberIsFinished = res.isFinished;
        readMemberListNextSeq = res.nextSeq;
      }
    }
    setState(() {});
  }

  @override
  void initState() {
    super.initState();
    _getReadMemberList();
    _getUnreadMemberList();
  }

  Widget _getMsgItem(V2TimMessage message) {
    final type = message.elemType;
    final isFromSelf = message.isSelf ?? false;

    switch (type) {
      case MessageElemType.V2TIM_ELEM_TYPE_CUSTOM:
        return Text(TIM_t("[自定义]"));
      case MessageElemType.V2TIM_ELEM_TYPE_SOUND:
        return TIMUIKitSoundElem(
            soundElem: message.soundElem!,
            msgID: message.msgID ?? "",
            isFromSelf: isFromSelf,
            localCustomInt: message.localCustomInt);
      case MessageElemType.V2TIM_ELEM_TYPE_TEXT:
        return Text(
          message.textElem!.text!,
          softWrap: true,
          style: const TextStyle(fontSize: 16),
        );
      // return Text(message.textElem!.text!);
      case MessageElemType.V2TIM_ELEM_TYPE_FACE:
        return TIMUIKitFaceElem(path: message.faceElem?.data ?? "");
      case MessageElemType.V2TIM_ELEM_TYPE_FILE:
        return TIMUIKitFileElem(
            messageID: message.msgID,
            fileElem: message.fileElem,
            isSelf: isFromSelf);
      case MessageElemType.V2TIM_ELEM_TYPE_IMAGE:
        return TIMUIKitImageElem(
          message: message,
          isFrom: "merger",
          key: Key("${message.seq}_${message.timestamp}"),
        );
      case MessageElemType.V2TIM_ELEM_TYPE_VIDEO:
        return TIMUIKitVideoElem(message, isFrom: "merger");
      case MessageElemType.V2TIM_ELEM_TYPE_LOCATION:
        return Text(TIM_t("[位置]"));
      case MessageElemType.V2TIM_ELEM_TYPE_MERGER:
        return TIMUIKitMergerElem(
            mergerElem: message.mergerElem!,
            isSelf: isFromSelf,
            messageID: message.msgID!);
      default:
        return Text(TIM_t("未知消息"));
    }
  }

  _getShowName(V2TimGroupMemberInfo item) {
    final friendRemark = item.friendRemark ?? "";
    final nickName = item.nickName ?? "";
    final userID = item.userID;
    final showName = nickName != "" ? nickName : userID;
    return friendRemark != "" ? friendRemark : showName;
  }

  Widget _memberItemBuilder(V2TimGroupMemberInfo item, TUITheme theme) {
    final faceUrl = item.faceUrl ?? '';
    final showName = _getShowName(item);
    return InkWell(
      onTap: () {
        if (widget.onTapAvatar != null) {
          widget.onTapAvatar!(item.userID!);
        }
      },
      child: Container(
        padding: const EdgeInsets.only(top: 10, left: 16),
        child: Row(
          children: [
            Container(
              height: 40,
              width: 40,
              margin: const EdgeInsets.only(right: 12),
              child: Avatar(faceUrl: faceUrl, showName: showName),
            ),
            Expanded(
                child: Container(
              alignment: Alignment.centerLeft,
              padding: const EdgeInsets.only(top: 10, bottom: 19, right: 28),
              decoration: BoxDecoration(
                  border: Border(
                      bottom: BorderSide(
                          color: theme.weakDividerColor ??
                              CommonColor.weakDividerColor))),
              child: Text(
                showName,
                style: const TextStyle(color: Colors.black, fontSize: 18),
              ),
            )),
          ],
        ),
      ),
    );
  }

  @override
  Widget tuiBuild(BuildContext context, TUIKitBuildValue value) {
    final TUITheme theme = value.theme;

    final option1 = widget.readCount;
    final option2 = widget.unreadCount;
    return DefaultTabController(
      length: 2,
      child: Scaffold(
        appBar: AppBar(
            title: Text(
              TIM_t("消息详情"),
              style: const TextStyle(color: Colors.white, fontSize: 17),
            ),
            shadowColor: theme.weakDividerColor,
            flexibleSpace: Container(
              decoration: BoxDecoration(
                gradient: LinearGradient(colors: [
                  theme.lightPrimaryColor ?? CommonColor.lightPrimaryColor,
                  theme.primaryColor ?? CommonColor.primaryColor
                ]),
              ),
            ),
            iconTheme: const IconThemeData(
              color: Colors.white,
            )),
        body: Container(
          color: Colors.white,
          child: Column(
            children: [
              Padding(
                padding:
                    const EdgeInsets.symmetric(vertical: 10, horizontal: 12),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Row(
                      children: [
                        Text(MessageUtils.getDisplayName(widget.messageItem)),
                        const SizedBox(
                          width: 8,
                        ),
                        Text(
                          TimeAgo().getTimeForMessage(
                              widget.messageItem.timestamp ?? 0),
                          softWrap: true,
                          style: TextStyle(
                              fontSize: 12, color: theme.weakTextColor),
                        )
                      ],
                    ),
                    const SizedBox(
                      height: 6,
                    ),
                    _getMsgItem(widget.messageItem)
                  ],
                ),
              ),
              Container(
                height: 8,
                color: theme.weakBackgroundColor,
              ),
              Row(
                // direction: Axis.horizontal,
                children: <Widget>[
                  Expanded(
                    flex: 1,
                    child: InkWell(
                      onTap: () {
                        currentIndex = 0;
                        setState(() {});
                      },
                      child: Container(
                        height: 50.0,
                        alignment: Alignment.bottomCenter,
                        padding: const EdgeInsets.only(bottom: 5),
                        decoration: BoxDecoration(
                            color: Colors.white,
                            border: Border(
                                bottom: BorderSide(
                                    width: 2,
                                    color: currentIndex == 0
                                        ? theme.primaryColor!
                                        : Colors.white))),
                        child: Text(
                          TIM_t_para("{{option1}}人已读", "$option1人已读")(
                              option1: option1),
                          style: TextStyle(
                              color: currentIndex != 0
                                  ? theme.weakTextColor
                                  : Colors.black,
                              fontSize: 18,
                              fontWeight: FontWeight.bold),
                        ),
                      ),
                    ),
                  ),
                  Expanded(
                    flex: 1,
                    child: InkWell(
                      onTap: () {
                        currentIndex = 1;
                        setState(() {});
                      },
                      child: Container(
                        alignment: Alignment.bottomCenter,
                        height: 50.0,
                        padding: const EdgeInsets.only(bottom: 5),
                        decoration: BoxDecoration(
                            color: Colors.white,
                            border: Border(
                                bottom: BorderSide(
                                    width: 2,
                                    color: currentIndex == 1
                                        ? theme.primaryColor!
                                        : Colors.white))),
                        child: Text(
                          TIM_t_para("{{option2}}人未读", "$option2人未读")(
                              option2: option2),
                          style: TextStyle(
                              color: currentIndex != 1
                                  ? theme.weakTextColor
                                  : Colors.black,
                              fontSize: 18,
                              fontWeight: FontWeight.bold),
                        ),
                      ),
                    ),
                  ),
                ],
              ),
              Container(
                height: 1,
                decoration: BoxDecoration(
                    border: Border(
                        bottom: BorderSide(
                            color: theme.weakDividerColor ??
                                CommonColor.weakDividerColor))),
              ),
              Expanded(
                  child: IndexedStack(
                index: currentIndex,
                children: [
                  ListView.builder(
                      itemCount: readMemberList.length,
                      itemBuilder: (context, index) {
                        if (!readMemberIsFinished &&
                            index == readMemberList.length - 5) {
                          _getReadMemberList();
                        }
                        return _memberItemBuilder(readMemberList[index], theme);
                      }),
                  ListView.builder(
                      itemCount: unreadMemberList.length,
                      itemBuilder: (context, index) {
                        if (!unreadMemberIsFinished &&
                            index == unreadMemberList.length - 5) {
                          _getUnreadMemberList();
                        }
                        return _memberItemBuilder(
                            unreadMemberList[index], theme);
                      }),
                ],
              )),
            ],
          ),
        ),
      ),
    );
  }
}
文件：/im-flutter-uikit/package_src/tim_ui_kit/lib/ui/widgets/radio_button.dart
import 'package:flutter/material.dart';
import 'package:tim_ui_kit/base_widgets/tim_ui_kit_statelesswidget.dart';
import 'package:tim_ui_kit/ui/utils/color.dart';
import 'package:tim_ui_kit/ui/utils/tui_theme.dart';
import 'package:tim_ui_kit/base_widgets/tim_ui_kit_base.dart';

class CheckBoxButton extends TIMUIKitStatelessWidget {
  final bool isChecked;
  final Function(bool isChecked)? onChanged;

  CheckBoxButton({Key? key, required this.isChecked, this.onChanged})
      : super(key: key);

  @override
  Widget tuiBuild(BuildContext context, TUIKitBuildValue value) {
    final TUITheme theme = value.theme;

    final boxDecoration = !isChecked
        ? BoxDecoration(
            border: Border.all(color: hexToColor("888888")),
            shape: BoxShape.circle,
            color: Colors.white)
        : BoxDecoration(shape: BoxShape.circle, color: theme.primaryColor);
    return Center(
        child: InkWell(
      onTap: () {
        if (onChanged != null) {
          onChanged!(!isChecked);
        }
      },
      child: Container(
        height: 22,
        width: 22,
        decoration: boxDecoration,
        child: const Icon(
          Icons.check,
          size: 11.0,
          color: Colors.white,
        ),
      ),
    ));
  }
}
文件：/im-flutter-uikit/package_src/tim_ui_kit/lib/ui/widgets/recent_conversation_list.dart
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:tim_ui_kit/base_widgets/tim_ui_kit_state.dart';
import 'package:tim_ui_kit/business_logic/view_models/tui_conversation_view_model.dart';
import 'package:tim_ui_kit/ui/utils/tui_theme.dart';
import 'package:tim_ui_kit/ui/widgets/avatar.dart';
import 'package:tim_ui_kit/ui/widgets/az_list_view.dart';
import 'package:tim_ui_kit/ui/widgets/radio_button.dart';
import 'package:tencent_im_base/tencent_im_base.dart';

import 'package:tim_ui_kit/base_widgets/tim_ui_kit_base.dart';

class RecentForwardList extends StatefulWidget {
  final bool isMultiSelect;
  final Function(List<V2TimConversation> conversationList)? onChanged;

  const RecentForwardList({
    Key? key,
    this.isMultiSelect = true,
    this.onChanged,
  }) : super(key: key);

  @override
  State<StatefulWidget> createState() => _RecentForwardListState();
}

class _RecentForwardListState extends TIMUIKitState<RecentForwardList> {
  final TUIConversationViewModel _conversationViewModel =
      TUIConversationViewModel();
  final List<V2TimConversation> _selectedConversation = [];

  List<ISuspensionBeanImpl<V2TimConversation?>> _buildMemberList(
      List<V2TimConversation?> conversationList) {
    final List<ISuspensionBeanImpl<V2TimConversation?>> showList =
        List.empty(growable: true);
    for (var i = 0; i < conversationList.length; i++) {
      final item = conversationList[i];
      showList.add(ISuspensionBeanImpl(memberInfo: item, tagIndex: "#"));
    }
    return showList;
  }

  Widget _buildItem(V2TimConversation conversation) {
    final faceUrl = conversation.faceUrl ?? "";
    final showName = conversation.showName ?? "";

    return Row(
      mainAxisAlignment: MainAxisAlignment.spaceBetween,
      children: [
        if (widget.isMultiSelect)
          Padding(
            padding: const EdgeInsets.only(left: 16.0),
            child: CheckBoxButton(
              isChecked: _selectedConversation.contains(conversation),
              onChanged: (value) {
                if (value) {
                  _selectedConversation.add(conversation);
                } else {
                  _selectedConversation.remove(conversation);
                }
                setState(() {});
                if (widget.onChanged != null) {
                  widget.onChanged!(_selectedConversation);
                }
              },
            ),
          ),
        Expanded(
            child: InkWell(
          onTap: () {
            if (widget.isMultiSelect) {
              final isSelected = _selectedConversation.contains(conversation);
              if (isSelected) {
                _selectedConversation.remove(conversation);
              } else {
                _selectedConversation.add(conversation);
              }
              if (widget.onChanged != null) {
                widget.onChanged!(_selectedConversation);
              }
              setState(() {});
            } else {
              if (widget.onChanged != null) {
                widget.onChanged!([conversation]);
              }
            }
          },
          child: Container(
            padding: const EdgeInsets.only(top: 10, left: 16),
            child: Row(
              children: [
                Container(
                  height: 40,
                  width: 40,
                  margin: const EdgeInsets.only(right: 12),
                  child: Avatar(faceUrl: faceUrl, showName: showName),
                ),
                Expanded(
                    child: Container(
                  alignment: Alignment.centerLeft,
                  padding: const EdgeInsets.only(top: 10, bottom: 19),
                  decoration: const BoxDecoration(
                      border:
                          Border(bottom: BorderSide(color: Color(0xFFDBDBDB)))),
                  child: Text(
                    showName,
                    // textAlign: TextAlign.center,
                    style:
                        const TextStyle(color: Color(0xFF111111), fontSize: 18),
                  ),
                ))
              ],
            ),
          ),
        ))
      ],
    );
  }

  @override
  void initState() {
    super.initState();
    _conversationViewModel.loadData(count: 50);
  }

  @override
  void dispose() {
    super.dispose();
    _conversationViewModel.dispose();
  }

  @override
  Widget tuiBuild(BuildContext context, TUIKitBuildValue value) {
    final TUITheme theme = value.theme;

    if (!widget.isMultiSelect) {
      _selectedConversation.clear();
    }
    return MultiProvider(
      providers: [
        ChangeNotifierProvider.value(value: _conversationViewModel),
      ],
      builder: (context, w) {
        final recentConvList =
            Provider.of<TUIConversationViewModel>(context).conversationList;
        final showList = _buildMemberList(recentConvList);

        return AZListViewContainer(
          memberList: showList,
          isShowIndexBar: false,
          susItemBuilder: (context, index) {
            return Container(
              height: 40,
              width: MediaQuery.of(context).size.width,
              padding: const EdgeInsets.only(left: 16.0),
              color: theme.weakDividerColor,
              alignment: Alignment.centerLeft,
              child: Text(
                TIM_t("最近联系人"),
                softWrap: true,
                style: TextStyle(
                  fontSize: 14.0,
                  color: theme.weakTextColor,
                ),
              ),
            );
          },
          itemBuilder: (context, index) {
            final conversation = showList[index].memberInfo;
            if (conversation != null) {
              return _buildItem(conversation);
            } else {
              return Container();
            }
          },
        );
      },
    );
  }
}
文件：/im-flutter-uikit/package_src/tim_ui_kit/lib/ui/widgets/text_input_bottom_sheet.dart
import 'package:flutter/material.dart';
import 'package:tencent_im_base/tencent_im_base.dart';
import 'package:tim_ui_kit/data_services/core/core_services_implements.dart';
import 'package:tim_ui_kit/data_services/services_locatar.dart';

class TextInputBottomSheet {
  static showTextInputBottomSheet(BuildContext context, String title,
      String tips, Function(String text) onSubmitted) {
    final CoreServicesImpl _coreService = serviceLocator<CoreServicesImpl>();
    TextEditingController _selectionController = TextEditingController();

    showModalBottomSheet(
        isScrollControlled: true, // !important
        context: context,
        builder: (BuildContext context) {
          return SingleChildScrollView(
              child: Container(
            padding: EdgeInsets.only(
              top: 12,
              left: 16,
              right: 16,
              bottom: MediaQuery.of(context).viewInsets.bottom,
            ),
            child: Column(
              mainAxisAlignment: MainAxisAlignment.start,
              children: [
                Text(title,
                    style: const TextStyle(
                        fontWeight: FontWeight.w500, fontSize: 15)),
                TextField(
                  controller: _selectionController,
                ),
                Row(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Container(
                      padding: const EdgeInsets.symmetric(vertical: 5),
                      height: 40,
                      child: Text(
                        tips,
                        style: const TextStyle(color: Colors.grey),
                      ),
                    )
                  ],
                ),
                SizedBox(
                  width: double.infinity,
                  child: ElevatedButton(
                      style: ButtonStyle(
                        shape: MaterialStateProperty.all(RoundedRectangleBorder(
                            borderRadius: BorderRadius.circular(5))),
                      ),
                      onPressed: () {
                        String text = _selectionController.text;
                        if (text == "") {
                          _coreService.callOnCallback(TIMCallback(
                              type: TIMCallbackType.INFO,
                              infoRecommendText: TIM_t("输入不能为空"),
                              infoCode: 6661401));
                          return;
                        }
                        onSubmitted(text);
                        Navigator.pop(context);
                      },
                      child: Text(TIM_t("确定"))),
                ),
                const SizedBox(
                  height: 40,
                )
              ],
            ),
          ));
        });
  }
}
文件：/im-flutter-uikit/package_src/tim_ui_kit/lib/ui/widgets/toast.dart
import 'package:flutter/material.dart';
import 'package:fluttertoast/fluttertoast.dart';

enum ToastType { success, fail, info }

class Toast {
  static FToast? fToast;

  Toast(String s);
  static removeToast() {
    fToast?.removeCustomToast();
  }

  static removeAllQueuedToasts() {
    fToast?.removeQueuedCustomToasts();
  }

  static init(BuildContext context) {
    fToast = FToast();
    fToast!.init(context);
  }

  static IconData generateIcon(ToastType type) {
    switch (type) {
      case ToastType.success:
        return Icons.check;
      case ToastType.fail:
        return Icons.close;
      case ToastType.info:
        return Icons.info;
    }
  }

  static showToast(ToastType type, String msg, BuildContext context) {
    init(context);
    fToast!.showToast(
        child: Container(
          padding: const EdgeInsets.symmetric(horizontal: 48.0, vertical: 24.0),
          decoration: BoxDecoration(
            borderRadius: BorderRadius.circular(12.0),
            color: const Color(0xFF333333),
          ),
          child: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              Padding(
                  padding: const EdgeInsets.fromLTRB(0, 12.0, 0, 36.0),
                  child: Icon(generateIcon(type),
                      size: 64.0, color: Colors.white)),
              Text(
                msg,
                style: const TextStyle(
                  color: Colors.white,
                  fontSize: 18,
                ),
              ),
            ],
          ),
        ),
        gravity: ToastGravity.CENTER,
        toastDuration: const Duration(seconds: 2));
  }
}
文件：/im-flutter-uikit/package_src/tim_ui_kit/lib/ui/widgets/transimit_group_owner_select.dart
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:tim_ui_kit/base_widgets/tim_ui_kit_state.dart';
import 'package:tim_ui_kit/business_logic/view_models/tui_group_profile_view_model.dart';
import 'package:tim_ui_kit/data_services/services_locatar.dart';
import 'package:tim_ui_kit/tim_ui_kit.dart';
import 'package:tim_ui_kit/ui/utils/color.dart';
import 'package:tim_ui_kit/ui/views/TIMUIKitGroupProfile/widgets/tim_ui_group_member_search.dart';
import 'package:tim_ui_kit/ui/widgets/group_member_list.dart';

import 'package:tim_ui_kit/base_widgets/tim_ui_kit_base.dart';

class SelectTransimitOwner extends StatefulWidget {
  final String? groupID;
  const SelectTransimitOwner({
    this.groupID,
    Key? key,
  }) : super(key: key);

  @override
  State<StatefulWidget> createState() => _SelectCallInviterState();
}

class _SelectCallInviterState extends TIMUIKitState<SelectTransimitOwner> {
  final TUIGroupProfileViewModel _model = TUIGroupProfileViewModel();
  final CoreServicesImpl _coreServicesImpl = serviceLocator<CoreServicesImpl>();
  List<V2TimGroupMemberFullInfo> selectedMember = [];
  List<V2TimGroupMemberFullInfo?>? searchMemberList;
  String? searchText;

  @override
  void initState() {
    super.initState();
    if (widget.groupID != null) {
      _model.loadData(widget.groupID!);
    }
  }

  @override
  void dispose() {
    super.dispose();
    _model.dispose();
  }

  bool isSearchTextExist(String? searchText) {
    return searchText != null && searchText != "";
  }

  handleSearchGroupMembers(String searchText, context) async {
    searchText = searchText;
    List<V2TimGroupMemberFullInfo?> currentGroupMember =
        Provider.of<TUIGroupProfileViewModel>(context, listen: false)
                .groupMemberList
                ?.where((element) =>
                    element?.userID != _coreServicesImpl.loginInfo.userID)
                .toList() ??
            [];
    final res = await _model.searchGroupMember(V2TimGroupMemberSearchParam(
      keywordList: [searchText],
      groupIDList: [_model.groupInfo!.groupID],
    ));

    if (res.code == 0) {
      List<V2TimGroupMemberFullInfo?> list = [];
      final searchResult = res.data!.groupMemberSearchResultItems!;
      searchResult.forEach((key, value) {
        if (value is List) {
          for (V2TimGroupMemberFullInfo item in value) {
            list.add(item);
          }
        }
      });

      currentGroupMember = list;
    } else {
      currentGroupMember = [];
    }
    setState(() {
      searchMemberList =
          isSearchTextExist(searchText) ? currentGroupMember : null;
    });
  }

  @override
  Widget tuiBuild(BuildContext context, TUIKitBuildValue value) {
    final TUITheme theme = value.theme;

    return Scaffold(
        appBar: AppBar(
          shadowColor: theme.weakBackgroundColor,
          iconTheme: const IconThemeData(
            color: Colors.white,
          ),
          flexibleSpace: Container(
            decoration: BoxDecoration(
              gradient: LinearGradient(colors: [
                theme.lightPrimaryColor ?? CommonColor.lightPrimaryColor,
                theme.primaryColor ?? CommonColor.primaryColor
              ]),
            ),
          ),
          leading: TextButton(
            onPressed: () {
              Navigator.pop(context);
            },
            child: Text(
              TIM_t("取消"),
              style: const TextStyle(
                color: Colors.white,
                fontSize: 16,
              ),
            ),
          ),
          actions: [
            TextButton(
              onPressed: () {
                if (selectedMember.isNotEmpty) {
                  Navigator.pop(context, selectedMember);
                }
              },
              child: Text(
                TIM_t("完成"),
                style: const TextStyle(
                  color: Colors.white,
                  fontSize: 16,
                ),
              ),
            )
          ],
          centerTitle: true,
          leadingWidth: 100,
          title: const Text(
            "转让群主",
            style: TextStyle(
              color: Colors.white,
              fontSize: 17,
            ),
          ),
        ),
        body: ChangeNotifierProvider.value(
            value: _model,
            child: Consumer<TUIGroupProfileViewModel>(
                builder: ((context, value, child) {
              return GroupProfileMemberList(
                customTopArea: GroupMemberSearchTextField(
                  onTextChange: (text) =>
                      handleSearchGroupMembers(text, context),
                ),
                memberList: (searchMemberList ?? value.groupMemberList ?? [])
                    .where((element) =>
                        element?.userID != _coreServicesImpl.loginInfo.userID)
                    .toList(),
                canSlideDelete: false,
                canSelectMember: true,
                maxSelectNum: 1,
                onSelectedMemberChange: (member) {
                  selectedMember = member;
                  setState(() {});
                },
                touchBottomCallBack: () {
                  _model.loadMoreData(groupID: _model.groupInfo!.groupID);
                },
              );
            }))));
  }
}
文件：/im-flutter-uikit/package_src/tim_ui_kit/lib/ui/widgets/unread_message.dart
import 'package:flutter/material.dart';
import 'package:tim_ui_kit/base_widgets/tim_ui_kit_statelesswidget.dart';
import 'package:tim_ui_kit/ui/utils/color.dart';
import 'package:tim_ui_kit/ui/utils/tui_theme.dart';
import 'package:tim_ui_kit/base_widgets/tim_ui_kit_base.dart';

class UnreadMessage extends TIMUIKitStatelessWidget {
  final int unreadCount;
  final double width;
  final double height;
  UnreadMessage(
      {Key? key,
      required this.unreadCount,
      this.width = 22.0,
      this.height = 22.0})
      : super(key: key);

  String generateUnreadText() =>
      unreadCount > 99 ? '99+' : unreadCount.toString();
  double generateFontSize(String text) => text.length * -2 + 14;

  @override
  Widget tuiBuild(BuildContext context, TUIKitBuildValue value) {
    final TUITheme theme = value.theme;

    final unreadText = generateUnreadText();
    final fontSize = generateFontSize(unreadText);
    return Container(
      width: width,
      height: height,
      alignment: Alignment.center,
      decoration: BoxDecoration(
        shape: BoxShape.circle,
        color: theme.cautionColor ?? CommonColor.cautionColor,
      ),
      child: unreadText != "0"
          ? Text(unreadText,
              style: TextStyle(color: Colors.white, fontSize: fontSize))
          : null,
    );
  }
}
文件：/im-flutter-uikit/package_src/tim_ui_kit/lib/ui/widgets/video_custom_control.dart
// ignore_for_file: implementation_imports, unused_element

import 'dart:async';

import 'package:chewie/chewie.dart';
import 'package:chewie/src/helpers/utils.dart';
import 'package:chewie/src/animated_play_pause.dart';
import 'package:chewie/src/material/material_progress_bar.dart';
import 'package:flutter/material.dart';
import 'package:tim_ui_kit/base_widgets/tim_ui_kit_state.dart';
import 'package:tim_ui_kit/base_widgets/tim_ui_kit_statelesswidget.dart';
import 'package:tim_ui_kit/ui/utils/tui_theme.dart';
import 'package:video_player/video_player.dart';
import 'center_play_button.dart';
import 'package:tim_ui_kit/base_widgets/tim_ui_kit_base.dart';

class VideoCustomControls extends StatefulWidget {
  const VideoCustomControls({required this.downloadFn, Key? key})
      : super(key: key);
  final void Function() downloadFn;

  @override
  State<StatefulWidget> createState() {
    return _VideoCustomControlsState();
  }
}

class _VideoCustomControlsState extends TIMUIKitState<VideoCustomControls>
    with SingleTickerProviderStateMixin {
  late VideoPlayerValue _latestValue;
  bool _hideStuff = true;
  Timer? _hideTimer;
  Timer? _initTimer;
  Timer? _showAfterExpandCollapseTimer;
  bool _dragging = false;
  bool _displayTapped = false;

  final barHeight = 48.0;
  final marginSize = 5.0;

  late VideoPlayerController controller;
  ChewieController? _chewieController;
  // We know that _chewieController is set in didChangeDependencies
  ChewieController get chewieController => _chewieController!;

  @override
  Widget tuiBuild(BuildContext context, TUIKitBuildValue value) {
    if (_latestValue.hasError) {
      return chewieController.errorBuilder?.call(
            context,
            chewieController.videoPlayerController.value.errorDescription!,
          ) ??
          const Center(
            child: Icon(
              Icons.error,
              color: Colors.white,
              size: 42,
            ),
          );
    }

    return MouseRegion(
      onHover: (_) {
        _cancelAndRestartTimer();
      },
      child: GestureDetector(
        onTap: () => _cancelAndRestartTimer(),
        child: AbsorbPointer(
          absorbing: _hideStuff,
          child: Stack(
            fit: StackFit.expand,
            children: <Widget>[
              if (_latestValue.isBuffering)
                const Center(
                    child: CircularProgressIndicator(color: Colors.white))
              else
                _buildHitArea(),
              Positioned(
                bottom: 0,
                width: MediaQuery.of(context).size.width,
                child: Column(children: [
                  _buildVideoControlBar(context),
                  _buildBottomBar()
                ]),
              )
            ],
          ),
        ),
      ),
    );
  }

  @override
  void dispose() {
    _dispose();
    super.dispose();
  }

  void _dispose() {
    controller.removeListener(_updateState);
    _hideTimer?.cancel();
    _initTimer?.cancel();
    _showAfterExpandCollapseTimer?.cancel();
  }

  @override
  void didChangeDependencies() {
    final _oldController = _chewieController;
    _chewieController = ChewieController.of(context);
    controller = chewieController.videoPlayerController;

    if (_oldController != chewieController) {
      _dispose();
      _initialize();
    }

    super.didChangeDependencies();
  }

  Widget _buildBottomBar() {
    return Container(
      height: barHeight,
      margin: const EdgeInsets.fromLTRB(20, 0, 20, 20),
      child: Row(
        children: <Widget>[
          IconButton(
            icon: Image.asset(
              'images/close.png',
              package: 'tim_ui_kit',
            ),
            iconSize: 30,
            onPressed: () {
              if (_latestValue.isPlaying) {
                _playPause();
              }
              Navigator.of(context).pop();
            },
          ),
          Expanded(child: Container()),
          IconButton(
            icon: Image.asset(
              'images/download.png',
              package: 'tim_ui_kit',
            ),
            iconSize: 30,
            onPressed: widget.downloadFn,
          )
        ],
      ),
    );
  }

  AnimatedOpacity _buildVideoControlBar(
    BuildContext context,
  ) {
    const iconColor = Colors.white;

    return AnimatedOpacity(
      opacity: _hideStuff ? 0.0 : 1.0,
      duration: const Duration(milliseconds: 300),
      child: SizedBox(
        height: barHeight,
        child: Row(
          children: <Widget>[
            _buildPlayPause(controller, iconColor),
            if (chewieController.isLive)
              const Expanded(child: Text('LIVE'))
            else
              _buildPositionStart(iconColor),
            if (chewieController.isLive)
              const SizedBox()
            else
              _buildProgressBar(),
            if (!chewieController.isLive) _buildPositionEnd(iconColor),
          ],
        ),
      ),
    );
  }

  Widget _buildHitArea() {
    // final bool isFinished = _latestValue.position >= _latestValue.duration;

    return GestureDetector(
        onTap: () {
          if (_latestValue.isPlaying) {
            if (_displayTapped) {
              setState(() {
                _hideStuff = true;
              });
            } else {
              _cancelAndRestartTimer();
            }
          } else {
            _playPause();

            setState(() {
              _hideStuff = true;
            });
          }
        },
        child: CenterPlayButton(
          isPlaying: controller.value.isPlaying,
          show: !_latestValue.isPlaying && !_dragging,
          onPressed: _playPause,
        ));
  }

  GestureDetector _buildPlayPause(
      VideoPlayerController controller, Color color) {
    return GestureDetector(
      onTap: _playPause,
      child: Container(
        height: barHeight,
        color: Colors.transparent,
        margin: const EdgeInsets.only(left: 8.0, right: 4.0),
        padding: const EdgeInsets.only(
          left: 12.0,
          right: 12.0,
        ),
        child: AnimatedPlayPause(
          playing: controller.value.isPlaying,
          color: color,
        ),
      ),
    );
  }

  Widget _buildPositionStart(Color? iconColor) {
    final position = _latestValue.position;

    return Padding(
      padding: const EdgeInsets.only(right: 24.0),
      child: Text(
        formatDuration(position),
        style: TextStyle(fontSize: 14.0, color: iconColor),
      ),
    );
  }

  Widget _buildPositionEnd(Color? iconColor) {
    final duration = _latestValue.duration;

    return Padding(
      padding: const EdgeInsets.only(right: 24.0),
      child: Text(
        formatDuration(duration),
        style: TextStyle(fontSize: 14.0, color: iconColor),
      ),
    );
  }

  void _cancelAndRestartTimer() {
    _hideTimer?.cancel();
    _startHideTimer();

    setState(() {
      _hideStuff = false;
      _displayTapped = true;
    });
  }

  Future<void> _initialize() async {
    controller.addListener(_updateState);

    _updateState();

    if (controller.value.isPlaying || chewieController.autoPlay) {
      _startHideTimer();
    }

    if (chewieController.showControlsOnInitialize) {
      _initTimer = Timer(const Duration(milliseconds: 200), () {
        setState(() {
          _hideStuff = false;
        });
      });
    }
  }

  void _onExpandCollapse() {
    setState(() {
      _hideStuff = true;

      chewieController.toggleFullScreen();
      _showAfterExpandCollapseTimer =
          Timer(const Duration(milliseconds: 300), () {
        setState(() {
          _cancelAndRestartTimer();
        });
      });
    });
  }

  void _playPause() {
    final isFinished = _latestValue.position >= _latestValue.duration;

    setState(() {
      if (controller.value.isPlaying) {
        _hideStuff = false;
        _hideTimer?.cancel();
        controller.pause();
      } else {
        _cancelAndRestartTimer();

        if (!controller.value.isInitialized) {
          controller.initialize().then((_) {
            controller.play();
          });
        } else {
          if (isFinished) {
            controller.seekTo(const Duration());
          }
          controller.play();
        }
      }
    });
  }

  void _startHideTimer() {
    _hideTimer = Timer(const Duration(seconds: 3), () {
      setState(() {
        _hideStuff = true;
      });
    });
  }

  void _updateState() {
    if (!mounted) return;
    setState(() {
      _latestValue = controller.value;
    });
  }

  Widget _buildProgressBar() {
    return Expanded(
      child: Padding(
        padding: const EdgeInsets.only(right: 20.0),
        child: MaterialVideoProgressBar(
          controller,
          onDragStart: () {
            setState(() {
              _dragging = true;
            });

            _hideTimer?.cancel();
          },
          onDragEnd: () {
            setState(() {
              _dragging = false;
            });

            _startHideTimer();
          },
          colors: chewieController.materialProgressColors ??
              ChewieProgressColors(
                  playedColor: Colors.white,
                  handleColor: Colors.white,
                  bufferedColor: Colors.white38,
                  backgroundColor: Colors.white24),
        ),
      ),
    );
  }
}

class _PlaybackSpeedDialog extends TIMUIKitStatelessWidget {
  _PlaybackSpeedDialog({
    Key? key,
    required List<double> speeds,
    required double selected,
  })  : _speeds = speeds,
        _selected = selected,
        super(key: key);

  final List<double> _speeds;
  final double _selected;

  @override
  Widget tuiBuild(BuildContext context, TUIKitBuildValue value) {
    final TUITheme theme = value.theme;

    final Color selectedColor =
        theme.primaryColor ?? Theme.of(context).primaryColor;

    return ListView.builder(
      shrinkWrap: true,
      physics: const ScrollPhysics(),
      itemBuilder: (context, index) {
        final _speed = _speeds[index];
        return ListTile(
          dense: true,
          title: Row(
            children: [
              if (_speed == _selected)
                Icon(
                  Icons.check,
                  size: 20.0,
                  color: selectedColor,
                )
              else
                Container(width: 20.0),
              const SizedBox(width: 16.0),
              Text(_speed.toString()),
            ],
          ),
          selected: _speed == _selected,
          onTap: () {
            Navigator.of(context).pop(_speed);
          },
        );
      },
      itemCount: _speeds.length,
    );
  }
}
文件：/im-flutter-uikit/package_src/tim_ui_kit/lib/ui/widgets/video_screen.dart
import 'dart:io';
import 'dart:math';

import 'package:dio/dio.dart';
import 'package:tencent_im_base/tencent_im_base.dart';
import 'package:extended_image/extended_image.dart';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:image_gallery_saver/image_gallery_saver.dart';
import 'package:path_provider/path_provider.dart';
import 'package:permission_handler/permission_handler.dart';

import 'package:chewie/chewie.dart';
import 'package:tim_ui_kit/base_widgets/tim_ui_kit_state.dart';
import 'package:tim_ui_kit/ui/utils/permission.dart';
import 'package:tim_ui_kit/ui/utils/platform.dart';
import 'package:tim_ui_kit/ui/widgets/video_custom_control.dart';
import 'package:video_player/video_player.dart';

import 'package:tim_ui_kit/base_widgets/tim_ui_kit_base.dart';

class VideoScreen extends StatefulWidget {
  const VideoScreen({required this.message, required this.heroTag, Key? key})
      : super(key: key);

  final V2TimMessage message;
  final dynamic heroTag;

  @override
  State<StatefulWidget> createState() => _VideoScreenState();
}

class _VideoScreenState extends TIMUIKitState<VideoScreen> {
  late VideoPlayerController videoPlayerController;
  late ChewieController chewieController;
  GlobalKey<ExtendedImageSlidePageState> slidePagekey =
      GlobalKey<ExtendedImageSlidePageState>();
  bool isInit = false;
  @override
  initState() {
    super.initState();
    setVideoMessage();
    // 允许横屏
    SystemChrome.setPreferredOrientations([
      DeviceOrientation.landscapeLeft,
      DeviceOrientation.landscapeRight,
      DeviceOrientation.portraitUp,
      DeviceOrientation.portraitDown,
    ]);
  }

  //保存网络视频到本地
  _savenNetworkVideo(context, String videoUrl, {bool isAsset = true}) async {
    if (PlatformUtils().isIOS) {
      if (!await Permissions.checkPermission(
          context, Permission.photosAddOnly.value)) {
        return;
      }
    } else {
      if (!await Permissions.checkPermission(
          context, Permission.storage.value)) {
        return;
      }
    }
    String savePath = videoUrl;
    if (!isAsset) {
      var appDocDir = await getTemporaryDirectory();
      savePath = appDocDir.path + "/temp.mp4";
      await Dio().download(videoUrl, savePath);
    }
    var result = await ImageGallerySaver.saveFile(savePath);
    if (PlatformUtils().isIOS) {
      if (result['isSuccess']) {
        onTIMCallback(TIMCallback(
            type: TIMCallbackType.INFO,
            infoRecommendText: TIM_t("视频保存成功"),
            infoCode: 6660402));
      } else {
        onTIMCallback(TIMCallback(
            type: TIMCallbackType.INFO,
            infoRecommendText: TIM_t("视频保存失败"),
            infoCode: 6660403));
      }
    } else {
      if (result != null) {
        onTIMCallback(TIMCallback(
            type: TIMCallbackType.INFO,
            infoRecommendText: TIM_t("视频保存成功"),
            infoCode: 6660402));
      } else {
        onTIMCallback(TIMCallback(
            type: TIMCallbackType.INFO,
            infoRecommendText: TIM_t("视频保存失败"),
            infoCode: 6660403));
      }
    }
  }

  void _saveVideo() {
    if (widget.message.videoElem!.videoUrl == null) {
      _savenNetworkVideo(context, widget.message.videoElem!.videoPath!,
          isAsset: true);
    } else {
      _savenNetworkVideo(context, widget.message.videoElem!.videoUrl!,
          isAsset: false);
    }
  }

  double getVideoHeight() {
    double height = widget.message.videoElem!.snapshotHeight!.toDouble();
    double width = widget.message.videoElem!.snapshotWidth!.toDouble();
    // 横图
    if (width > height) {
      return height * 1.3;
    }
    return height;
  }

  double getVideoWidth() {
    double height = widget.message.videoElem!.snapshotHeight!.toDouble();
    double width = widget.message.videoElem!.snapshotWidth!.toDouble();
    // 横图
    if (width > height) {
      return width * 1.3;
    }
    return width;
  }

  setVideoMessage() async {
    // 当消息发送中时请使用本地资源
    VideoPlayerController player = widget.message.videoElem!.videoUrl == null ||
            widget.message.status == MessageStatus.V2TIM_MSG_STATUS_SENDING
        ? VideoPlayerController.file(File(
            widget.message.videoElem!.videoPath!,
          ))
        : (widget.message.videoElem?.localVideoUrl == null ||
                widget.message.videoElem?.localVideoUrl == "")
            ? VideoPlayerController.network(
                widget.message.videoElem!.videoUrl!,
              )
            : VideoPlayerController.file(File(
                widget.message.videoElem!.localVideoUrl!,
              ));
    await player.initialize();
    WidgetsBinding.instance?.addPostFrameCallback((_) {
      // 图片目前按照缩略图尺寸走的，并未走UI图，UI图比例过大图片很糊
      double w = getVideoWidth();
      double h = getVideoHeight();
      ChewieController controller = ChewieController(
          videoPlayerController: player,
          autoPlay: true,
          looping: false,
          showControlsOnInitialize: false,
          allowPlaybackSpeedChanging: false,
          aspectRatio: w == 0 || h == 0 ? null : w / h,
          customControls: VideoCustomControls(downloadFn: _saveVideo));
      setState(() {
        videoPlayerController = player;
        chewieController = controller;
        isInit = true;
      });
    });
  }

  @override
  didUpdateWidget(oldWidget) {
    if (oldWidget.message.videoElem!.videoUrl !=
            widget.message.videoElem!.videoUrl ||
        oldWidget.message.videoElem!.videoPath !=
            widget.message.videoElem!.videoPath) {
      setVideoMessage();
    }
    super.didUpdateWidget(oldWidget);
  }

  @override
  void dispose() {
    SystemChrome.setPreferredOrientations([
      DeviceOrientation.portraitUp,
    ]);
    if (isInit) {
      videoPlayerController.dispose();
      chewieController.dispose();
    }
    super.dispose();
  }

  @override
  Widget tuiBuild(BuildContext context, TUIKitBuildValue value) {
    return OrientationBuilder(builder: ((context, orientation) {
      return Container(
        color: Colors.transparent,
        constraints: BoxConstraints.expand(
          height: MediaQuery.of(context).size.height,
        ),
        child: ExtendedImageSlidePage(
            key: slidePagekey,
            slidePageBackgroundHandler: (Offset offset, Size size) {
              if (orientation == Orientation.landscape) {
                return Colors.black;
              }
              double opacity = 0.0;
              opacity = offset.distance /
                  (Offset(size.width, size.height).distance / 2.0);
              return Colors.black
                  .withOpacity(min(1.0, max(1.0 - opacity, 0.0)));
            },
            slideType: SlideType.onlyImage,
            child: ExtendedImageSlidePageHandler(
              child: Container(
                  color: Colors.black,
                  child: isInit
                      ? Chewie(
                          controller: chewieController,
                        )
                      : const Center(
                          child:
                              CircularProgressIndicator(color: Colors.white))),
              heroBuilderForSlidingPage: (Widget result) {
                return Hero(
                  tag: widget.heroTag,
                  child: result,
                  flightShuttleBuilder: (BuildContext flightContext,
                      Animation<double> animation,
                      HeroFlightDirection flightDirection,
                      BuildContext fromHeroContext,
                      BuildContext toHeroContext) {
                    final Hero hero =
                        (flightDirection == HeroFlightDirection.pop
                            ? fromHeroContext.widget
                            : toHeroContext.widget) as Hero;

                    return hero.child;
                  },
                );
              },
            )),
      );
    }));
  }
}
文件：/im-flutter-uikit/package_src/tim_ui_kit/lib/ui/widgets/link_preview/link_preview_entry.dart
import 'package:flutter/material.dart';
import 'package:tencent_im_base/tencent_im_base.dart';
import 'package:tim_ui_kit/ui/widgets/link_preview/common/utils.dart';
import 'package:tim_ui_kit/ui/widgets/link_preview/widgets/link_preview.dart';
import 'package:tim_ui_kit/ui/widgets/link_preview/widgets/link_text.dart';

import 'models/link_preview_content.dart';

class LinkPreviewEntry {
  /// get the text message with hyperlinks
  static LinkPreviewText? getHyperlinksText(V2TimMessage message,
      [Function(String)? onLinkTap]) {
    final String? messageText = message.textElem!.text;

    if (messageText == null) {
      return null;
    }

    return ({TextStyle? style}) {
      return LinkText(
          messageText: messageText, style: style, onLinkTap: onLinkTap);
    };
  }

  /// get the [LinkPreviewContent] with preview widget and website information for the first link.
  /// If you provide `onUpdateMessage(String linkInfoJson)`, it can save the link info to local custom data than call updating the message on UI automatically.
  static Future<LinkPreviewContent?> getFirstLinkPreviewContent(
      {required V2TimMessage message, VoidCallback? onUpdateMessage}) async {
    final String? messageText = message.textElem!.text;
    if (messageText == null) {
      return null;
    }

    final List<String> urlMatches = LinkUtils.getURLMatches(messageText);
    if (urlMatches.isEmpty) {
      return null;
    }

    final List<LinkPreviewModel?> previewItemList =
        await LinkUtils.getURLPreview([urlMatches[0]]);
    if (previewItemList.isNotEmpty) {
      final LinkPreviewModel previewItem = previewItemList.first!;
      if (onUpdateMessage != null) {
        LinkUtils.saveToLocalAndUpdate(message, previewItem, onUpdateMessage);
      }
      return LinkPreviewContent(
        linkInfo: previewItem,
        linkPreviewWidget: LinkPreviewWidget(linkPreview: previewItem),
      );
    } else {
      return null;
    }
  }

  /// get the [LinkPreviewContent] with preview widget and website information for all the links
  static Future<List<LinkPreviewContent?>?> getAllLinkPreviewContent(
      V2TimMessage message) async {
    final String? messageText = message.textElem!.text;
    if (messageText == null) {
      return null;
    }

    final List<String> urlMatches = LinkUtils.getURLMatches(messageText);
    if (urlMatches.isEmpty) {
      return [];
    }

    final List<LinkPreviewModel> previewItemList =
        await LinkUtils.getURLPreview([urlMatches[0]]);
    if (previewItemList.isNotEmpty) {
      final List<LinkPreviewContent?> resultList = previewItemList
          .map((e) => LinkPreviewContent(
                linkInfo: e,
                linkPreviewWidget: LinkPreviewWidget(linkPreview: e),
              ))
          .toList();

      return resultList;
    } else {
      return [];
    }
  }

  static String linkInfoToString(LinkPreviewModel linkInfo) {
    return linkInfo.toString();
  }

  // static LinkPreviewModel? linkInfoFromString(String linkInfoString){
  //   final Map<String, dynamic> data = json.decode(linkInfoString);
  //   LinkPreviewModel linkPreview = LinkPreviewModel(
  //       url: data['url'],
  //       image: data['image'],
  //       title: data['title'],
  //       description: data['description']
  //   );
  //   return isLinkInfoEmpty(linkPreview) ? null : linkPreview;
  // }
  //
  // static bool isLinkInfoEmpty(LinkPreviewModel linkInfo){
  //   if(linkInfo.image == null && linkInfo.title == null && linkInfo.description == null){
  //     return true;
  //   }
  //   return false;
  // }
}
文件：/im-flutter-uikit/package_src/tim_ui_kit/lib/ui/widgets/link_preview/common/extensions.dart
/// Extensions on [Uri]
extension UriX on Uri {
  /// Return the URI adding the http scheme if it is missing
  Uri get withScheme {
    if (hasScheme) return this;
    return Uri.parse('http://${toString()}');
  }
}
文件：/im-flutter-uikit/package_src/tim_ui_kit/lib/ui/widgets/link_preview/common/utils.dart
import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:link_preview_generator/link_preview_generator.dart';
import 'package:tencent_im_base/tencent_im_base.dart';
import 'package:tim_ui_kit/ui/widgets/link_preview/common/extensions.dart';
import 'package:tim_ui_kit/ui/widgets/link_preview/link_preview_entry.dart';
import 'package:tim_ui_kit/ui/widgets/link_preview/models/link_preview_content.dart';
import 'package:url_launcher/url_launcher.dart';

class LinkUtils {
  static RegExp urlReg = RegExp(
      r"[-a-zA-Z0-9@:%_+.~#?&//=]{2,256}\.[a-z]{2,4}\b([-a-zA-Z0-9@:%_+.~#?&//=]*)?");

  /// Get all the URL from a text message
  static List<String> getURLMatches(String textMessage) {
    final matches = urlReg.allMatches(textMessage).toList();

    List<String> urlMatches = [];

    for (Match m in matches) {
      String match = m.group(0) ?? "";
      urlMatches.add(match);
    }

    return urlMatches;
  }

  /// Launch URL
  static Future<void> launchURL(BuildContext context, String url) async {
    try {
      await launchUrl(
        Uri.parse(url).withScheme,
        mode: LaunchMode.externalApplication,
      );
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text(TIM_t("无法打开URL"))), // Cannot launch the url
      );
    }
  }

  /// Get color
  static Color hexToColor(String hexString) {
    return Color(int.parse(hexString, radix: 16)).withAlpha(255);
  }

  /// Get the URL preview information
  static Future<List<LinkPreviewModel>> getURLPreview(
      List<String> urlMatches) async {
    // Request for preview information for all URL links synchronously
    final List<LinkPreviewModel> urlPreview =
        await Future.wait(urlMatches.map((e) async {
      String url = e;
      if (!e.contains("http")) {
        url = 'http://$e';
      }
      final WebInfo info = await LinkPreview.scrapeFromURL(url);

      return LinkPreviewModel(
          url: e,
          title: info.title,
          image: info.image,
          description: info.description);
    }));

    return urlPreview;
  }

  /// save the link info to local and call updating the message on UI, only works with [onUpdateMessage]
  static Future<void> saveToLocalAndUpdate(V2TimMessage message,
      LinkPreviewModel previewItem, VoidCallback onUpdateMessage) async {
    if (message.msgID != null) {
      String saveInfo = LinkPreviewEntry.linkInfoToString(previewItem);
      final currentInfo = message.localCustomData;
      if (currentInfo != null && currentInfo.isNotEmpty) {
        final Map<String, dynamic> data = json.decode(currentInfo);
        data['url'] = previewItem.url;
        data['image'] = previewItem.image;
        data['title'] = previewItem.title;
        data['description'] = previewItem.description;
        saveInfo = json.encode(data);
      }
      final result = await TencentImSDKPlugin.v2TIMManager.v2TIMMessageManager
          .setLocalCustomData(msgID: message.msgID!, localCustomData: saveInfo);
      if (result.code == 0) {
        onUpdateMessage();
      }
    }
  }
}
文件：/im-flutter-uikit/package_src/tim_ui_kit/lib/ui/widgets/link_preview/models/link_preview_content.dart
import 'dart:convert';

import 'package:flutter/cupertino.dart';

typedef LinkPreviewText = Widget Function({TextStyle? style});

class LinkPreviewModel {
  final String? description;
  final String? image;
  final String url;
  final String? title;

  LinkPreviewModel(
      {this.description, this.image, required this.url, this.title});

  Map<String, String?> toMap() {
    final Map<String, String?> data = {};
    data['url'] = url;
    data['image'] = image;
    data['title'] = title;
    data['description'] = description;
    return data;
  }

  LinkPreviewModel.fromMap(Map map)
      : description = map['description'],
        image = map['image'],
        url = map['url'],
        title = map['title'];

  @override
  String toString() {
    return json.encode(toMap());
  }

  bool isEmpty() {
    if ((image == null || image!.isEmpty) &&
        (title == null || title!.isEmpty) &&
        (description == null || description!.isEmpty)) {
      return true;
    }
    return false;
  }
}

class LinkPreviewContent {
  const LinkPreviewContent({
    this.linkInfo,
    this.linkPreviewWidget,
  });

  final LinkPreviewModel? linkInfo;
  final Widget? linkPreviewWidget;
}
文件：/im-flutter-uikit/package_src/tim_ui_kit/lib/ui/widgets/link_preview/widgets/link_preview.dart
import 'package:flutter/material.dart';
import 'package:tencent_im_base/tencent_im_base.dart';
import 'package:tim_ui_kit/ui/widgets/link_preview/common/utils.dart';
import 'package:tim_ui_kit/ui/widgets/link_preview/models/link_preview_content.dart';

class LinkPreviewWidget extends TIMStatelessWidget {
  final LinkPreviewModel linkPreview;

  const LinkPreviewWidget({Key? key, required this.linkPreview})
      : super(key: key);

  @override
  Widget timBuild(BuildContext context) {
    if (linkPreview.isEmpty()) {
      return Container();
    }
    return GestureDetector(
      onTap: () {
        LinkUtils.launchURL(context, linkPreview.url);
      },
      child: Container(
        padding: const EdgeInsets.only(top: 8, bottom: 8, left: 8, right: 8),
        decoration: const BoxDecoration(
          color: Color(0x19696969),
          borderRadius: BorderRadius.all(Radius.circular(6)),
        ),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          mainAxisSize: MainAxisSize.min,
          children: [
            if (linkPreview.title != null && linkPreview.title!.isNotEmpty)
              Text(
                linkPreview.title!,
                overflow: TextOverflow.ellipsis,
                style: const TextStyle(
                    fontSize: 14.0,
                    color: Color(0xFF444444),
                    fontWeight: FontWeight.w400),
              ),
            Row(
              mainAxisAlignment: MainAxisAlignment.start,
              children: [
                if (linkPreview.image != null && linkPreview.image!.isNotEmpty)
                  Container(
                    margin: const EdgeInsets.only(right: 8),
                    child: SizedBox(
                      height: 40,
                      width: 40,
                      child: Image.network(linkPreview.image!),
                    ),
                  ),
                if (linkPreview.description != null &&
                    linkPreview.description!.isNotEmpty)
                  Expanded(
                      child: Text(
                    linkPreview.description!,
                    style: const TextStyle(
                        fontSize: 12.0, color: Color(0xFF999999)),
                  )),
                if ((linkPreview.description == null ||
                        linkPreview.description!.isEmpty) &&
                    linkPreview.title != null &&
                    linkPreview.title!.isNotEmpty)
                  Expanded(
                      child: Text(
                    linkPreview.title!,
                    style: const TextStyle(
                        fontSize: 12.0, color: Color(0xFF999999)),
                  )),
              ],
            )
          ],
        ),
      ),
    );
  }
}
文件：/im-flutter-uikit/package_src/tim_ui_kit/lib/ui/widgets/link_preview/widgets/link_text.dart
import 'package:flutter/material.dart';
import 'package:flutter_markdown/flutter_markdown.dart';
import 'package:tencent_im_base/base_widgets/tim_stateless_widget.dart';
import 'package:tim_ui_kit/ui/widgets/link_preview/common/utils.dart';

class LinkText extends TIMStatelessWidget {
  /// Callback for when link is tapped
  final void Function(String)? onLinkTap;

  /// message text
  final String messageText;

  /// text style for default words
  final TextStyle? style;

  const LinkText(
      {Key? key, required this.messageText, this.onLinkTap, this.style})
      : super(key: key);

  @override
  Widget timBuild(BuildContext context) {
    return MarkdownBody(
      data: messageText,
      styleSheet: MarkdownStyleSheet.fromTheme(ThemeData(
              textTheme: TextTheme(
                  bodyText2: style ?? const TextStyle(fontSize: 16.0))))
          .copyWith(
        a: TextStyle(color: LinkUtils.hexToColor("015fff")),
      ),
      onTapLink: (
        String link,
        String? href,
        String title,
      ) {
        if (onLinkTap != null) {
          onLinkTap!(link);
        } else {
          LinkUtils.launchURL(context, link);
        }
      },
    );
  }
}
